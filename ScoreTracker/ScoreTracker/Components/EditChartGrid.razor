@namespace ScoreTracker.Web.Components
@using MediatR
@using Microsoft.AspNetCore.Components
@using ScoreTracker.Application.Commands
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.Models
@using ScoreTracker.Domain.SecondaryPorts
@using ScoreTracker.Domain.ValueTypes
@using ChartType = ScoreTracker.Domain.Enums.ChartType
@using System.ComponentModel.DataAnnotations
@inject IMediator Mediator;
@inject ICurrentUserAccessor CurrentUser;
@inject ISnackbar Snackbar
<MudGrid>
    @if (_selectedChart != null)
    {
        @if (ShowChartName)
        {
            <MudItem xs="12">
                <MudText Typo="Typo.h5">@_selectedChart.Song.Name @_selectedChart.DifficultyString</MudText>
            </MudItem>
        }
        
        <MudItem xs="12">
            <MudNumericField T="int?" Label="Score" Value="_inputScore" ValueChanged="ScoreChanged" Min="XXScore.Min" Max="XXScore.Max" Variant="Variant.Text" Clearable="true"></MudNumericField>
        </MudItem>
        <MudItem xs="4">
            @if (CurrentMix == MixEnum.XX)
            {
                
                <MudSelect T="XXLetterGrade?" Value="_selectedLetterGrade" ValueChanged="LetterGradeChanged" Clearable="true">
                    @foreach (var letterGrade in Enum.GetValues<XXLetterGrade>())
                    {
                        <MudSelectItem T="XXLetterGrade?" Value="@letterGrade">@letterGrade.ToString()</MudSelectItem>
                    }
                </MudSelect>
            }
            else
            {
                <MudText>
                    @PhoenixLetter?.GetName()
                </MudText>
            }
        </MudItem>

        <MudItem xs="4">
            <MudCheckBox T="bool" Checked="@_isBroken" CheckedChanged="BrokenChanged" Label="Broken"></MudCheckBox>
        </MudItem>        
        @if (CurrentMix == MixEnum.Phoenix)
        {
            <MudItem xs="4">

                <MudSelect T="PhoenixPlate?" Label="Plate" Value="_selectedPlate" ValueChanged="PlateChanged" Clearable="true" Margin="@Margin.Dense">
                    @foreach (var plate in Enum.GetValues<PhoenixPlate>())
                    {
                        <MudSelectItem T="PhoenixPlate?" Value="@plate">@plate.GetName()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        }

        <MudItem xs="2">
            @if (_favoriteCharts.Contains(_selectedChart.Id))
            {

                <MudTooltip Text="Remove from Favorites">
                    <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="MudBlazor.Color.Secondary" OnClick="() => RemoveFromFavorites(_selectedChart.Id)"></MudIconButton>
                </MudTooltip>
            }
            else
            {

                <MudTooltip Text="Add to Favorites">
                    <MudIconButton Icon="@Icons.Material.Outlined.Favorite" OnClick="() => AddToFavorites(_selectedChart.Id)"></MudIconButton>
                </MudTooltip>
            }
        </MudItem>
        <MudItem xs="2">
            @if (_todoCharts.Contains(_selectedChart.Id))
            {

                <MudTooltip Text="Remove from To Do List">
                    <MudIconButton Icon="@Icons.Material.Filled.ListAlt" Color="MudBlazor.Color.Secondary" OnClick="() => RemoveFromToDo(_selectedChart.Id)"></MudIconButton>
                </MudTooltip>
            }
            else
            {

                <MudTooltip Text="Add to To Do List">
                    <MudIconButton Icon="@Icons.Material.Outlined.ListAlt" OnClick="() => AddToToDo(_selectedChart.Id)"></MudIconButton>
                </MudTooltip>
            }
        </MudItem>
        @if (_recordedOn != null)
        {
            <MudItem xs="12">
                <MudText>Recorded on @_recordedOn.Value.ToString("MMM dd, yyyy")</MudText>
            </MudItem>
        }
        @if (_selectedChart.Type != ChartType.CoOp && CurrentMix!=MixEnum.Phoenix)
        {
            <MudItem xs="8">
                <MudSelect Label="Your Difficulty Rating" T="int?" Value="_selectedAdjustment" ValueChanged="UpdateDifficultyRating">
                    @foreach (var rating in Enum.GetValues<DifficultyAdjustment>())
                    {
                        <MudSelectItem T="int?" Value="@rating.GetScale()">@rating.GetDescription()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="4">
                <MudTooltip Text="@CountString">
                    <MudText>Average Rating: @($"{@_currentRatedDifficulty:N2}")</MudText>
                </MudTooltip>
            </MudItem>
        }
    }
</MudGrid>
@code {
    private XXLetterGrade? _selectedLetterGrade { get; set; }
    private PhoenixLetterGrade? PhoenixLetter => _inputScore == null ? null : PhoenixScore.TryParse(_inputScore.Value, out var score) ? score.LetterGrade : null;
    private PhoenixPlate? _selectedPlate;
    private int? _selectedAdjustment;
    private int? _inputScore;
    private double? _currentRatedDifficulty;
    private bool _isBroken = true;
    private int _currentRatedCount = 0;
    private string CountString => $"{_currentRatedCount} votes";
    private Chart? _selectedChart;
    private ISet<Guid> _favoriteCharts;
    private ISet<Guid> _todoCharts;
    private DateTimeOffset? _recordedOn;

    [Parameter]
    [Required]
    public MixEnum CurrentMix { get; set; }
    [Parameter]
    public Guid ChartId { get; set; } = Guid.Empty;

    [Parameter]
    public bool ShowChartName { get; set; } = false;

    [Parameter]
    public Action<Chart, XXChartAttempt?> NewAttemptRecorded { get; set; } = (c, b) => { };
    
    private async Task BrokenChanged(bool newState)
    {
        _isBroken = newState;
        await SaveBest();
    }

    private async Task LetterGradeChanged(XXLetterGrade? letterGrade)
    {
        _selectedLetterGrade = letterGrade;
        if (letterGrade == null)
        {
            _isBroken = true;
        }
        await SaveBest();
    }

    private async Task PlateChanged(PhoenixPlate? newPlate)
    {
        _selectedPlate = newPlate;
        await SaveBest();
    }
    private async Task ScoreChanged(int? newScore)
    {
        _inputScore = newScore;
        await SaveBest();
    }
    private async Task SaveBest()
    {
        
        if (_selectedChart == null)
        {
            return;
        }
    
        try
        {
            if (CurrentMix == MixEnum.XX)
            {
                
                await Mediator.Send(new UpdateXXBestAttemptCommand(_selectedChart.Id,  _selectedLetterGrade, _isBroken,_inputScore));
        
                var chartName = $"{_selectedChart.Song.Name} {DifficultyLevel.ToShorthand(_selectedChart.Type,_selectedChart.Level)}";
            
                _recordedOn = DateTimeOffset.Now;
                if (_selectedLetterGrade != null)
                {
                    NewAttemptRecorded(_selectedChart, new XXChartAttempt(_selectedLetterGrade.Value, _isBroken, _inputScore, DateTimeOffset.Now));
                    Snackbar.Add( $"Recorded {(_isBroken ? "Broken":"")} {_selectedLetterGrade.Value} for {chartName}", Severity.Success);
                }
                else
                {
                    NewAttemptRecorded(_selectedChart, null);
                    Snackbar.Add($"Removed record for {chartName}", Severity.Success);
                }
            }
            else
            {
                
                var parsedScore = _inputScore == null ? null : PhoenixScore.TryParse(_inputScore.Value, out var score) ? (PhoenixScore?)score : null;


                await Mediator.Send(new UpdatePhoenixBestAttemptCommand(_selectedChart.Id, _isBroken, parsedScore, _selectedPlate));
                
                var chartName = $"{_selectedChart.Song.Name} {DifficultyLevel.ToShorthand(_selectedChart.Type,_selectedChart.Level)}";
                var grade = parsedScore?.LetterGrade.GetName()+" " ?? "";
                Snackbar.Add($"Recorded {(_isBroken ? "Broken" : "Passing")} {grade}for {chartName}", Severity.Success);
            }

        }
        catch (Exception e)
        {
            Snackbar.Add("There was an error while recording the score", Severity.Error);
        }
    }
    private async Task RemoveFromToDo(Guid chartId)
    {
        await Mediator.Send(new RemoveChartFromListCommand(ChartListType.ToDo, chartId));
        _todoCharts.Remove(chartId);

        Snackbar.Add("Chart removed from To Do list", Severity.Success);
    }
    private async Task AddToToDo(Guid chartId)
    {
        await Mediator.Send(new SaveChartToListCommand(ChartListType.ToDo, chartId));
        if (!_todoCharts.Contains(chartId))
        {
            _todoCharts.Add(chartId);
        }
        Snackbar.Add("Chart added to To Do list", Severity.Success);
    }
    private async Task RemoveFromFavorites(Guid chartId)
    {
        await Mediator.Send(new RemoveChartFromListCommand(ChartListType.Favorite, chartId));
        _favoriteCharts.Remove(chartId);
        Snackbar.Add("Chart removed from Favorites", Severity.Success);
    }
    private async Task AddToFavorites(Guid chartId)
    {
        await Mediator.Send(new SaveChartToListCommand(ChartListType.Favorite, chartId));
        if (!_favoriteCharts.Contains(chartId))
        {
            _favoriteCharts.Add(chartId);
        }
        Snackbar.Add("Chart added to Favorites", Severity.Success);
    }
    protected override async Task OnInitializedAsync()
    {
        var favorites = (await Mediator.Send(new GetSavedChartsQuery())).ToArray();
        _favoriteCharts = favorites.Where(f => f.ListType == ChartListType.Favorite).Select(f => f.ChartId).Distinct().ToHashSet();
        _todoCharts = favorites.Where(f => f.ListType == ChartListType.ToDo).Select(f => f.ChartId).Distinct().ToHashSet();

    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadChart(ChartId);

    }
    private async Task LoadChart(Guid chartId)
    {
        if (CurrentMix == MixEnum.Phoenix)
        {
            
            var bestRecord = await Mediator.Send(new GetPhoenixRecordQuery(chartId));
            _selectedChart = (await Mediator.Send(new GetChartsQuery(CurrentMix, ChartIds: new[] { chartId }))).First();
            if (bestRecord== null)
            {
                _selectedLetterGrade = null;
                _isBroken = true;
                _inputScore = null;
                _recordedOn = null;
                _selectedPlate = null;
            }
            else
            {
                _isBroken = bestRecord.IsBroken;
                _inputScore = bestRecord.Score;
                _recordedOn = bestRecord.RecordedDate;
                _selectedPlate = bestRecord.Plate;
            }
        }
        else
        {
            var bestRecord = await Mediator.Send(new GetXXBestChartAttemptQuery(chartId));
            _selectedChart = (await Mediator.Send(new GetChartsQuery(CurrentMix, ChartIds: new[] { chartId }))).First();
            if (bestRecord.BestAttempt == null)
            {
                _selectedLetterGrade = null;
                _isBroken = true;
                _inputScore = null;
                _recordedOn = null;
            }
            else
            {
                _selectedLetterGrade = bestRecord.BestAttempt.LetterGrade;
                _isBroken = bestRecord.BestAttempt.IsBroken;
                _inputScore = bestRecord.BestAttempt.Score;
                _recordedOn = bestRecord.BestAttempt.RecordedOn;
            }
        }
        var rating = await Mediator.Send(new GetChartRatingQuery(chartId));
        if (rating == null)
        {
            _selectedAdjustment = null;
            _currentRatedCount = 0;
            _currentRatedDifficulty = _selectedChart.Level + .5;
        }
        else
        {
            _selectedAdjustment = rating.MyRating?.GetScale();
            _currentRatedCount = rating.RatingCount;
            _currentRatedDifficulty = rating.Difficulty;
        }
        StateHasChanged();
    }
    private async Task UpdateDifficultyRating(int? newValue)
    {
        if (newValue == null || _selectedChart == null)
        {
            return;
        }
        _selectedAdjustment = newValue;
        await Mediator.Send(new RateChartDifficultyCommand(_selectedChart.Id, DifficultyAdjustmentHelpers.From(newValue.Value)));

        var newRating = await Mediator.Send(new GetChartRatingQuery(_selectedChart.Id));
        _currentRatedCount = newRating.RatingCount;
        _currentRatedDifficulty = newRating.Difficulty;
        Snackbar.Add("Suggested Difficulty Rating Submitted", Severity.Success);
    }
}
