@namespace ScoreTracker.Web.Components
@using ScoreTracker.Domain.Models
@using ScoreTracker.Domain.SecondaryPorts
@using MediatR
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Web.Enums
@inject ICurrentUserAccessor CurrentUser;
@inject IMediator Mediator;
@if (Charts.Any())
{

    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h4">
                @Name
                @if (!string.IsNullOrWhiteSpace(Disclaimer))
                {
                    <MudTooltip Text="@Disclaimer">
                        <MudIcon Color="Color.Info" Size="Size.Small" Icon="@Icons.Material.Outlined.QuestionMark"></MudIcon>
                    </MudTooltip>
                }
                @if (Type!=TierListType.MyScores && Charts.All(c => Passes.Contains(c.Id)))
                {
                        <MudIcon Color="Color.Success" Icon="@Icons.Material.Filled.Check"></MudIcon>
            
                }

            </MudText>
        </MudItem>
        @foreach (var chart in Charts)
        {
            <MudItem xs="6" sm="3" md="2">

                <MudCard Class="@CardClass(chart.Id)" Style="@CardStyle(chart.Id)">
                    <MudCardMedia Height="100" Image="@chart.Song.ImagePath.ToString()" />
                    @if (Type == TierListType.MyScores)
                    {
                        <MudCardContent>
                            @if (Scores.TryGetValue(chart.Id, out var score) && score.Score != null)
                            {
                                <MudText>@score.Score (@score.Score.Value.LetterGrade.GetName(), @(score.Plate?.GetShorthand() ?? "??"))</MudText>
                            }
                        </MudCardContent>
                    }
                    @if (Type != TierListType.MyScores)
                    {
                        
                        <MudCardActions>

                            @if (Videos.ContainsKey(chart.Id))
                            {
                                <MudIconButton Icon="@Icons.Custom.Brands.YouTube" OnClick="@(() => ShowVideo(Videos[chart.Id],chart))"></MudIconButton>
                             
                            }
                            else
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.Search" Href="@ChartSearch(chart)" Target="_blank"></MudIconButton>
                           
                            }
                            <MudSpacer></MudSpacer>
                            @if (CurrentUser.IsLoggedIn)
                            {
                                <MudIconButton Icon="@Icons.Material.Outlined.ListAlt" OnClick="()=>ToggleToDo(chart.Id)" Color="ToDos.Contains(chart.Id)?Color.Primary:Color.Default"></MudIconButton>
                                <MudSpacer></MudSpacer>
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(() => OnEdit(chart.Id))"></MudIconButton>
                            
                            }
                    
                        </MudCardActions>
                    }
                    
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}
@code {
    private string CardClass(Guid chartId) => 
        Passes.Contains(chartId) || !CurrentUser.IsLoggedIn ? "border-solid border-2" : "border-dashed border-2";
    private string CardStyle(Guid chartId) => Type == TierListType.MyScores ? $@"border-color:{PlateColor(chartId)}":
        Passes.Contains(chartId) ? $@"border-color:{Colors.Green.Darken1}" :
    ToDos.Contains(chartId) ? $@"border-color:{Colors.Green.Darken1}" :
    $@"border-color:{OutlineColor}";

    private string PlateColor(Guid chartId) => Scores.TryGetValue(chartId, out var record) ?
        record.Plate switch{
            PhoenixPlate.RoughGame => Colors.DeepOrange.Darken3,
            PhoenixPlate.FairGame => Colors.DeepOrange.Darken3,
            PhoenixPlate.TalentedGame => Colors.Grey.Lighten1,
            PhoenixPlate.MarvelousGame => Colors.Grey.Lighten1,
            PhoenixPlate.ExtremeGame => Colors.Amber.Lighten1,
            PhoenixPlate.SuperbGame => Colors.Amber.Lighten1,
            PhoenixPlate.UltimateGame => Colors.LightBlue.Lighten1,
            PhoenixPlate.PerfectGame => Colors.LightBlue.Lighten1,
            _=>Colors.Grey.Darken1
            } :
        Colors.Purple.Darken1;
    [Parameter]
    public string Name { get; set; } = string.Empty;
    [Parameter]
    public string OutlineColor { get; set; } = string.Empty;
    [Parameter]
    public IDictionary<Guid, RecordedPhoenixScore> Scores { get; set; } = new Dictionary<Guid, RecordedPhoenixScore>();
    [Parameter]
    public TierListType Type { get; set; } = TierListType.Difficulty;

    [Parameter]
    public string Disclaimer { get; set; } = string.Empty;
    [Parameter]
    public IEnumerable<Chart> Charts { get; set; } = Array.Empty<Chart>();

    [Parameter]
    public IDictionary<Guid, int> PlayerRatings { get; set; } = new Dictionary<Guid, int>();

    [Parameter]
    public ISet<Guid> Passes { get; set; } = new HashSet<Guid>();
    [Parameter]
    public IDictionary<Guid, string> Videos { get; set; } = new Dictionary<Guid, string>();

    [Parameter]
    public Action<string, Chart> ShowVideo { get; set; } = (s,c) => { };

    [Parameter]
    public Action<Guid> OnEdit { get; set; } = g => { };

    [Parameter]
    public ISet<Guid> ToDos { get; set; } = new HashSet<Guid>();
    [Parameter]
    public Func<Guid, Task> ToggleToDo { get; set; } = g => Task.CompletedTask;

    [Parameter]
    public Func<Guid, int, Task> ToggleRating { get; set; } = (c,r) => Task.CompletedTask;

    private bool _isSaving = false;
    private async Task UpdateRating(Guid chartId, int rating)
    {
        if (_isSaving)
        {
            return;
        }
        _isSaving = true;
        await ToggleRating(chartId, rating);
        _isSaving = false;
    }
    private string ChartSearch(Chart chart)
    {
        var searchString = "Pump It Up " + chart.Song.Name + " " + chart.DifficultyString;
        return $"https://www.youtube.com/results?search_query={searchString.Replace("%", "Percent ").Replace(" ", "+")}";
    }
}
