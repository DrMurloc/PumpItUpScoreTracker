@namespace ScoreTracker.Web.Components
@using MediatR
@using MudBlazor.Extensions
@using ScoreTracker.Application.Commands
@using ScoreTracker.Application.Events
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.Models
@using ScoreTracker.Domain.SecondaryPorts
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Domain.Views
@using ScoreTracker.Web.Shared
@if (_match != null)
{
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h4">@_match.MatchName (@_match.State)</MudText>
        </MudItem>

        @switch (_match.State)
        {
            case MatchState.NotStarted:
                @for (var i = 0; i < _match.Players.Length; i++)
                {
                    var player = _match.Players[i];
                    var playerIndex = i;
                    if (MyRole!=null)
                    {
                        @if (HasScores)
                        {
                            <MudItem xs="12">
                                <MudText Color="Color.Warning">Changing players will erase ALL scores/points for this match</MudText>
                            </MudItem>
                        }
                        <MudItem xs="12">
                            
                            <MudAutocomplete T="string"
                                             Value="@player"
                                             ResetValueOnEmptyText="true"
                                             Disabled="_isSaving"
                                             CoerceText="true"
                                             Label=@($"Player {playerIndex+1}")
                                             SearchFunc="@((s,c)=>Task.FromResult(Seeding.Keys.Where(k=>k.Contains(s,StringComparison.OrdinalIgnoreCase)).OrderBy(k=>k.Equals(s,StringComparison.OrdinalIgnoreCase)?0:1).AsEnumerable()))"
                                             ValueChanged="v => UpdatePlayer(playerIndex, v)">

                            </MudAutocomplete>
                        </MudItem>
                        
                    }
                    else
                    {
                        <MudItem xs="12">
                            
                            <MudText>@player</MudText>
                        </MudItem>
                    }
                }
                @if (MyRole != null)
                {
                    <MudItem xs="12">
                        <MudButton Disabled="!ReadyToDraw || _isSaving" Color="Color.Primary" OnClick="DrawCharts">Draw Charts</MudButton>
                        </MudItem>
                }
                break;
            case MatchState.CardDraw:
                <MudItem xs="12">Drew using: @_match.RandomSettings</MudItem>
                @foreach (var chartId in _match.ActiveCharts.OrderBy(c=>!_match.VetoedCharts.Contains(c)))
                {
                    var chart = _charts[chartId];

                    <MudItem xs="6" sm="4" md="3" lg="2" xl="1">
                        <MudCard Class="chart-card" Style="@CardStyle(chart.Id)">
                            <MudCardHeader Style=@($"background-image:url(\"{chart.Song.ImagePath}\");")>

                                <DifficultyBubble Chart="chart"></DifficultyBubble>
                            </MudCardHeader>
                            <MudCardActions>
                                
                                <MudSpacer></MudSpacer>

                                @if (!_match.ProtectedCharts.Contains(chart.Id) && !_match.VetoedCharts.Contains(chart.Id))
                                {
                                    @if (!FinishedVetoes())
                                    {
                                        @if (_match.Players.Length == 2)
                                        {
                                            <MudTooltip Text="Protect">
                                                <MudIconButton Disabled="_isSaving" Icon="@Icons.Material.Filled.Shield" OnClick="() => ProtectChart(chartId)" Color="Color.Success"></MudIconButton>
                                            </MudTooltip>
                                        }
                                        <MudTooltip Text="Veto">
                                            <MudIconButton Disabled="_isSaving" Icon="@Icons.Material.Filled.Delete" OnClick="() => VetoChart(chartId)" Color="Color.Error"></MudIconButton>
                                        </MudTooltip>
                                    }
                                }
                                @if (_match.ProtectedCharts.Contains(chart.Id))
                                {
                                    <MudTooltip Text="Cancel">
                                        <MudIconButton Disabled="_isSaving" Icon="@Icons.Material.Filled.Cancel" OnClick="()=>CancelProtect(chartId)" Color="Color.Warning"></MudIconButton>
                                    </MudTooltip>
                                }
                                @if (_match.VetoedCharts.Contains(chart.Id))
                                {
                                    <MudTooltip Text="Cancel">
                                        <MudIconButton Disabled="_isSaving" Icon="@Icons.Material.Filled.Cancel" OnClick="()=>CancelVeto(chartId)" Color="Color.Warning"></MudIconButton>
                                    </MudTooltip>
                                }
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }

                @foreach (var instruction in Order())
                {
                    <MudItem xs="12">
                        <MudText>@instruction</MudText>
                    </MudItem>
                }
                <MudItem xs="12">
                    @if (_match.ActiveCharts.Any(c => _match.VetoedCharts.Contains(c)))
                    {

                        <MudButton OnClick="ClearVetoes" Disabled="_isSaving" Variant="Variant.Filled" Color="Color.Primary">Clear Vetoes</MudButton>
                    }
                    else
                    {
                        <MudButton OnClick="FinishCardDraw" Disabled="!FinishedVetoes() || _isSaving" Variant="Variant.Filled" Color="Color.Primary">Complete Card Draw</MudButton>
                    }
                </MudItem>
                break;
            case MatchState.Ready:
                @foreach (var player in _match.Players)
                {
                    var player1 = player;
                    <MudItem xs="12">
                        <MudText>@player1</MudText>
                    </MudItem>
                }
                @foreach (var chartId in _match.ActiveCharts)
                {
                    var chart = _charts[chartId];
                    <MudItem xs="6" sm="4" md="3" lg="2" xl="1">
                        <MudCard Class="chart-card" Style="@CardStyle(chart.Id)">
                            <MudCardHeader Style=@($"background-image:url(\"{chart.Song.ImagePath}\");")>
                                
                                <DifficultyBubble Chart="chart"></DifficultyBubble>
                            </MudCardHeader>
                        </MudCard>
                    </MudItem>
                }
                <MudItem xs="12">
                    <MudText>Vetoed: @(string.Join(", ",_match.VetoedCharts.Select(chartId=>_charts[chartId].Song.Name+" "+_charts[chartId].DifficultyString)))</MudText>
                </MudItem>

                @if (MyRole != null)
                {
                    <MudButton Variant="Variant.Filled" Disabled="_isSaving" Color="Color.Primary" OnClick="StartMatch">Start Match</MudButton>
                }
                break;
            case MatchState.InProgress:
                <MudItem xs="12">
                    <MudTable T="Name" Items="_match.Players">
                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            @foreach (var chartId in _match.ActiveCharts)
                            {
                                var id = chartId;
                                <MudTh>@_charts[id].Song.Name @_charts[id].DifficultyString</MudTh>
                            }
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>
                                @context
                            </MudTd>

                            @for(var i=0;i<_match.ActiveCharts.Length;i++)
                            {
                                var chartPlace = i;
                                <MudTh>
                                    <MudNumericField Disabled="_isSaving" T="int" Min="(int)PhoenixScore.Min" Max="(int)PhoenixScore.Max" Value="(int)_match.Scores[context][chartPlace]" ValueChanged="v=>SetScore(context,chartPlace,v)" HideSpinButtons="true"></MudNumericField>
                                </MudTh>
                            }
                        </RowTemplate>
                    </MudTable>
                </MudItem>
                <MudItem xs="12">
                    <MudButton Disabled="!IsFinished(_match) || _isSaving" Variant="Variant.Filled" OnClick="CalculateScores">Calculate Points</MudButton>
                </MudItem>
                break;
                case MatchState.Finalizing:

                    <MudItem xs="12">
                        <MudTable T="Name" Items="_match.FinalPlaces">
                        <HeaderContent>
                            @if (MyRole != null)
                            {
                                <MudTh>Move Up</MudTh>
                                <MudTh>Move Down</MudTh>
                            }
                                <MudTh>Name</MudTh>
                                @foreach (var chartId in _match.ActiveCharts)
                                {
                                    var id = chartId;
                                    <MudTh>@_charts[id].Song.Name @_charts[id].DifficultyString</MudTh>
                                }
                                <MudTh>Total</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                            @if (MyRole != null)
                                {
                                    <MudTd>
                                        @if (_match.FinalPlaces.Select((n, i) => (n, i)).Where(kv => kv.n == context).Select(kv => kv.i).Single() != 0)
                                        {
                                            
                                            <MudIconButton Icon="@Icons.Material.Filled.MoveUp" OnClick="() => MovePlayerUp(context)"></MudIconButton>
                                        }
                                    </MudTd>
                                    <MudTd>

                                        @if (_match.FinalPlaces.Select((n, i) => (n, i)).Where(kv => kv.n == context).Select(kv => kv.i).Single() != _match.FinalPlaces.Length - 1)
                                        {
                                            
                                            <MudIconButton Icon="@Icons.Material.Filled.MoveDown" OnClick="()=>MovePlayerDown(context)"></MudIconButton>
                                        }
                                    </MudTd>
                                }
                                <MudTd>
                                    @context
                                </MudTd>

                                @for(var i=0;i<_match.ActiveCharts.Length;i++)
                                {
                                    var chartPlace = i;
                                    <MudTd>@_match.Scores[context][chartPlace] (@_match.Points[context][chartPlace])</MudTd>
                                }
                                <MudTd>
                                    @_match.Points[context].Sum()
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudItem>
                    <MudItem xs="12">
                        <MudButton Disabled="!IsFinished(_match) || _isSaving" Variant="Variant.Filled" OnClick="FinishMatch">Finish Match</MudButton>
                    </MudItem>
                    break;
            case MatchState.Completed:
                <MudItem xs="12">
                    
                    <MudTable T="Name" Items="_match.FinalPlaces">
                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            @foreach (var chartId in _match.ActiveCharts)
                            {
                                var id = chartId;
                                <MudTh>@_charts[id].Song.Name @_charts[id].DifficultyString</MudTh>
                            }
                            <MudTh>Total</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>
                                @context
                            </MudTd>

                            @for(var i=0;i<_match.ActiveCharts.Length;i++)
                            {
                                var chartPlace = i;
                                <MudTh>@_match.Scores[context][chartPlace] (@_match.Points[context][chartPlace])</MudTh>
                            }
                            <MudTh>
                                @_match.Points[context].Sum()
                            </MudTh>
                        </RowTemplate>
                    </MudTable>
                </MudItem>
                <MudItem xs="12">
                    <MudText>Vetoed: @(string.Join(", ", _match.VetoedCharts.Select(chartId => _charts[chartId].Song.Name + " " + _charts[chartId].DifficultyString)))</MudText>
                    </MudItem>
                break;
        }
    </MudGrid>
}


@inject IMediator Mediator;
@inject ICurrentUserAccessor CurrentUser;


@code {

    private bool _isSaving = false;
    private User? _currentUser;
    
    private bool IsFinished(MatchView match)
    {
        if (match.Players.Length == 2)
        {
            return (from player in match.Players
                let otherPlayer = match.Players.Single(p => p != player)
                where match.Scores[player]
                    .Select((s, i) => (s,i))
                    .Count(k => k.s > match.Scores[otherPlayer][k.i]) > match.ChartCount / 2 select player)
                .Any();
        }
        return match.Scores.SelectMany(s => s.Value).All(v => v != 0);
    }
    private bool FinishedVetoes()
    {
        if (_match == null)
        {
            return true;
        }
        return _match.ActiveCharts.Count(id => !_match.VetoedCharts.Contains(id))<=_match.ChartCount;
    }
    [Parameter]
    public TournamentRole? MyRole { get; set; }
    [Parameter]
    public Name? MatchName { get; set; }
    [Parameter]
    public Guid? TournamentId { get; set; }

    private string CardStyle(Guid chartId) => _match?.ProtectedCharts.Contains(chartId)??false ? $@"border-color:{Colors.Green.Darken1}" :
        _match?.VetoedCharts.Contains(chartId) ?? false ? $@"border-color:{Colors.Red.Darken1}" : "";

    private IEnumerable<string> Order()
    {
        if (_match == null)
        {
            yield break;
        }
        if (_match.Players.Length > 2)
        {
            var orderedPlayers = _match.Players.OrderBy(p => Seeding[p]).ToArray();
            var currentPlayer = orderedPlayers[^(_match.VetoedCharts.Length % orderedPlayers.Length+1)];
            if (!FinishedVetoes())
            {
                yield return $"{currentPlayer} to Veto";
            }
            yield return $"Seed Priority: {string.Join(" -> ", orderedPlayers)}";
            yield return $"Veto Order and Cab + Pad Side pick priority follow Seed Priority";
            yield return $"Everyone gets one Arcade Singles warmup chart for their first set";
        }
        else
        {
            var highestSeed = _match.Players.MinBy(p => Seeding[p]);
            var lowestSeed = _match.Players.MaxBy(p => Seeding[p]);
            yield return $"{highestSeed} picks: Pad Side, Veto/Protect order, Doubles order (if applicable)";
            yield return $"{lowestSeed} picks from remaining two options";
            yield return $"{highestSeed} gets last remaining option, if applicable.";
            yield return "Standard Match: Protect -> Protect -> Veto -> Veto -> Veto -> Veto";
            yield return "Pros Semi/Losers/Grand Finals: Protect x2 -> Veto x4 -> Protect x2 -> Veto x4";
            yield return $"Everyone gets one Arcade Singles warmup chart for their first set";

        }

    }

    private async Task CancelVeto(Guid chartId)
    {
        if (_match == null || TournamentId==null)
        {
            return;
        }
        _isSaving = true;
        await Mediator.Send(new UpdateMatchCommand(TournamentId.Value,_match with {VetoedCharts = _match.VetoedCharts.Where(id=>id!=chartId).ToArray()}));
        _isSaving = false;
    }
    private async Task CancelProtect(Guid chartId)
    {
        if (_match == null || TournamentId == null)
        {
            return;
        }
        _isSaving = true;
        await Mediator.Send(new UpdateMatchCommand(TournamentId.Value,_match with { ProtectedCharts = _match.ProtectedCharts.Where(id=>id!=chartId).ToArray() }));
        _isSaving = false;
    }
    private bool HasScores => _match?.Scores.SelectMany(s => s.Value).Any(s => s > 0) ?? false;
    private async Task SetScore(Name player, int chartIndex, int newScore)
    {
        if (_match == null || TournamentId == null)
        {
            return;
        }
        _isSaving = true;
        var newScores = _match.Scores.ToDictionary(kv => kv.Key, kv => kv.Value.ToArray());
        newScores[player][chartIndex] = newScore;
        await Mediator.Send(new UpdateMatchCommand(TournamentId.Value,_match with { Scores = newScores}));
        _isSaving = false;
    }
    private async Task ProtectChart(Guid chartId)
    {
        if (_match == null || TournamentId == null)
        {
            return;
        }
        _isSaving = true;
        await Mediator.Send(new UpdateMatchCommand(TournamentId.Value,_match with { ProtectedCharts = _match.ProtectedCharts.Append(chartId).ToArray()}));

        _isSaving = false; 
    }

    private async Task VetoChart(Guid chartId)
    {

        if (_match == null || TournamentId == null)
        {
            return;
        }
        _isSaving = true;
        await Mediator.Send(new UpdateMatchCommand(TournamentId.Value,_match with { VetoedCharts = _match.VetoedCharts.Append(chartId).ToArray() }));

        _isSaving = false;
    }

    private async Task MovePlayerDown(Name playerName)
    {
        if (_match == null || TournamentId == null)
        {
            return;
        }
        var index = _match.FinalPlaces.Select((n, i) => (n,i)).Where(kv => kv.n == playerName).Select(kv=>kv.i).Single();
        var newOrder = _match.FinalPlaces.ToArray();
        newOrder[index] = _match.FinalPlaces[index +1];
        newOrder[index +1] = playerName;
        _isSaving = true;
        await Mediator.Send(new UpdateMatchCommand(TournamentId.Value,_match with { FinalPlaces = newOrder }));
        _isSaving = false;

    }
    private async Task MovePlayerUp(Name playerName)
    {
        if (_match == null || TournamentId == null)
        {
            return;
        }
        var index = _match.FinalPlaces.Select((n, i) => (n, i)).Where(kv => kv.n == playerName).Select(kv=>kv.i).Single();

        var newOrder = _match.FinalPlaces.ToArray();
        newOrder[index]= _match.FinalPlaces[index - 1];
        newOrder[index - 1] = playerName;
        _isSaving = true;
        await Mediator.Send(new UpdateMatchCommand(TournamentId.Value,_match with {FinalPlaces = newOrder}));
        _isSaving = false;

    }
    private async Task FinishMatch()
    {
        if (_match == null || TournamentId == null)
        {
            return;
        }
        _isSaving = true;
        await Mediator.Send(new FinalizeMatchCommand(TournamentId.Value, _match.MatchName));
        _isSaving = false;
    }
    private async Task CalculateScores()
    {
        if (_match == null || TournamentId == null)
        {
            return;
        }
        _isSaving = true;
        await Mediator.Send(new ResolveMatchCommand(TournamentId.Value,_match.MatchName));
        _isSaving = false;
    }
    private async Task ClearVetoes()
    {
        if (_match == null || TournamentId == null)
        {
            return;
        }
        _isSaving = true;
        await Mediator.Send(new UpdateMatchCommand(TournamentId.Value,_match with { ActiveCharts = _match.ActiveCharts.Where(id=>!_match.VetoedCharts.Contains(id)).ToArray() }));

        _isSaving = false;
    }

    private async Task FinishCardDraw()
    {
        if (_match == null || TournamentId == null)
        {
            return;
        }
        _isSaving = true;
        await Mediator.Send(new FinishCardDrawCommand(TournamentId.Value,_match.MatchName));
        _isSaving = false;
    }

    public IEnumerable<string> PlayerOrders = Array.Empty<string>();

    private async Task Rollback(MatchState newState)
    {
        
        if (_match == null || TournamentId == null)
        {
            return;
        }
        _isSaving = true;
        await Mediator.Send(new MatchUpdatedEvent(TournamentId.Value,_match with { State = newState }));
        _isSaving = false;
    }
    private async Task DrawCharts()
    {
        if (_match == null || TournamentId == null)
        {
            return;
        }
        _isSaving = true; 
        await Mediator.Send(new DrawChartsCommand(TournamentId.Value,_match.MatchName));
        _isSaving = false;
    }

    private IDictionary<string, int> Seeding = new Dictionary<string, int>();

    private MatchView? _match;
    private bool ReadyToDraw => _match?.Players.All(p => Seeding.ContainsKey(p)) ?? false;
    private async Task UpdatePlayer(int index, string playerName)
    {
        if (_match == null || !Name.TryParse(playerName, out var name) || TournamentId == null)
        {
            return;
        }

        _isSaving = true;
        var newArray = _match.Players.ToArray();
        newArray[index] = name;

        await Mediator.Send(new UpdateMatchCommand(TournamentId.Value,_match with { Players = newArray,
            FinalPlaces = newArray,
                Scores = newArray.ToDictionary(n => n.ToString(), n => _match.ActiveCharts.Select(c => PhoenixScore.From(0)).ToArray()),
                Points = newArray.ToDictionary(n => n.ToString(), n => _match.ActiveCharts.Select(c => 0).ToArray()),
            }));

        _isSaving = false;
    }

    private async Task StartMatch()
    {
        if (_match == null || TournamentId == null)
        {
            return;
        }

        _isSaving = true;
        await Mediator.Send(new UpdateMatchCommand(TournamentId.Value,_match with { State = MatchState.InProgress }));
        _isSaving = false;
    }
    private IDictionary<Guid, Chart> _charts = new Dictionary<Guid, Chart>();

    private void MatchUpdated(MatchUpdatedEvent e)
    {
        if (e.NewState.MatchName == MatchName)
        {
            _match = e.NewState;
        }
        InvokeAsync(StateHasChanged);
    }

    private async Task LoadMatch(Name matchName)
    {
        if (_match?.MatchName == matchName || TournamentId == null)
            return;

        _match = await Mediator.Send(new GetMatchQuery(TournamentId.Value,matchName));
    }
    protected override async Task OnInitializedAsync()
    {
        _charts = (await Mediator.Send(new GetChartsQuery(MixEnum.Phoenix))).ToDictionary(c => c.Id);
        MainLayout.MatchUpdated += (o,e)=> MatchUpdated(e);
        if (MatchName != null || TournamentId == null)
        {
            await LoadMatch(MatchName.Value);
        }
        Seeding = (await Mediator.Send(new GetMatchPlayersQuery(TournamentId.Value))).ToDictionary(p => p.Name.ToString(), p => p.Seed, StringComparer.OrdinalIgnoreCase);

        _currentUser = CurrentUser.IsLoggedIn ? CurrentUser.User : null;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (MatchName == null)
        {
            _match = null;
        }
        else
        {
            await LoadMatch(MatchName.Value);
        }

    }

}
