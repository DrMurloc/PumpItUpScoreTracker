@namespace ScoreTracker.Web.Components
@using ScoreTracker.Domain.Models
@using ScoreTracker.Domain.SecondaryPorts
@using MediatR
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Web.Enums
@using ChartType = ScoreTracker.Domain.Enums.ChartType
@inject ICurrentUserAccessor CurrentUser;
@inject IMediator Mediator;
<MudExpansionPanels>

    <MudExpansionPanel Text="Singles Levels">
        <MudGrid>
            @foreach (var level in Settings.LevelWeights.Keys.OrderBy(k => k))
            {
                <MudItem xs="6" sm="4">
                    @if (_useWeights)
                    {
                        <MudNumericField T="int" Min="0" Max="99" Label="@LevelString(level)" @bind-Value="Settings.LevelWeights[level]"></MudNumericField>
                    }
                    else
                    {
                        <MudSwitch T="bool" Label="@LevelString(level)" Color="Color.Primary" Value="Settings.LevelWeights[level] > 0" ValueChanged="@(v => Settings.LevelWeights[level] =v? 1 : 0)"></MudSwitch>
                    }
                </MudItem>
            }
        </MudGrid>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Doubles Levels">
        <MudGrid>
            @foreach (var level in Settings.DoubleLevelWeights.Keys.OrderBy(k => k))
            {
                <MudItem xs="6" sm="4">
                    @if (_useWeights)
                    {
                        <MudNumericField T="int" Min="0" Max="99" Label="@LevelString(level)" @bind-Value="Settings.DoubleLevelWeights[level]"></MudNumericField>
                    }
                    else
                    {
                        <MudSwitch T="bool" Label="@LevelString(level)" Color="Color.Primary" Value="Settings.DoubleLevelWeights[level] > 0" ValueChanged="@(v => Settings.DoubleLevelWeights[level]= v ? 1 : 0)"></MudSwitch>
                    }
                </MudItem>
            }
        </MudGrid>
    </MudExpansionPanel>

    <MudExpansionPanel Text="CoOp Player Count">
        <MudGrid>
            @foreach (var level in Settings.PlayerCountWeights.Keys.OrderBy(k => k))
            {
                <MudItem xs="6" sm="4">
                    @if (_useWeights)
                    {
                        <MudNumericField T="int" Min="0" Max="99" Label="@PlayerString(level)" @bind-Value="Settings.PlayerCountWeights[level]"></MudNumericField>
                    }
                    else
                    {
                        <MudSwitch T="bool" Label="@PlayerString(level)" Color="Color.Primary" Value="Settings.PlayerCountWeights[level] > 0" ValueChanged="@(v => Settings.PlayerCountWeights[level]= v? 1 : 0)"></MudSwitch>
                    }
                </MudItem>
            }
        </MudGrid>
    </MudExpansionPanel>


    <MudExpansionPanel Text="Song Types">
        <MudGrid>
            @foreach (var songType in Settings.SongTypeWeights.Keys)
            {
                <MudItem xs="6">
                    @if (_useWeights)
                    {
                        <MudNumericField T="int" Min="0" Max="99" Label="@songType.ToString()" @bind-Value="Settings.SongTypeWeights[songType]"></MudNumericField>
                    }
                    else
                    {
                        <MudSwitch T="bool" Label="@songType.ToString()" Color="Color.Primary" Value="Settings.SongTypeWeights[songType] > 0" ValueChanged="@(v => Settings.SongTypeWeights[songType]=v? 1 : 0)"></MudSwitch>
                    }
                </MudItem>
            }
        </MudGrid>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Minimum Count">
        <MudGrid>
            <MudItem xs="12">
                <MudRadioGroup @bind-Value="@_minimumType">
                    <MudRadio Value="@("Chart Type")" Color="Color.Primary">@L["Chart Type"]</MudRadio>
                    <MudRadio Value="@("Difficulty")" Color="Color.Primary">@L["Difficulty Level"]</MudRadio>
                    <MudRadio Value="@("Chart Type Difficulty")" Color="Color.Primary">@L["Chart Type"] + @L["Difficulty Level"]</MudRadio>
                    <MudRadio Value="@("Buckets")" Color="Color.Primary">@L["Buckets"]</MudRadio>
                </MudRadioGroup>
            </MudItem>
            @if (_minimumType == "Chart Type")
            {
                @foreach (var kv in Settings.ChartTypeMinimums.Where(kv=>(kv.Key==ChartType.Single?Settings.LevelWeights:
                    kv.Key==ChartType.Double?Settings.DoubleLevelWeights:Settings.PlayerCountWeights).Any(g=>g.Value>0)))
                {
                    <MudItem xs="4">
                        <MudNumericField T="int?" Min="0" Value="Settings.ChartTypeMinimums[kv.Key]" ValueChanged="s=>SetChartTypeMinimum(kv.Key,s)" Label="@kv.Key.ToString()" Clearable="true" HideSpinButtons="true"></MudNumericField>

                    </MudItem>
                }
            } else if (_minimumType == "Difficulty")
            {
                @foreach (var kv in Settings.LevelMinimums.Where(k=>Settings.LevelWeights[k.Key]>0 || Settings.DoubleLevelWeights[k.Key]>0))
                {

                    <MudItem xs="4">
                        <MudNumericField T="int?" Min="0" Value="Settings.LevelMinimums[kv.Key]" ValueChanged="s=>SetLevelMinimum(kv.Key,s)" Label="@kv.Key.ToString()" Clearable="true" HideSpinButtons="true"></MudNumericField>
                    </MudItem>
                }
            } else if (_minimumType == "Chart Type Difficulty")
            {
                @foreach (var kv in Settings.LevelWeights.Where(kv=>kv.Value>0).Select(kv=>$"S{kv.Key}")
                    .Concat(Settings.DoubleLevelWeights.Where(kv=>kv.Value>0).Select(kv=>$"D{kv.Key}"))
                    .Concat(Settings.PlayerCountWeights.Where(kv=>kv.Value>0).Select(kv=>$"CoOp{kv.Key}")))
                {
                    <MudItem xs="4" sm="3">
                        <MudNumericField T="int?" Min="0" Value="Settings.ChartTypeLevelMinimums[kv]" ValueChanged="s=>SetChartTypeLevelMinimum(kv,s)" Label="@kv" Clearable="true" HideSpinButtons="true"></MudNumericField>

                    </MudItem>
                }
            } else if (_minimumType == "Buckets")
            {
                @foreach (var kv in Settings.CustomMinimums)
                {
                    <MudItem xs="8">
                        @foreach (var level in LevelBucket.From(kv.Key).GetDifficulties())
                        {
                            <MudChip Color=@(level.Item1 == ChartType.Single ? Color.Error : level.Item1 == ChartType.Double ? Color.Success : Color.Warning)
                                     Value=@($"{level.Item1.ToString()[0]}{level.Item2}")>
                            </MudChip>
                        }
                         </MudItem>
                    <MudItem xs="2">
                        @($"x{kv.Value}")
                    </MudItem>
                    <MudItem xs="2">
                        <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="() => Settings.CustomMinimums.Remove(kv.Key)"></MudIconButton>

                    </MudItem>
                }
                <MudItem xs="12" sm="8">
                    <MudChipSet @bind-SelectedValues="_newCustomBuckets" CheckMark="true" SelectedColor="Color.Info" SelectionMode="SelectionMode.MultiSelection">
                        @foreach (var single in Settings.LevelWeights.Where(w=>w.Value>0))
                        {
                            <MudChip Color="Color.Error" Value=@($"S{single.Key}")></MudChip>
                        }
                        @foreach (var d in Settings.DoubleLevelWeights.Where(w => w.Value > 0))
                        {
                            <MudChip Color="Color.Success" Value=@($"D{d.Key}")></MudChip>
                        }
                        @foreach (var d in Settings.PlayerCountWeights.Where(w => w.Value > 0))
                        {
                            <MudChip Color="Color.Warning" Value=@($"C{d.Key}")></MudChip>
                        }
                    </MudChipSet>
                </MudItem>
                <MudItem xs="4" sm="2">
                    <MudNumericField T="int" Min="1" @bind-Value="_bucketSize" Label=@L["Bucket Size"] Clearable="false" HideSpinButtons="true"></MudNumericField>

                </MudItem>

                <MudItem xs="12" sm="2">
                    <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="AddBucket">@L["Add"]</MudButton>
                </MudItem>
            }
        </MudGrid>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Additional Settings">
        <MudGrid>
            <MudItem xs="4">
                <MudNumericField T="int" Min="1" Max="30" Label="Chart Count" @bind-Value="Settings.Count"></MudNumericField>
                @if (Settings.CustomMinimums.Any(kv => kv.Value > 0) || Settings.ChartTypeLevelMinimums.Any(kv => kv.Value > 0) || Settings.LevelMinimums.Any(kv => kv.Value > 0) || Settings.ChartTypeMinimums.Any(kv => kv.Value > 0))
                {
                    <br/>                    
                    <MudText Color="Color.Warning">@(Settings.CustomMinimums.Sum(kv=>kv.Value)+Settings.ChartTypeLevelMinimums.Sum(kv=>kv.Value)+Settings.LevelMinimums.Sum(kv=>kv.Value)+Settings.ChartTypeMinimums.Sum(kv=>kv.Value)) Charts From Minimums</MudText>
                }
            </MudItem>
            
            <MudItem xs="4">
                <MudSwitch Color="Color.Primary" Label="Allow Repeat Charts" @bind-Value="Settings.AllowRepeats"></MudSwitch>
            </MudItem>
            <MudItem xs="4">
                <MudSwitch T="bool" Color="Color.Primary" Label="Use Weights" @bind-Value="_useWeights"></MudSwitch>
            </MudItem>
            
            <MudItem xs="4">
                <MudSwitch T="bool" Color="Color.Primary" Label="Use Scoring Level" @bind-Value="Settings.UseScoringLevels"></MudSwitch>
            </MudItem>
            <MudItem xs="4">
                <MudSelect T="RandomSettings.ResultsOrdering" @bind-Value="Settings.Ordering" Label="Results Order">
                    @foreach (var option in Enum.GetValues<RandomSettings.ResultsOrdering>())
                    {
                        <MudSelectItem T="RandomSettings.ResultsOrdering" Value="option">@option</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>
    </MudExpansionPanel>
    @if (_includedCharts.Any())
    {
        <MudExpansionPanel Text="Included Charts">
            <MudTable Items="_includedCharts">
                <RowTemplate>
                    <MudTd>
                        <MudTooltip Text="@context.Song.Name">
                            <MudImage Src="@context.Song.ImagePath.ToString()" Height="35" Alt="@context.Song.Name" Elevation="25" ObjectFit="ObjectFit.ScaleDown" />
                        </MudTooltip>
                    </MudTd>
                    <MudTd>
                        <MudText>@context.Song.Name</MudText>
                    </MudTd>
                    <MudTd>
                        <DifficultyBubble Chart="context"></DifficultyBubble>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager></MudTablePager>
                </PagerContent>
            </MudTable>
        </MudExpansionPanel>
    }
</MudExpansionPanels>
@code {

    [Parameter]
    public RandomSettings Settings { get; set; } = new RandomSettings();
    private bool _useWeights = false;

    private string _minimumType = "Chart Type";
    private int _bucketSize = 1;

    private void AddBucket()
    {
        Settings.ClearChartTypeMinimums();
        Settings.ClearLevelMinimums();
        Settings.ClearChartTypeLevelMinimums();
        Settings.CustomMinimums[string.Join(",", _newCustomBuckets)] = _bucketSize;
        _bucketSize = 1;
        _newCustomBuckets = new List<string>();
    }
    private void SetChartTypeMinimum(ChartType type, int? minimum)
    {
        Settings.ClearLevelMinimums();
        Settings.ClearChartTypeLevelMinimums();
        Settings.ClearCustomMinimums();
        Settings.ChartTypeMinimums[type] = minimum;
    }

    private void SetLevelMinimum(DifficultyLevel level, int? minimum)
    {
        Settings.ClearChartTypeMinimums();

        Settings.ClearChartTypeLevelMinimums();
        Settings.ClearCustomMinimums();
        Settings.LevelMinimums[level] = minimum;
    }

    private void SetChartTypeLevelMinimum(string shortHand, int? minimum)
    {
        Settings.ClearChartTypeMinimums();
        Settings.ClearLevelMinimums();
        Settings.ClearCustomMinimums();
        Settings.ChartTypeLevelMinimums[shortHand] = minimum;
    }
    private string LevelString(int level) => $"Level {level}";
    private string PlayerString(int players) => $"{players} Players";
    private IReadOnlyCollection<string> _newCustomBuckets = new List<string>();


    private IEnumerable<Chart> _includedCharts = Array.Empty<Chart>();

    private bool _showChartList = false;
    private async Task ShowIncludedCharts()
    {
        _includedCharts = await Mediator.Send(new GetIncludedRandomChartsQuery(Settings));
        _showChartList = true;
    }
    protected override async Task OnParametersSetAsync()
    {
        _useWeights = Settings.HasWeightedSetting;

    }
}
