@namespace ScoreTracker.Web.Components
@using ScoreTracker.Domain.Models
@using ScoreTracker.Domain.SecondaryPorts
@using MediatR
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Web.Enums
@using ChartType = ScoreTracker.Domain.Enums.ChartType
@inject ICurrentUserAccessor CurrentUser;
@inject IMediator Mediator;
<MudExpansionPanels>

    <MudExpansionPanel Text="Singles Levels">
        <MudGrid>
            @foreach (var level in Settings.LevelWeights.Keys.OrderBy(k => k))
            {
                <MudItem xs="6" sm="4">
                    @if (_useWeights)
                    {
                        <MudNumericField T="int" Min="0" Max="99" Label="@LevelString(level)" @bind-Value="Settings.LevelWeights[level]"></MudNumericField>
                    }
                    else
                    {
                        <MudSwitch T="bool" Label="@LevelString(level)" Color="Color.Primary" Checked="Settings.LevelWeights[level] > 0" CheckedChanged="@(v => Settings.LevelWeights[level] =v? 1 : 0)"></MudSwitch>
                    }
                </MudItem>
            }
        </MudGrid>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Doubles Levels">
        <MudGrid>
            @foreach (var level in Settings.DoubleLevelWeights.Keys.OrderBy(k => k))
            {
                <MudItem xs="6" sm="4">
                    @if (_useWeights)
                    {
                        <MudNumericField T="int" Min="0" Max="99" Label="@LevelString(level)" @bind-Value="Settings.DoubleLevelWeights[level]"></MudNumericField>
                    }
                    else
                    {
                        <MudSwitch T="bool" Label="@LevelString(level)" Color="Color.Primary" Checked="Settings.DoubleLevelWeights[level] > 0" CheckedChanged="@(v => Settings.DoubleLevelWeights[level]= v ? 1 : 0)"></MudSwitch>
                    }
                </MudItem>
            }
        </MudGrid>
    </MudExpansionPanel>

    <MudExpansionPanel Text="CoOp Player Count">
        <MudGrid>
            @foreach (var level in Settings.PlayerCountWeights.Keys.OrderBy(k => k))
            {
                <MudItem xs="6" sm="4">
                    @if (_useWeights)
                    {
                        <MudNumericField T="int" Min="0" Max="99" Label="@PlayerString(level)" @bind-Value="Settings.PlayerCountWeights[level]"></MudNumericField>
                    }
                    else
                    {
                        <MudSwitch T="bool" Label="@PlayerString(level)" Color="Color.Primary" Checked="Settings.PlayerCountWeights[level] > 0" CheckedChanged="@(v => Settings.PlayerCountWeights[level]= v? 1 : 0)"></MudSwitch>
                    }
                </MudItem>
            }
        </MudGrid>
    </MudExpansionPanel>


    <MudExpansionPanel Text="Song Types">
        <MudGrid>
            @foreach (var songType in Settings.SongTypeWeights.Keys)
            {
                <MudItem xs="6">
                    @if (_useWeights)
                    {
                        <MudNumericField T="int" Min="0" Max="99" Label="@songType.ToString()" @bind-Value="Settings.SongTypeWeights[songType]"></MudNumericField>
                    }
                    else
                    {
                        <MudSwitch T="bool" Label="@songType.ToString()" Color="Color.Primary" Checked="Settings.SongTypeWeights[songType] > 0" CheckedChanged="@(v => Settings.SongTypeWeights[songType]=v? 1 : 0)"></MudSwitch>
                    }
                </MudItem>
            }
        </MudGrid>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Minimum Count">
        <MudGrid>
            <MudItem xs="12">
                <MudRadioGroup @bind-Value="@_minimumType">
                    <MudRadio Value="@("Chart Type")" Color="Color.Primary">@L["Chart Type"]</MudRadio>
                    <MudRadio Value="@("Difficulty")" Color="Color.Primary">@L["Difficulty Level"]</MudRadio>
                    <MudRadio Value="@("Chart Type Difficulty")" Color="Color.Primary">@L["Chart Type"] + @L["Difficulty Level"]</MudRadio>
                </MudRadioGroup>
            </MudItem>
            @if (_minimumType == "Chart Type")
            {
                @foreach (var kv in Settings.ChartTypeMinimums.Where(k=>Settings.ChartTypeWeights[k.Key]>0))
                {
                    <MudItem xs="4">
                        <MudNumericField T="int?" Min="0" Max="@Settings.Count" Value="Settings.ChartTypeMinimums[kv.Key]" ValueChanged="s=>SetChartTypeMinimum(kv.Key,s)" Label="@kv.Key.ToString()" Clearable="true" HideSpinButtons="true"></MudNumericField>

                    </MudItem>
                }
            } else if (_minimumType == "Difficulty")
            {
                @foreach (var kv in Settings.LevelMinimums.Where(k=>Settings.LevelWeights[k.Key]>0))
                {

                    <MudItem xs="4">
                        <MudNumericField T="int?" Min="0" Max="@Settings.Count" Value="Settings.LevelMinimums[kv.Key]" ValueChanged="s=>SetLevelMinimum(kv.Key,s)" Label="@kv.Key.ToString()" Clearable="true" HideSpinButtons="true"></MudNumericField>
                    </MudItem>
                }
            } else if (_minimumType == "Chart Type Difficulty")
            {
                @foreach (var kv in Settings.ChartTypeLevelMinimums.Where(k=>Settings.ChartTypeWeights[DifficultyLevel.ParseShortHand(k.Key).chartType]>0 && Settings.LevelWeights[DifficultyLevel.ParseShortHand(k.Key).level]>0).OrderBy(kv=>kv.Key))
                {
                    <MudItem xs="4" sm="3">
                        <MudNumericField T="int?" Min="0" Max="@Settings.Count" Value="Settings.ChartTypeLevelMinimums[kv.Key]" ValueChanged="s=>SetChartTypeLevelMinimum(kv.Key,s)" Label="@kv.Key" Clearable="true" HideSpinButtons="true"></MudNumericField>

                    </MudItem>
                }
            }
        </MudGrid>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Additional Settings">
        <MudGrid>
            <MudItem xs="4">
                <MudNumericField T="int" Min="1" Max="30" Label="Chart Count" @bind-Value="Settings.Count"></MudNumericField>
            </MudItem>
            <MudItem xs="4">
                <MudSwitch Color="Color.Primary" Label="Allow Repeat Charts" @bind-Checked="Settings.AllowRepeats"></MudSwitch>
            </MudItem>
            <MudItem xs="4">
                <MudSwitch T="bool" Color="Color.Primary" Label="Use Weights" @bind-Checked="_useWeights"></MudSwitch>
            </MudItem>
            
            <MudItem xs="4">
                <MudSwitch T="bool" Color="Color.Primary" Label="Use Scoring Level" @bind-Checked="Settings.UseScoringLevels"></MudSwitch>
            </MudItem>
        </MudGrid>
    </MudExpansionPanel>
    @if (_includedCharts.Any())
    {
        <MudExpansionPanel Text="Included Charts">
            <MudTable Items="_includedCharts">
                <RowTemplate>
                    <MudTd>
                        <MudTooltip Text="@context.Song.Name">
                            <MudImage Src="@context.Song.ImagePath.ToString()" Height="35" Alt="@context.Song.Name" Elevation="25" ObjectFit="ObjectFit.ScaleDown" />
                        </MudTooltip>
                    </MudTd>
                    <MudTd>
                        <MudText>@context.Song.Name</MudText>
                    </MudTd>
                    <MudTd>
                        <DifficultyBubble Chart="context"></DifficultyBubble>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager></MudTablePager>
                </PagerContent>
            </MudTable>
        </MudExpansionPanel>
    }
</MudExpansionPanels>
@code {

    [Parameter]
    public RandomSettings Settings { get; set; } = new RandomSettings();
    private bool _useWeights = false;
    private bool _showSinglesLevels => Settings.ChartTypeWeights[ChartType.Single]>0;
    private bool _showDoublesLevels => Settings.ChartTypeWeights[ChartType.Double]>0;
    private bool _separateDoubleLevels = false;
    private string LevelLabel => _separateDoubleLevels ? "Singles Levels" : "Levels";
    private string _minimumType = "Chart Type";

    private void SetChartTypeMinimum(ChartType type, int? minimum)
    {
        Settings.ClearLevelMinimums();
        Settings.ClearChartTypeLevelMinimums();
        Settings.ChartTypeMinimums[type] = minimum;
    }

    private void SetLevelMinimum(DifficultyLevel level, int? minimum)
    {
        Settings.ClearChartTypeMinimums();

        Settings.ClearChartTypeLevelMinimums();
        Settings.LevelMinimums[level] = minimum;
    }

    private void SetChartTypeLevelMinimum(string shortHand, int? minimum)
    {
        Settings.ClearChartTypeMinimums();
        Settings.ClearLevelMinimums();
        Settings.ChartTypeLevelMinimums[shortHand] = minimum;
    }
    private string LevelString(int level) => $"Level {level}";
    private string PlayerString(int players) => $"{players} Players";



    private IEnumerable<Chart> _includedCharts = Array.Empty<Chart>();

    private bool _showChartList = false;
    private async Task ShowIncludedCharts()
    {
        _includedCharts = await Mediator.Send(new GetIncludedRandomChartsQuery(Settings));
        _showChartList = true;
    }
    protected override async Task OnParametersSetAsync()
    {
        _useWeights = Settings.HasWeightedSetting;
        _separateDoubleLevels = Settings.ChartTypeWeights[ChartType.Single] != Settings.ChartTypeWeights[ChartType.Double];

    }
}
