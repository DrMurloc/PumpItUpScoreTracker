@namespace ScoreTracker.Web.Components
@using MediatR
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.SecondaryPorts
@using ScoreTracker.Web.Services
@using ScoreTracker.Web.Services.Contracts
@inject IMediator Mediator;
@inject IAdminNotificationClient Notifications;
@inject ISnackbar Snackbar;
@inject ChartVideoDisplayer Displayer;
@inject IUiSettingsAccessor UiSettings;
@inject ICurrentUserAccessor CurrentUser
@implements IDisposable
<MudDialog @bind-Visible="_showVideoDialog">
    <DialogContent>
        <iframe class="video"
                id="chartVideoFrame"
                src="@(_currentVideo + "?autoplay=1")"
                allow="autoplay; encrypted-media"
                allowfullscreen></iframe>
    </DialogContent>

    <DialogActions>
        <MudSpacer></MudSpacer>
        <MudTooltip Text=@L["Report Video Tooltip"]>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Report" OnClick="NotifyBadVideo">@L["Report Video"]</MudButton>
        </MudTooltip>
        <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Close" OnClick="()=>_showVideoDialog=false">@L["Close"]</MudButton>
    </DialogActions>
</MudDialog>
@code {

    private async Task NotifyBadVideo()
    {
        var chart = (await Mediator.Send(new GetChartsQuery(_currentMix, ChartIds: new[] { _chartId }))).Single();
        await Notifications.NotifyAdmin($"The video for {chart.Song.Name} {chart.DifficultyString} was reported by {(CurrentUser.IsLoggedIn ? CurrentUser.User.Name : "Unknown")}", CancellationToken.None);
        Snackbar.Add("Notification was sent", Severity.Success);
    }

    private Guid _chartId;
    private bool _showVideoDialog = false;
    private string _currentVideo = string.Empty;
    private MixEnum _currentMix = MixEnum.Phoenix;
    private IDictionary<Guid, string> _chartVideos = new Dictionary<Guid, string>();

    private void ChartSelected(Guid chartId)
    {
        _showVideoDialog = true;
        _chartId = chartId;
        _currentVideo = _chartVideos[chartId];
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        _currentMix = await UiSettings.GetSelectedMix();
        _chartVideos = (await Mediator.Send(new GetChartVideosQuery())).ToDictionary(g => g.ChartId, g => g.VideoUrl.ToString());
        Displayer.ChartSelected += ChartSelected;
    }
    public void Dispose()
    {
        Displayer.ChartSelected -= ChartSelected;
    }

}
