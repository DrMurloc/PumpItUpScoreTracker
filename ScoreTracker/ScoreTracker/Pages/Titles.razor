@page "/Titles"
@using MediatR
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.SecondaryPorts
@using ScoreTracker.Web.Dtos
@using ScoreTracker.Web.Services.Contracts
<PageTitle>Titles</PageTitle>
<MudSelect T="MixEnum" AdornmentIcon="@Icons.Material.Filled.LibraryMusic" Label="Mix" Value="_currentMix" ValueChanged="MixChanged">
    @foreach (var mix in Enum.GetValues<MixEnum>())
    {
        <MudSelectItem T="MixEnum" Value="mix">@mix</MudSelectItem>
    }
</MudSelect>
<MudDataGrid @ref="_dataGrid" T="TitleProgressDto" Items="_titleProgress" Hover="true" ReadOnly="true"
             Groupable="true" FixedHeader="true" Height="500" Loading="@_isLoading">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Titles</MudText>
    </ToolBarContent>
    <Columns>
        <Column T="TitleProgressDto" Field="TitleCategory" Title="Category" Grouping="true"></Column>
        <Column T="TitleProgressDto" Field="TitleName" Title="Title" Groupable="false"></Column>
        <Column T="TitleProgressDto" Field="TitleDescription" Title="Description" Groupable="false"></Column>
        @if (CurrentUser.IsLoggedIn)
        {
            <Column T="TitleProgressDto" Field="IsTrackable" Title="Completion" Groupable="false">
                <CellTemplate>
                    <MudTooltip Text="@context.Item.AdditionalNote">
                        <MudText Color="@(context.Item.CompletionCount >= context.Item.RequiredCount ? Color.Success : Color.Primary)">
                            @if (context.Item.IsTrackable)
                            {
                                <span>@context.Item.CompletionCount / @context.Item.RequiredCount</span>
                            }
                        </MudText>
                    </MudTooltip>
                </CellTemplate>
            </Column>
        } else if (_titleProgress.Any(p => !string.IsNullOrWhiteSpace(p.AdditionalNote)))
        {
            <Column T="TitleProgressDto" Field="AdditionalNote" Title="Notes" Groupable="false"></Column>
        }
    </Columns>
</MudDataGrid>

@inject IMediator Mediator
@inject ICurrentUserAccessor CurrentUser;
@inject IUiSettingsAccessor UiSettings;
@code {
    private MudDataGrid<TitleProgressDto>? _dataGrid;
    private IEnumerable<TitleProgressDto> _titleProgress = Array.Empty<TitleProgressDto>();
    private MixEnum _currentMix;
    private bool _isLoading = true;

    private async Task MixChanged(MixEnum newMix)
    {
        _currentMix = newMix;
        await UiSettings.SetSelectedMix(newMix);
        await LoadTitles();
    }

    private async Task LoadTitles()
    {

        _isLoading = true;
        _titleProgress = (await Mediator.Send(new GetTitleProgressQuery(_currentMix))).Select(TitleProgressDto.From).ToArray();
        _isLoading = false;
        if (_dataGrid != null)
        {

            _dataGrid.Items = _titleProgress;
            _dataGrid?.GroupItems();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        _currentMix = await UiSettings.GetSelectedMix();
        await LoadTitles();
    }
}