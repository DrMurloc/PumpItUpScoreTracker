@page "/Titles"
@using MediatR
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.Models
@using ScoreTracker.Domain.Models.Titles.Phoenix
@using ScoreTracker.Domain.SecondaryPorts
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Web.Dtos
@using ScoreTracker.Web.Services.Contracts
<PageTitle>Titles</PageTitle>
<MudSelect T="MixEnum" AdornmentIcon="@Icons.Material.Filled.LibraryMusic" Label="Mix" Value="_currentMix" ValueChanged="MixChanged">
    @foreach (var mix in Enum.GetValues<MixEnum>())
    {
        <MudSelectItem T="MixEnum" Value="mix">@mix</MudSelectItem>
    }
</MudSelect>
<MudDataGrid @ref="_dataGrid" T="TitleProgressDto" Items="_titleProgress" Hover="true" ReadOnly="true"
             Groupable="true" FixedHeader="true" Height="500" Loading="@_isLoading">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Titles</MudText>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="t=>t.TitleCategory" Title="Category" Grouping="true"></PropertyColumn>
        <PropertyColumn Property="t=>t.TitleName" Title="Title" Groupable="false"></PropertyColumn>
        <PropertyColumn Property="t=>t.TitleDescription" Title="Description" Groupable="false"></PropertyColumn>
        @if (CurrentUser.IsLoggedIn)
        {
            <TemplateColumn T="TitleProgressDto" Field="IsTrackable" Title="Completion" Groupable="false">
                <CellTemplate>
                    @if (context.Item.IsTrackable)
                    {
                        <MudProgressLinear Color="@(context.Item.CompletionCount >= context.Item.RequiredCount ? Color.Success : Color.Primary)" Value="100.0 * (context.Item.CompletionCount / (double)context.Item.RequiredCount)">
                            @if (context.Item.CompletionCount < context.Item.RequiredCount)
                            {
                                <MudText Typo="Typo.subtitle1">
                                    @context.Item.CompletionCount / @context.Item.RequiredCount
                                </MudText>
                            }
                        </MudProgressLinear>
                    }

                </CellTemplate>
            </TemplateColumn>

            <TemplateColumn T="TitleProgressDto" Field="IsTrackable" Title="Breakdown" Groupable="false">
                <CellTemplate>
                    @if (!string.IsNullOrWhiteSpace(context.Item.AdditionalNote))
                    {
                        <br/>
                        <MudText>@context.Item.AdditionalNote</MudText>
                    }
                    @if (_currentMix == MixEnum.Phoenix && context.Item.CompletionCount < context.Item.RequiredCount && context.Item.DifficultyLevel != null)
                    {
                        <br/>
                        <MudText>@(_difficultyCounts[context.Item.DifficultyLevel.Value]-_completedCounts[context.Item.DifficultyLevel.Value]) Remaining Charts In Folder</MudText>
                    }

                </CellTemplate>
            </TemplateColumn>
        } else if (_titleProgress.Any(p => !string.IsNullOrWhiteSpace(p.AdditionalNote)))
        {
            <PropertyColumn Property="t=>t.AdditionalNote" Title="Notes" Groupable="false"></PropertyColumn>
        }
    </Columns>
</MudDataGrid>
<br/>
<MudCard>
    <MudCardHeader>Rating Calculator</MudCardHeader>
    <MudCardContent>
        <MudSelect T="PhoenixLetterGrade" @bind-Value="_selectedGrade" Label="@LetterGradeLabel()">
            @foreach (var letterGrade in Enum.GetValues<PhoenixLetterGrade>())
            {
                <MudSelectItem T="PhoenixLetterGrade" Value="letterGrade">@letterGrade</MudSelectItem>
            }
        </MudSelect>
        <MudSelect T="DifficultyLevel" @bind-Value="_selectedDifficulty" Label="@DifficultyLabel()">
            @for (int level = DifficultyLevel.Min; level <= DifficultyLevel.Max; level++)
            {
                var level1 = level;
                <MudSelectItem T="DifficultyLevel" Value="level1">@level1</MudSelectItem>
            }
        </MudSelect>
        <MudText>
            Rating: @((int)(_selectedDifficulty.BaseRating * _selectedGrade.GetModifier()))
        </MudText>
    </MudCardContent>
</MudCard>
@inject IMediator Mediator
@inject ICurrentUserAccessor CurrentUser;
@inject IUiSettingsAccessor UiSettings;
@code {
    private MudDataGrid<TitleProgressDto>? _dataGrid;
    private IEnumerable<TitleProgressDto> _titleProgress = Array.Empty<TitleProgressDto>();
    private IDictionary<int, int> _difficultyCounts = new Dictionary<int, int>();
    private IDictionary<int, int> _completedCounts = new Dictionary<int, int>();
    private MixEnum _currentMix;
    private bool _isLoading = true;
    private PhoenixLetterGrade _selectedGrade = PhoenixLetterGrade.AA;
    private DifficultyLevel _selectedDifficulty = 18;
    private string LetterGradeLabel() => $"{_selectedGrade.GetModifier()}X Modifier";
    private string DifficultyLabel() => $"{_selectedDifficulty.BaseRating} Base Rating";
    private async Task MixChanged(MixEnum newMix)
    {
        _currentMix = newMix;
        await UiSettings.SetSelectedMix(newMix);
        await LoadTitles();
    }

    private async Task LoadTitles()
    {

        _isLoading = true;
        _titleProgress = (await Mediator.Send(new GetTitleProgressQuery(_currentMix))).Select(TitleProgressDto.From).ToArray();
        _isLoading = false;
        if (_currentMix == MixEnum.Phoenix)
        {
            
            var charts = (await Mediator.Send(new GetChartsQuery(_currentMix))).ToDictionary(c => c.Id);
            _difficultyCounts = charts.Values.GroupBy(c => (int)c.Level).ToDictionary(g => g.Key, g => g.Count());
            _completedCounts = CurrentUser.IsLoggedIn?(await Mediator.Send(new GetPhoenixRecordsQuery(CurrentUser.User.Id)))
                .Where(r => !r.IsBroken)
                .GroupBy(r => (int)charts[r.ChartId].Level)
                .ToDictionary(g => g.Key, g => g.Count()) : new Dictionary<int, int>();
            foreach (var key in _difficultyCounts.Keys.Where(k => !_completedCounts.ContainsKey(k)))
            {
                _completedCounts[key] = 0;
            }
        }
        if (_dataGrid != null)
        {

            _dataGrid.Items = _titleProgress;
            _dataGrid?.GroupItems();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _currentMix = await UiSettings.GetSelectedMix();
        await LoadTitles();
    }
}