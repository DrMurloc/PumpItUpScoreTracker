@page "/Communities"
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.SecondaryPorts
@using ScoreTracker.Domain.Records
@using MediatR
@using ScoreTracker.Application.Commands
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Exceptions
@using ScoreTracker.Domain.Models
@using ScoreTracker.Domain.ValueTypes
@using System.Web
<PageTitle>Communities</PageTitle>
<MudTable T="CommunityOverviewRecord" Items="_communities">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Members</MudTh>
        <MudTh>Leaderboard</MudTh>
        <MudTh>@(_currentUser==null?"Privacy":"Join")</MudTh>
        <MudTh>Invite</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.CommunityName</MudTd>
        <MudTd>@context.MemberCount</MudTd>
        <MudTd><MudButton StartIcon="@Icons.Material.Filled.Leaderboard" OnClick="()=>GoToLeaderboard(context.CommunityName)">Leaderboard</MudButton></MudTd>
        <MudTd>
            @if (_currentUser == null)
            {
                @if (context.PrivacyType == CommunityPrivacyType.PublicWithCode)
                {
                    <MudText>Requires Invite</MudText>
                }
                else if(context.PrivacyType == CommunityPrivacyType.Public)
                {
                    <MudText>Public</MudText>
                } else
                {
                    <MudText>Private</MudText>
                }
            }
            else
            {
                @if (_myCommunities.Contains(context.CommunityName))
                {
                    <MudText>Joined!</MudText>
                } else if (context.PrivacyType == CommunityPrivacyType.Public)
                {
                    <MudButton Disabled="_isSaving" OnClick="()=>Join(context.CommunityName)" Color="Color.Primary" Variant="Variant.Filled">Join</MudButton>
                } else if (context.PrivacyType == CommunityPrivacyType.PublicWithCode)
                {
                    <MudText>Requires Invite</MudText>
                } else if (context.PrivacyType == CommunityPrivacyType.Private)
                {
                    <Mudtext>Private</Mudtext>
                }
            }

        </MudTd>
        <MudTd>
            @if (_myCommunities.Contains(context.CommunityName) && context.CommunityName!="World")
            {
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="()=>OpenCommunity(context.CommunityName)" StartIcon="@Icons.Material.Filled.Link">Invite</MudButton>
            }
        </MudTd>
    </RowTemplate>
</MudTable>
<br/>
<MudButton OnClick="()=>_showCreateDialog=true" Variant="Variant.Outlined">Create Community</MudButton>
<MudDialog @bind-IsVisible="_showCreateDialog">
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudTextField @bind-Value="_name" MaxLength="50" Label="Community Name"></MudTextField>
            </MudItem>
            <MudItem xs="12">
                <MudRadioGroup T="CommunityPrivacyType" @bind-SelectedOption="_privacyType">
                    <MudRadio Option="@CommunityPrivacyType.Public" Color="Color.Primary">Public</MudRadio>
                    <MudRadio Option="@CommunityPrivacyType.PublicWithCode" Color="Color.Primary">Invite Required</MudRadio>
                    <MudRadio Option="@CommunityPrivacyType.Private" Color="Color.Primary">Private</MudRadio>
                </MudRadioGroup>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudSpacer>
        </MudSpacer>
        <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Close" OnClick="()=>_showCreateDialog=false">@L["Close"]</MudButton>
        <MudButton Variant="Variant.Filled" Disabled="_isSaving" Color="Color.Primary" OnClick="CreateCommunity">Create</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="_showManageDialog">
    <DialogContent>
        @if (_community != null)
        {
            <MudGrid>
                @foreach (var link in _community.InviteCodes)
                {
                    <MudItem xs="8">
                        <MudText>@link.Key</MudText>
                    </MudItem>
                    <MudItem xs="4">
                        <MudButton StartIcon="@Icons.Material.Filled.ContentCopy" Variant="Variant.Outlined" OnClick="()=>CopyCode(link.Key)">Copy Invite Link</MudButton>
                    </MudItem>
                }
                <MudItem xs="12">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateCode">Create Invite Code</MudButton>

                </MudItem>
            </MudGrid>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Close" OnClick="()=>_showManageDialog=false">@L["Close"]</MudButton>

    </DialogActions>
</MudDialog>
@inject IMediator Mediator;
@inject ICurrentUserAccessor CurrentUser;
@inject ISnackbar Snackbar;
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavManager
@code {

    private IEnumerable<CommunityOverviewRecord> _communities = Array.Empty<CommunityOverviewRecord>();
    private ISet<Name> _myCommunities = new HashSet<Name>();
    private User? _currentUser;
    private bool _showCreateDialog = false;
    private bool _isSaving = false;
    private string _name = string.Empty;
    private bool _showManageDialog = false;
    private CommunityPrivacyType _privacyType = CommunityPrivacyType.PublicWithCode;

    private async Task CreateCommunity()
    {
        if (string.IsNullOrWhiteSpace(_name))
        {
            Snackbar.Add("Must give the community a name.", Severity.Error);
            return;
        }
        _isSaving = true;
        try
        {
            await Mediator.Send(new CreateCommunityCommand(_name, _privacyType));
            _communities = _communities.Append(new CommunityOverviewRecord(_name, _privacyType, 1)).ToArray();
            _myCommunities.Add(_name);
        }
        catch (CommunityAlreadyExistsException)
        {
            Snackbar.Add("A community with this name already exists.", Severity.Error);
        }
        _isSaving = false;
    }

    private void GoToLeaderboard(Name communityName)
    {
        NavManager.NavigateTo($"/Community/{HttpUtility.UrlEncode(communityName)}/Leaderboard");
    }
    private async Task CreateCode()
    {
        if (_community == null)
        {
            return;
        }
        _isSaving = true;
        var code = await Mediator.Send(new CreateInviteLinkCommand(_community.Name, null));
        _community.InviteCodes[code] = null;
        _isSaving = false;
    }
    private async Task Join(Name communityName)
    {
        _isSaving = true;
        try
        {
            await Mediator.Send(new JoinCommunityCommand(communityName, null));
            _myCommunities.Add(communityName);
        }
        catch (Exception e)
        {
            Snackbar.Add("There was an error while joining the community", Severity.Error);
        }
        _isSaving = false;
        
    }

    private Community? _community = null;

    private async Task OpenCommunity(Name name)
    {
        _isSaving = true;
        _community = await Mediator.Send(new GetCommunityQuery(name));
        _showManageDialog = true;
        _isSaving = false;
    }
    private async Task CopyCode(Guid code)
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", $"https://piuscores.arroweclip.se/Communities/Invite/{code}");
        Snackbar.Add("Copied to clipboard!", Severity.Success);
    }
    protected override async Task OnInitializedAsync()
    {
        _currentUser = CurrentUser.IsLoggedIn ? CurrentUser.User : null;
        _communities = (await Mediator.Send(new GetPublicCommunitiesQuery())).ToArray();
        if (CurrentUser.IsLoggedIn)
        {
            var myCommunities = (await Mediator.Send(new GetMyCommunitiesQuery())).ToArray();
            _myCommunities = myCommunities.Select(c => c.CommunityName).ToHashSet();
            _communities = _communities.Concat(myCommunities.Where(c => c.PrivacyType == CommunityPrivacyType.Private)).ToArray();
        }


    }
}
