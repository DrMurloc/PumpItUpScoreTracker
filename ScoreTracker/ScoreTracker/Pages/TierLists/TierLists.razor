@page "/TierLists/Old"
@using MediatR
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.Models
@using ScoreTracker.Domain.Models.Titles;
@using ScoreTracker.Domain.Models.Titles.Phoenix;
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Application.Commands
@using ScoreTracker.Domain.Records
@using ScoreTracker.Web.Components
@using ScoreTracker.Domain.SecondaryPorts
@using ScoreTracker.Web.Enums
@using ScoreTracker.Web.Services.Contracts
@using ChartType = ScoreTracker.Domain.Enums.ChartType
@using System.Drawing
@using System.Net
@using ScoreTracker.Web.Services
<PageTitle>@L["Tier Lists"]</PageTitle>


@inject IMediator Mediator
@inject ICurrentUserAccessor CurrentUser;
@inject NavigationManager NavManager;
@inject IUiSettingsAccessor UiSettings;
@inject ChartVideoDisplayer VvideoDisplayer;
<MudGrid>
    <MudItem xs="12" sm="4">
        <MudSelect T="TierListType" Label=@L["Tier Lists"] Value="_currentTierList" ValueChanged="SetTierList" AdornmentIcon="@Icons.Material.Filled.Topic">
            <MudSelectItem T="TierListType" Value="TierListType.Difficulty">Stage Break</MudSelectItem>
            <MudSelectItem T="TierListType" Value="TierListType.Popularity">@L["Popularity"]</MudSelectItem>
            @if (_currentMix == MixEnum.Phoenix)
            {
                <MudSelectItem T="TierListType" Value="TierListType.OfficialScores">@L["Official Scores"]</MudSelectItem>
                <MudSelectItem T="TierListType" Value="TierListType.Scores">@L["Score"]</MudSelectItem>
            }
            @if (_currentMix == MixEnum.Phoenix && CurrentUser.IsLoggedIn)
            {
                <MudSelectItem T="TierListType" Value="TierListType.MyScores">@L["My Score"]</MudSelectItem>
                <MudSelectItem T="TierListType" Value="TierListType.CompareToOfficial">My Scores vs Official</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    @if (ChartTypeFilter == nameof(ChartType.CoOp))
    {
        <MudItem xs="12" sm="4">
            <MudNumericField T="int" AdornmentIcon="@Icons.Material.Filled.Group" HideSpinButtons="true" Clearable="false" Min="2" Max="5" Label=@L["Players"] Value="DifficultyFilter" ValueChanged="@(d => UpdateSelection(d, ChartTypeFilter, _coOpSortType))"></MudNumericField>
        </MudItem>
        @if (_currentTierList == TierListType.Difficulty)
        {
            <MudItem xs="12" sm="4">
                <MudSelect T="CoOpSortType" AdornmentIcon="@Icons.Material.Filled.Numbers" Label=@L["CoOp Aggregation"] Value="_coOpSortType" ValueChanged="@(d => UpdateSelection(DifficultyFilter, ChartTypeFilter, d))">
                    <MudSelectItem T="CoOpSortType" Value="CoOpSortType.Average">@L.GetString("Average")</MudSelectItem>
                    <MudSelectItem T="CoOpSortType" Value="CoOpSortType.EasiestPlayer">@L.GetString("Easiest Player")</MudSelectItem>
                    <MudSelectItem T="CoOpSortType" Value="CoOpSortType.HardestPlayer">@L.GetString("Hardest Player")</MudSelectItem>
                </MudSelect>
            </MudItem>

        }
    }
    else
    {

        <MudItem xs="12" sm="4">
            <MudNumericField T="int" AdornmentIcon="@Icons.Material.Filled.Bolt" HideSpinButtons="true" Clearable="false" Min="1" Max="28" Label=@L["Difficulty Level"] Value="DifficultyFilter" ValueChanged="@(d => UpdateSelection(d, ChartTypeFilter, _coOpSortType))"></MudNumericField>
        </MudItem>
    }
    <MudItem xs="12"></MudItem>
    <MudItem xs="12" lg="4">
        <MudRadioGroup T="string" SelectedOption="@ChartTypeFilter" SelectedOptionChanged="@(c => UpdateSelection(DifficultyFilter, c, _coOpSortType))">
            <MudRadio Option="@ChartType.Single.ToString()" Color="Color.Primary">@L.GetString("Singles")</MudRadio>
            <MudRadio Option="@ChartType.Double.ToString()" Color="Color.Primary">@L.GetString("Doubles")</MudRadio>
            <MudRadio Option="@ChartType.CoOp.ToString()" Color="Color.Primary">@L.GetString("CoOp")</MudRadio>
        </MudRadioGroup>
    </MudItem>
    <MudHidden Breakpoint="Breakpoint.SmAndDown">
        @foreach (var type in Enum.GetValues<SongType>())
        {
            <MudItem sm="3" lg="2">
                <MudCheckBox T="bool" Label="@type.ToString()" Checked="_filteredTypes.Contains(type)" CheckedChanged="v => ToggleFilter(v, type)"></MudCheckBox>
            </MudItem>
        }
        @if (CurrentUser.IsLoggedIn && _currentTierList != TierListType.MyScores)
        {
            <MudItem sm="4">
                <MudSwitch T="bool" Label=@L["Hide Completed Charts"] Checked="_hideCompleted" CheckedChanged="v => ToggleVisibility(v, _showOnlyTodos)" Color="Color.Primary"></MudSwitch>
            </MudItem>
            <MudItem sm="4">
                <MudSwitch T="bool" Label=@L["Show Only ToDo Charts"] Checked="_showOnlyTodos" CheckedChanged="v => ToggleVisibility(_hideCompleted, v)" Color="Color.Primary"></MudSwitch>
            </MudItem>
            <MudItem sm="4"></MudItem>
        }
        <MudItem sm="4">
            <MudAutocomplete T="string" Label=@L["Song Name"] AdornmentIcon="@Icons.Material.Filled.Search" Value="_songFilter" ValueChanged="ToggleSongSearch" SearchFunc="FilterSongName" CoerceText="false" CoerceValue="true"></MudAutocomplete>
        </MudItem>

    </MudHidden>
</MudGrid>
<MudHidden Breakpoint="Breakpoint.MdAndUp">
    <MudFab Icon="@Icons.Material.Filled.Settings" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Medium" OnClick="()=>_showSettings=true" Style="position:fixed;right:10px;bottom:10px;z-index:10;"></MudFab>
</MudHidden>
<MudDrawer @bind-Open="_showSettings" Variant="@DrawerVariant.Temporary" Anchor="Anchor.Right" Id="SettingsDrawer">
 
    <MudGrid>
        @foreach (var type in Enum.GetValues<SongType>())
        {
            <MudItem sm="6">
                <MudCheckBox T="bool" Label="@type.ToString()" Checked="_filteredTypes.Contains(type)" CheckedChanged="v=>ToggleFilter(v,type)"></MudCheckBox>
            </MudItem>
        }
        @if (CurrentUser.IsLoggedIn && _currentTierList != TierListType.MyScores)
        {
            <MudItem xs="12">
                <MudSwitch T="bool" Label=@L["Hide Completed Charts"] Checked="_hideCompleted" CheckedChanged="v => ToggleVisibility(v, _showOnlyTodos)" Color="Color.Primary"></MudSwitch>
            </MudItem>
            <MudItem xs="12">
                <MudSwitch T="bool" Label=@L["Show Only ToDo Charts"] Checked="_showOnlyTodos" CheckedChanged="v => ToggleVisibility(_hideCompleted, v)" Color="Color.Primary"></MudSwitch>
            </MudItem>
        }

        <MudItem xs="12">
            <MudAutocomplete T="string" Label=@L["Song Name"] AdornmentIcon="@Icons.Material.Filled.Search" Value="_songFilter" ValueChanged="ToggleSongSearch" SearchFunc="FilterSongName" CoerceText="false" CoerceValue="true"></MudAutocomplete>
        </MudItem>
        <MudItem xs="12">
            <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="()=>_showSettings=false">@L["Close"]</MudButton>
        </MudItem>
    </MudGrid>
</MudDrawer>
@if (_currentTierList == TierListType.CompareToOfficial)
{

    <TierListSection Type="@_currentTierList" Scores="_phoenixScores" ToggleRating="UpdateRating" PlayerRatings="_userRatings" Charts="_megaStrongCharts" Name="Mega Strong" OutlineColor="@Colors.Purple.Darken1" Passes="_passes" ToDos="_todos" ToggleToDo="ToggleTodo" OnEdit="EditChart"></TierListSection>

    <TierListSection Type="@_currentTierList" Scores="_phoenixScores" ToggleRating="UpdateRating" PlayerRatings="_userRatings" Charts="_veryStrongCharts" Name="Very Strong" OutlineColor="@Colors.Purple.Darken1" Passes="_passes" ToDos="_todos" ToggleToDo="ToggleTodo"OnEdit="EditChart"></TierListSection>

    <TierListSection Type="@_currentTierList" Scores="_phoenixScores" ToggleRating="UpdateRating" PlayerRatings="_userRatings" Charts="_strongCharts" Name="Strong" OutlineColor="@Colors.Blue.Darken1" Passes="_passes" ToDos="_todos" ToggleToDo="ToggleTodo"  OnEdit="EditChart"></TierListSection>
    <TierListSection Type="@_currentTierList" Scores="_phoenixScores" ToggleRating="UpdateRating" PlayerRatings="_userRatings" Charts="_averageCharts" Name="Average" OutlineColor="@Colors.Cyan.Darken1" Passes="_passes" ToDos="_todos" ToggleToDo="ToggleTodo" OnEdit="EditChart"></TierListSection>
    <TierListSection Type="@_currentTierList" Scores="_phoenixScores" ToggleRating="UpdateRating" PlayerRatings="_userRatings" Charts="_weakCharts" Name="Weak" OutlineColor="@Colors.Grey.Darken1" Passes="_passes" ToDos="_todos" ToggleToDo="ToggleTodo"  OnEdit="EditChart"></TierListSection>
    <TierListSection Type="@_currentTierList" Scores="_phoenixScores" ToggleRating="UpdateRating" PlayerRatings="_userRatings" Charts="_veryWeakCharts" Name="Very Weak" OutlineColor="@Colors.Yellow.Darken1" Passes="_passes" ToDos="_todos" ToggleToDo="ToggleTodo"  OnEdit="EditChart"></TierListSection>
    <TierListSection Type="@_currentTierList" Scores="_phoenixScores" ToggleRating="UpdateRating" PlayerRatings="_userRatings" Charts="_megaWeakCharts" Name="Mega Weak" OutlineColor="@Colors.Yellow.Darken1" Passes="_passes"  ToDos="_todos" ToggleToDo="ToggleTodo"  OnEdit="EditChart"></TierListSection>
    <TierListSection Type="@_currentTierList" Scores="_phoenixScores" ToggleRating="UpdateRating" PlayerRatings="_userRatings" Charts="_notRatedCharts" Name=@L.GetString("Not Rated") OutlineColor="@Colors.Grey.Darken1" Passes="_passes"  ToDos="_todos" ToggleToDo="ToggleTodo" OnEdit="EditChart"></TierListSection>

}
else if (_currentTierList is TierListType.Difficulty or TierListType.MyScores or TierListType.Scores or TierListType.OfficialScores)
{
    @if (ChartTypeFilter == nameof(ChartType.CoOp) && _currentTierList==TierListType.Difficulty)
    {
        @foreach (var group in _coOpLevels.OrderByDescending(g => g.Key))
        {
            <TierListSection Type="TierListType.Difficulty" ToggleRating="UpdateRating" PlayerRatings="_userRatings" Charts="group.Value" Name="@group.Key.ToString()" OutlineColor="@Colors.Grey.Darken1" Passes="_passes" OnEdit="EditChart"></TierListSection>
        }
        <TierListSection Type="TierListType.Difficulty" ToggleRating="UpdateRating" PlayerRatings="_userRatings" Charts="_unratedCoOps" Name="Unrated" OutlineCOlor="@Colors.Grey.Darken1" Passes="_passes" OnEdit="EditChart"></TierListSection>
    }
    else
    {

        <TierListSection Type="@_currentTierList" Scores="_phoenixScores" ToggleRating="UpdateRating" PlayerRatings="_userRatings" Charts="_underratedCharts" Name=@L.GetString("1+ Level Harder") OutlineColor="@Colors.Red.Darken1" Passes="_passes" ToDos="_todos" ToggleToDo="ToggleTodo" OnEdit="EditChart"></TierListSection>
        <TierListSection Type="@_currentTierList" Scores="_phoenixScores" ToggleRating="UpdateRating" PlayerRatings="_userRatings"  Charts="_veryHardCharts" Name=@L.GetString("Very Hard") OutlineColor="@Colors.Orange.Darken1" Passes="_passes" ToDos="_todos" ToggleToDo="ToggleTodo" OnEdit="EditChart"></TierListSection>
        <TierListSection Type="@_currentTierList" Scores="_phoenixScores" ToggleRating="UpdateRating" PlayerRatings="_userRatings" Charts="_hardCharts" Name=@L.GetString("Hard") OutlineColor="@Colors.Yellow.Darken1" Passes="_passes" ToDos="_todos" ToggleToDo="ToggleTodo" OnEdit="EditChart"></TierListSection>
        <TierListSection Type="@_currentTierList" Scores="_phoenixScores" ToggleRating="UpdateRating" PlayerRatings="_userRatings" Charts="_mediumCharts" Name=@L.GetString("Medium") OutlineColor="@Colors.Grey.Darken1" Passes="_passes" ToDos="_todos" ToggleToDo="ToggleTodo" OnEdit="EditChart"></TierListSection>
        <TierListSection Type="@_currentTierList" Scores="_phoenixScores" ToggleRating="UpdateRating" PlayerRatings="_userRatings"  Charts="_easyCharts" Name=@L.GetString("Easy") OutlineColor="@Colors.Cyan.Darken1" Passes="_passes" ToDos="_todos" ToggleToDo="ToggleTodo" OnEdit="EditChart"></TierListSection>
        <TierListSection Type="@_currentTierList" Scores="_phoenixScores" ToggleRating="UpdateRating" PlayerRatings="_userRatings"  Charts="_veryEasyCharts" Name=@L.GetString("Very Easy") OutlineColor="@Colors.Blue.Darken1" Passes="_passes" ToDos="_todos" ToggleToDo="ToggleTodo" OnEdit="EditChart"></TierListSection>
        <TierListSection Type="@_currentTierList" Scores="_phoenixScores" ToggleRating="UpdateRating" PlayerRatings="_userRatings"  Charts="_overratedCharts" Name=@L.GetString("1+ Level Easier") OutlineColor="@Colors.Purple.Darken1" Passes="_passes" ToDos="_todos" ToggleToDo="ToggleTodo" OnEdit="EditChart"></TierListSection>
        <TierListSection Type="@_currentTierList" Scores="_phoenixScores" ToggleRating="UpdateRating" PlayerRatings="_userRatings" Charts="_notRatedCharts" Name=@L.GetString("Not Rated") OutlineColor="@Colors.Grey.Darken1" Passes="_passes" ToDos="_todos" ToggleToDo="ToggleTodo" OnEdit="EditChart"></TierListSection>

    }
}
else
{

    <TierListSection Type="@_currentTierList" Scores="_phoenixScores" ToggleRating="UpdateRating" PlayerRatings="_userRatings" Charts="_overratedCharts" Name="SSS" OutlineColor="@Colors.Purple.Darken1" Passes="_passes" ToDos="_todos" ToggleToDo="ToggleTodo" OnEdit="EditChart"></TierListSection>

    <TierListSection Type="@_currentTierList" Scores="_phoenixScores" ToggleRating="UpdateRating" PlayerRatings="_userRatings" Charts="_veryEasyCharts" Name="SS" OutlineColor="@Colors.Blue.Darken1" Passes="_passes" ToDos="_todos" ToggleToDo="ToggleTodo" OnEdit="EditChart"></TierListSection>
    <TierListSection Type="@_currentTierList" Scores="_phoenixScores" ToggleRating="UpdateRating" PlayerRatings="_userRatings" Charts="_easyCharts" Name="S" OutlineColor="@Colors.Cyan.Darken1" Passes="_passes" ToDos="_todos" ToggleToDo="ToggleTodo" OnEdit="EditChart"></TierListSection>
    <TierListSection Type="@_currentTierList" Scores="_phoenixScores" ToggleRating="UpdateRating" PlayerRatings="_userRatings" Charts="_mediumCharts" Name="A"OutlineColor="@Colors.Grey.Darken1" Passes="_passes" ToDos="_todos" ToggleToDo="ToggleTodo" OnEdit="EditChart"></TierListSection>
    <TierListSection Type="@_currentTierList" Scores="_phoenixScores" ToggleRating="UpdateRating" PlayerRatings="_userRatings" Charts="_hardCharts" Name="B" OutlineColor="@Colors.Yellow.Darken1" Passes="_passes" ToDos="_todos" ToggleToDo="ToggleTodo" OnEdit="EditChart"></TierListSection>
    <TierListSection Type="@_currentTierList" Scores="_phoenixScores" ToggleRating="UpdateRating" PlayerRatings="_userRatings" Charts="_veryHardCharts" Name="C" OutlineColor="@Colors.Orange.Darken1" Passes="_passes" ToDos="_todos" ToggleToDo="ToggleTodo" OnEdit="EditChart"></TierListSection>

    <TierListSection Type="@_currentTierList" Scores="_phoenixScores" ToggleRating="UpdateRating" PlayerRatings="_userRatings" Charts="_underratedCharts" Name="D" OutlineColor="@Colors.Red.Darken1" Passes="_passes" ToDos="_todos" ToggleToDo="ToggleTodo" OnEdit="EditChart"></TierListSection>
    <TierListSection Type="@_currentTierList" Scores="_phoenixScores" ToggleRating="UpdateRating" PlayerRatings="_userRatings" Charts="_notRatedCharts" Name=@L.GetString("Not Rated") OutlineColor="@Colors.Grey.Darken1" Passes="_passes" ToDos="_todos" ToggleToDo="ToggleTodo" OnEdit="EditChart"></TierListSection>
    
}

@if (CurrentUser.IsLoggedIn && _currentMix == MixEnum.Phoenix && _currentTierList != TierListType.MyScores && _titleProgress.Any(t => (t.Title is PhoenixDifficultyTitle pdt && pdt.Level == DifficultyFilter) || (ChartTypeFilter == ChartType.CoOp.ToString() && t.Title is PhoenixCoOpTitle)))
{
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h4">
                @L.GetString("Title Progress")
            </MudText>
        </MudItem>
        @foreach (var progress in _titleProgress.Where(t => (t.Title is PhoenixDifficultyTitle pdt && pdt.Level == DifficultyFilter) || (ChartTypeFilter==ChartType.CoOp.ToString() && t.Title is PhoenixCoOpTitle) ))
        {
            var rating = progress.Title switch
            {
                PhoenixDifficultyTitle difficultyTitle => difficultyTitle.Level.BaseRating,
                PhoenixCoOpTitle => 2000,
                _ => 0

                };
            @if (rating == 0)
            {
                continue;
            }
            <MudItem xs="12" sm="4" md="3">
                <MudText Typo="Typo.h5">@progress.Title.Name</MudText>
            </MudItem>
            <MudItem xs="12" sm="8" md="9">
                <MudProgressLinear Color="@(progress.CompletionCount >= progress.Title.CompletionRequired ? Color.Success : Color.Primary)" Value="100.0 * (progress.CompletionCount / (double)progress.Title.CompletionRequired)">
                    @if (progress.CompletionCount < progress.Title.CompletionRequired)
                    {
                        <MudText Typo="Typo.subtitle1">
                            @progress.CompletionCount / @progress.Title.CompletionRequired
                        </MudText>
                    }
                    else
                    {
                        <MudText Typo="Typo.subtitle1">
                            @L.GetString("Completed")
                        </MudText>
                    }
                </MudProgressLinear>
            </MudItem>
            @if (progress.CompletionCount < progress.Title.CompletionRequired)
            {

                <MudItem xs="12">
                    @L["Remaining Charts",((int)Math.Ceiling((progress.Title.CompletionRequired - progress.CompletionCount) / (rating * PhoenixLetterGrade.SSSPlus.GetModifier()))),
        ((int)Math.Ceiling((progress.Title.CompletionRequired - progress.CompletionCount) / (rating * PhoenixLetterGrade.AA.GetModifier())))]
                    <br/>
                    @if (_averageRating != null)
                    {
                        @L["Remaining Charts For You",(int)Math.Ceiling((progress.Title.CompletionRequired - progress.CompletionCount) / ((double)_averageRating.Value))]
                    }
                </MudItem>
            }
        }
        <MudItem xs="12">
            <MudText Typo="Typo.h4"></MudText>
        </MudItem>
        <MudItem xs="12">
            @L.GetString("Unpassed ToDos",_toPassCharts.Count(),@DifficultyFilter)
        </MudItem>
        @foreach(var chart in _toPassCharts){
        <MudItem xs="12">
            @chart.Song.Name - @chart.DifficultyString
        </MudItem>
        }
    </MudGrid>
}

<MudDialog @bind-IsVisible="_showEditDialog">
    <DialogContent>
        @if (_selectedChartId != Guid.Empty)
        {
            <EditChartGrid ShowChartName="true" ChartId="_selectedChartId" NewAttemptRecorded="AttemptRegistered" CurrentMix="_currentMix"></EditChartGrid>
        }
    </DialogContent>
    <DialogActions>
        <MudSpacer></MudSpacer>
        <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Close" OnClick="() => _showEditDialog = false">@L["Close"]</MudButton>
    </DialogActions>
</MudDialog>
<style>
    #SettingsDrawer .mud-drawer-content {
        padding: 15px;
    }
</style>
@inject IAdminNotificationClient Notifications;
@inject ISnackbar Snackbar;
@inject IPhoenixRecordRepository PhoenixRecords;

@code {


    private MixEnum _currentMix = MixEnum.Phoenix;
    private ICollection<Chart> _overratedCharts = Array.Empty<Chart>();
    private ICollection<Chart> _veryEasyCharts = Array.Empty<Chart>();
    private ICollection<Chart> _easyCharts = Array.Empty<Chart>();
    private ICollection<Chart> _mediumCharts = Array.Empty<Chart>();
    private ICollection<Chart> _hardCharts = Array.Empty<Chart>();
    private ICollection<Chart> _veryHardCharts = Array.Empty<Chart>();
    private ICollection<Chart> _underratedCharts = Array.Empty<Chart>();
    private ICollection<Chart> _notRatedCharts = Array.Empty<Chart>();
    private ICollection<Chart> _megaStrongCharts = Array.Empty<Chart>();
    private ICollection<Chart> _veryStrongCharts = Array.Empty<Chart>();
    private ICollection<Chart> _strongCharts = Array.Empty<Chart>();
    private ICollection<Chart> _averageCharts = Array.Empty<Chart>();
    private ICollection<Chart> _weakCharts = Array.Empty<Chart>();
    private ICollection<Chart> _veryWeakCharts = Array.Empty<Chart>();
    private ICollection<Chart> _megaWeakCharts = Array.Empty<Chart>();
    private ISet<SongType> _filteredTypes = Enum.GetValues<SongType>().ToHashSet();
    private IDictionary<Guid, int> _userRatings = new Dictionary<Guid, int>();
    private int? _averageRating = null;
    private IDictionary<DifficultyLevel, IEnumerable<Chart>> _coOpLevels = new Dictionary<DifficultyLevel, IEnumerable<Chart>>();
    private ICollection<Chart> _unratedCoOps = Array.Empty<Chart>();
    private bool _showEditDialog = false;
    private bool _showSettings = false;
    private string _songFilter = string.Empty;

    private async Task UpdateRating(Guid chartId, int rating)
    {
        var result = await Mediator.Send(new UpdatePreferenceRatingCommand(_currentMix, chartId, rating));
        _userRatings[chartId] = rating;
        _chartRatings[chartId] = result;
        RefilterCharts();
        Snackbar.Add("Rating Set!", Severity.Success);
    }

    public async Task ToggleTodo(Guid chartId)
    {
        if (!_todos.Contains(chartId))
        {
            await Mediator.Send(new SaveChartToListCommand(ChartListType.ToDo, chartId));
            Snackbar.Add("Added to ToDo List!", Severity.Success);
            _todos.Add(chartId);
            if (!_passes.Contains(chartId))
            {
                var chart = (await Mediator.Send(new GetChartsQuery(_currentMix,ChartIds:new []{chartId}))).Single();
                _toPassCharts.Add(chart);
            }
        } else
        {
            await Mediator.Send(new RemoveChartFromListCommand(ChartListType.ToDo, chartId));
            Snackbar.Add("Removed from ToDo List!",Severity.Success);
            _todos.Remove(chartId);
            var chart = _toPassCharts.FirstOrDefault(p=>p.Id==chartId);
            if (chart != null)
            {
                _toPassCharts.Remove(chart);
            }
        }
        StateHasChanged();
    }
    private CoOpSortType _coOpSortType = CoOpSortType.Average;
    private ISet<Guid> _passes = new HashSet<Guid>();
    private Guid _selectedChartId = Guid.Empty;
    private ICollection<Chart> _toPassCharts = new List<Chart>();
    private bool _hideCompleted = false;
    private bool _showOnlyTodos = false;

    private void ToggleFilter(bool value, SongType type)
    {
        switch (value)
        {
            case true:
                _filteredTypes.Add(type);
                break;
            case false when _filteredTypes.Contains(type):
                _filteredTypes.Remove(type);
                break;
        }
        RefilterCharts();
    }
    private void ToggleSongSearch(string search)
    {
        _songFilter = search;
        RefilterCharts();
    }
    private void ToggleVisibility(bool hideCompleted, bool showOnlyTodos)
    {
        _hideCompleted=hideCompleted;
        _showOnlyTodos=showOnlyTodos;
        RefilterCharts();

    }
    private IEnumerable<TitleProgress> _titleProgress = Array.Empty<TitleProgress>();
    private ISet<Guid> _todos = new HashSet<Guid>();
    private TierListType _currentTierList = TierListType.Difficulty;

    private Task<IEnumerable<string>> FilterSongName(string search) => Task.FromResult(_difficultyAndTypeFilteredCharts.Values.Select(c => c.Song.Name.ToString()).Distinct().Where(
        n => n.Contains(search, StringComparison.OrdinalIgnoreCase)));
    [Parameter]
    [SupplyParameterFromQuery(Name = "Difficulty")]
    public int DifficultyFilter { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "ChartType")]
    public string ChartTypeFilter { get; set; } = string.Empty;

    private void AttemptRegistered(Chart chart, XXChartAttempt? attempt)
    {
        switch (attempt?.IsBroken??true)
        {
            case true when _passes.Contains(chart.Id):
                _passes.Remove(chart.Id);
                break;
            case false when !_passes.Contains(chart.Id):
                _passes.Add(chart.Id);
                break;
        }
        StateHasChanged();
    }

    private void EditChart(Guid chartId)
    {
        _selectedChartId = chartId;
        _showEditDialog = true;
        StateHasChanged();
    }
    private IDictionary<Guid,RecordedPhoenixScore> _phoenixScores = new Dictionary<Guid, RecordedPhoenixScore>();

    private const string TierListTypeKey = "TierLists__CurrentList";
    protected override async Task OnInitializedAsync()
    {
        _currentMix = await UiSettings.GetSelectedMix();
        _officialScoreTierListEntries = (await Mediator.Send(new GetTierListQuery("Official Scores"))).ToDictionary(s=>s.ChartId);
        _difficultyTierListEntries = (await Mediator.Send(new GetTierListQuery("Pass Count"))).ToDictionary(s => s.ChartId);
        _popularityTierListEntries = (await Mediator.Send(new GetTierListQuery("Popularity"))).ToDictionary(s => s.ChartId);
        _scoreTierListEntries = (await Mediator.Send(new GetTierListQuery("Scores"))).ToDictionary(s => s.ChartId);
        _currentTierList = Enum.TryParse<TierListType>(await UiSettings.GetSetting(TierListTypeKey), out var value) ? value : TierListType.Difficulty;
        if (_currentTierList == TierListType.MyScores && (_currentMix == MixEnum.XX || !CurrentUser.IsLoggedIn))
        {
            _currentTierList = TierListType.Difficulty;
        }
        if (_currentTierList == TierListType.Scores && _currentMix == MixEnum.XX)
        {
            _currentTierList = TierListType.Difficulty;
        }
        _todos = CurrentUser.IsLoggedIn ? (await Mediator.Send(new GetSavedChartsQuery())).Where(t=>t.ListType==ChartListType.ToDo).Select(t=>t.ChartId).ToHashSet() : new HashSet<Guid>() ;
        var isDifficultyValid = DifficultyFilter >= DifficultyLevel.Min && DifficultyFilter <= DifficultyLevel.Max;
        var isChartTypeValid = !string.IsNullOrWhiteSpace(ChartTypeFilter) && (ChartTypeFilter.Equals(ChartType.CoOp.ToString())||ChartTypeFilter.Equals(ChartType.Single.ToString()) || ChartTypeFilter.Equals(ChartType.Double.ToString()));
        if (!isDifficultyValid || !isChartTypeValid)
        {
            DifficultyFilter = isDifficultyValid ? DifficultyFilter : 18;
            ChartTypeFilter = isChartTypeValid ? ChartTypeFilter: ChartType.Double.ToString();
            NavManager.NavigateTo(NavManager.GetUriWithQueryParameters(new Dictionary<string, object?>
            {
                { "Difficulty", DifficultyFilter },
                { "ChartType", ChartTypeFilter }
            }));
        }


        _titleProgress = (await Mediator.Send(new GetTitleProgressQuery(_currentMix))).ToArray();

        if (CurrentUser.IsLoggedIn)
        {

            if (_currentMix == MixEnum.XX)
            {

                var attempts = await Mediator.Send(new GetXXBestChartAttemptsQuery(CurrentUser.User.Id));
                _passes = attempts.Where(a => !(a.BestAttempt?.IsBroken ?? true)).Select(a => a.Chart.Id).Distinct().ToHashSet();
            }
            else
            {
                var attempts = (await Mediator.Send(new GetPhoenixRecordsQuery(CurrentUser.User.Id))).ToArray();
                _phoenixScores = attempts.ToDictionary(s=>s.ChartId);
                _passes = attempts.Where(a => !a.IsBroken).Select(a => a.ChartId).Distinct().ToHashSet();
            }
            _userRatings = (await Mediator.Send(new GetUserPreferenceRatingsQuery(_currentMix))).ToDictionary(r => r.ChartId, r => (int)r.Rating);
        }
        _chartRatings = (await Mediator.Send(new GetAllPreferenceRatingsQuery(_currentMix))).ToDictionary(cr => cr.ChartId);
        await UpdateSelection(DifficultyFilter, ChartTypeFilter, _coOpSortType);
    }
    private IDictionary<Guid,Chart> _difficultyAndTypeFilteredCharts = new Dictionary<Guid,Chart>();
    private IDictionary<Guid, ChartDifficultyRatingRecord> _ratings = new Dictionary<Guid, ChartDifficultyRatingRecord>();
    private IDictionary<Guid, CoOpRating> _coOpRatings = new Dictionary<Guid, CoOpRating>();
    private IDictionary<Guid, ChartPreferenceRatingRecord> _chartRatings = new Dictionary<Guid, ChartPreferenceRatingRecord>();
    private IDictionary<Guid, IEnumerable<RecordedPhoenixScore>> _allPhoenixScores = new Dictionary<Guid, IEnumerable<RecordedPhoenixScore>>();
    private IDictionary<Guid, SongTierListEntry> _officialScoreTierListEntries = new Dictionary<Guid, SongTierListEntry>();
    private IDictionary<Guid, SongTierListEntry> _popularityTierListEntries = new Dictionary<Guid, SongTierListEntry>();
    private IDictionary<Guid, SongTierListEntry> _difficultyTierListEntries = new Dictionary<Guid, SongTierListEntry>();
    private IDictionary<Guid, SongTierListEntry> _scoreTierListEntries = new Dictionary<Guid, SongTierListEntry>();
    private void RefilterCharts()
    {

        _overratedCharts = new List<Chart>();
        _veryEasyCharts = new List<Chart>();
        _easyCharts = new List<Chart>();
        _mediumCharts = new List<Chart>();
        _hardCharts = new List<Chart>();
        _veryHardCharts = new List<Chart>();
        _underratedCharts = new List<Chart>();
        _notRatedCharts = new List<Chart>();
        _megaWeakCharts = new List<Chart>();
        _veryWeakCharts = new List<Chart>();
        _weakCharts = new List<Chart>();
        _averageCharts = new List<Chart>();
        _strongCharts = new List<Chart>();
        _veryStrongCharts = new List<Chart>();
        _megaStrongCharts = new List<Chart>();
        var filtered = _difficultyAndTypeFilteredCharts.Values.Where(c=>_filteredTypes.Contains(c.Song.Type));
        if (_hideCompleted)
        {
            filtered = filtered.Where(c => !_passes.Contains(c.Id));
        }
        if (_showOnlyTodos)
        {
            filtered = filtered.Where(c => _todos.Contains(c.Id));
        }
        if (!string.IsNullOrWhiteSpace(_songFilter))
        {
            filtered = filtered.Where(c => c.Song.Name.ToString().Contains(_songFilter, StringComparison.OrdinalIgnoreCase));
        }
        switch (_currentTierList)
        {

            case TierListType.CompareToOfficial:

                var filteredCompareScoreArray = filtered.Where(c => _phoenixScores.ContainsKey(c.Id) && _phoenixScores[c.Id].Score != null)
                    .OrderBy(c => _phoenixScores.ContainsKey(c.Id) ? (int)(_phoenixScores[c.Id]?.Score ?? 0) : 0).ToArray();
                if (!filteredCompareScoreArray.Any())
                {
                    foreach (var chart in filtered)
                    {
                        _notRatedCharts.Add(chart);
                    }
                    return;
                }
                var standardDeviationCompare = StdDev(filteredCompareScoreArray.Select(s => (int)(_phoenixScores[s.Id].Score ?? 0)), true);
                var averageCompare = filteredCompareScoreArray.Average(s => (int)(_phoenixScores[s.Id]?.Score ?? 0));
                var mediumMinCompare = averageCompare - standardDeviationCompare / 2;
                var easyMinCompare = averageCompare + standardDeviationCompare / 2;
                var veryEasyMinCompare = averageCompare + standardDeviationCompare;
                var oneLevelOverratedCompare = averageCompare + standardDeviationCompare * 1.5;
                var hardMinCompare = averageCompare - standardDeviationCompare;
                var veryHardMinCompare = averageCompare - standardDeviationCompare * 1.5;
                var chartIdsCompare = filteredCompareScoreArray.Select(c => c.Id).ToHashSet();
                var compareTo = DifficultyFilter >= 20 ? _officialScoreTierListEntries : _scoreTierListEntries;
                foreach (var chart in filteredCompareScoreArray)
                {
                    if (!compareTo.TryGetValue(chart.Id, out var officialEntry))
                    {
                        _notRatedCharts.Add(chart);
                        continue;
                    }
                    var score = (int)(_phoenixScores[chart.Id]?.Score ?? 0);
                    var myCategory = TierListCategory.Overrated;
                    if (score < veryHardMinCompare)
                    {
                        myCategory = TierListCategory.Underrated;
                    }
                    else if (score < hardMinCompare)
                    {
                        myCategory = TierListCategory.VeryHard;
                    }
                    else if (score < mediumMinCompare)
                    {
                        myCategory = TierListCategory.Hard;
                    }
                    else if (score < easyMinCompare)
                    {
                        myCategory = TierListCategory.Medium;
                    }
                    else if (score < veryEasyMinCompare)
                    {
                        myCategory = TierListCategory.Easy;
                    }
                    else if (score < oneLevelOverratedCompare)
                    {
                        myCategory = TierListCategory.VeryEasy;
                    }
                    else
                    {
                        myCategory = TierListCategory.Overrated;
                    }
                    var diff = officialEntry.Category - myCategory;
                    switch (diff)
                    {
                        case > 2:
                            _megaStrongCharts.Add(chart);
                            break;
                        case > 1:
                            _veryStrongCharts.Add(chart);
                            break;
                        case > 0:
                            _strongCharts.Add(chart);
                            break;
                        case > -1:
                            _averageCharts.Add(chart);
                            break;
                        case > -2:
                            _weakCharts.Add(chart);
                            break;
                        case > -3:
                            _veryWeakCharts.Add(chart);
                            break;
                        default:
                            _megaWeakCharts.Add(chart);
                            break;
                    }
                }
                foreach (var chart in filtered.Where(c => !chartIdsCompare.Contains(c.Id)))
                {
                    _notRatedCharts.Add(chart);
                }
                break;
            case TierListType.OfficialScores:

                foreach (var chart in filtered.OrderByDescending(c=>_officialScoreTierListEntries.TryGetValue(c.Id, out var entry)?entry.Order:0))
                {
                    if (!_officialScoreTierListEntries.TryGetValue(chart.Id, out var score))
                    {
                        _notRatedCharts.Add(chart);
                        continue;
                    }
                    switch (score.Category)
                    {
                        case TierListCategory.Overrated:
                            _overratedCharts.Add(chart);
                            break;
                        case TierListCategory.VeryEasy:
                            _veryEasyCharts.Add(chart);
                            break;
                        case TierListCategory.Easy:
                            _easyCharts.Add(chart);
                            break;
                        case TierListCategory.Medium:
                            _mediumCharts.Add(chart);
                            break;
                        case TierListCategory.Hard:
                            _hardCharts.Add(chart);
                            break;
                        case TierListCategory.VeryHard:
                            _veryHardCharts.Add(chart);
                            break;
                        case TierListCategory.Underrated:
                            _underratedCharts.Add(chart);
                            break;
                        default:
                            _notRatedCharts.Add(chart);
                            break;
                    }
                }
                break;
            case TierListType.Difficulty:
            {
                var type = Enum.Parse<ChartType>(ChartTypeFilter);
                if (type is ChartType.Single or ChartType.Double)
                {
                    foreach (var chart in filtered.OrderByDescending(c=>_difficultyTierListEntries.TryGetValue(c.Id, out var entry)?entry.Order:0))
                    {
                            if (!_difficultyTierListEntries.TryGetValue(chart.Id, out var score))
                        {
                            _notRatedCharts.Add(chart);
                            continue;
                        }
                        switch (score.Category)
                        {
                            case TierListCategory.Overrated:
                                _overratedCharts.Add(chart);
                                break;
                            case TierListCategory.VeryEasy:
                                _veryEasyCharts.Add(chart);
                                break;
                            case TierListCategory.Easy:
                                _easyCharts.Add(chart);
                                break;
                            case TierListCategory.Medium:
                                _mediumCharts.Add(chart);
                                break;
                            case TierListCategory.Hard:
                                _hardCharts.Add(chart);
                                break;
                            case TierListCategory.VeryHard:
                                _veryHardCharts.Add(chart);
                                break;
                            case TierListCategory.Underrated:
                                _underratedCharts.Add(chart);
                                break;
                            default:
                                _notRatedCharts.Add(chart);
                                break;
                        }
                    }
                }
                else
                {
                
                    var filteredCoOpArray = filtered.ToArray();
                    _unratedCoOps = filteredCoOpArray.Where(c => !_ratings.ContainsKey(c.Id)).ToArray();
                    _coOpLevels = filteredCoOpArray.Where(c => _coOpRatings.ContainsKey(c.Id)).GroupBy(c => _coOpSortType == CoOpSortType.Average ? _coOpRatings[c.Id].Average :
                        _coOpSortType == CoOpSortType.EasiestPlayer ? _coOpRatings[c.Id].Minimum :
                            _coOpRatings[c.Id].Maximum).ToDictionary(c => c.Key, c => c.ToArray().AsEnumerable());
                }
                break;
            }
            case TierListType.Scores:
            {
                foreach (var chart in filtered.OrderByDescending(c=>_scoreTierListEntries.TryGetValue(c.Id, out var entry)?entry.Order:0))
                {
                        if (!_scoreTierListEntries.TryGetValue(chart.Id, out var score))
                    {
                        _notRatedCharts.Add(chart);
                        continue;
                    }
                    switch (score.Category)
                    {
                        case TierListCategory.Overrated:
                            _overratedCharts.Add(chart);
                            break;
                        case TierListCategory.VeryEasy:
                            _veryEasyCharts.Add(chart);
                            break;
                        case TierListCategory.Easy:
                            _easyCharts.Add(chart);
                            break;
                        case TierListCategory.Medium:
                            _mediumCharts.Add(chart);
                            break;
                        case TierListCategory.Hard:
                            _hardCharts.Add(chart);
                            break;
                        case TierListCategory.VeryHard:
                            _veryHardCharts.Add(chart);
                            break;
                        case TierListCategory.Underrated:
                            _underratedCharts.Add(chart);
                            break;
                        default:
                            _notRatedCharts.Add(chart);
                            break;
                    }
                }
                break;
            }
            case TierListType.MyScores:
            {
                var filteredMyScoreArray = filtered.Where(c=>_phoenixScores.ContainsKey(c.Id) && _phoenixScores[c.Id].Score!=null) 
                    .OrderBy(c => _phoenixScores.ContainsKey(c.Id) ? (int)(_phoenixScores[c.Id]?.Score??0) : 0).ToArray(); 
                if (!filteredMyScoreArray.Any()) 
                {
                    foreach (var chart in filtered)
                    {
                        _notRatedCharts.Add(chart);
                    }
                    return; 
                }   
                var standardDeviation = StdDev(filteredMyScoreArray.Select(s => (int)(_phoenixScores[s.Id].Score ?? 0)), true); 
                var average = filteredMyScoreArray.Average(s => (int)(_phoenixScores[s.Id]?.Score ?? 0)); 
                var mediumMin = average - standardDeviation / 2; 
                var easyMin = average + standardDeviation / 2; 
                var veryEasyMin = average + standardDeviation; 
                var oneLevelOverrated = average + standardDeviation * 1.5; 
                var hardMin = average - standardDeviation; 
                var veryHardMin = average - standardDeviation * 1.5;
                var chartIds = filteredMyScoreArray.Select(c => c.Id).ToHashSet();
                    foreach (var chart in filteredMyScoreArray)
                {
                    var score = (int)(_phoenixScores[chart.Id]?.Score ?? 0);
                    if (score < veryHardMin)
                    {
                        _underratedCharts.Add(chart);
                    }
                    else if (score < hardMin)
                    {
                        _veryHardCharts.Add(chart);
                    }
                    else if (score < mediumMin)
                    {
                        _hardCharts.Add(chart);
                    }
                    else if (score < easyMin)
                    {
                        _mediumCharts.Add(chart);
                    }
                    else if (score < veryEasyMin)
                    {
                        _easyCharts.Add(chart);
                    }
                    else if (score < oneLevelOverrated)
                    {
                        _veryEasyCharts.Add(chart);
                    }
                    else
                    {
                        _overratedCharts.Add(chart);
                    }
                }
                foreach (var chart in filtered.Where(c => !chartIds.Contains(c.Id)))
                {
                    _notRatedCharts.Add(chart);
                }
                break;
            }
            case TierListType.Popularity:
                foreach (var chart in filtered.OrderByDescending(c => _popularityTierListEntries.TryGetValue(c.Id, out var entry) ? entry.Order : 0))
                {
                    if (!_popularityTierListEntries.TryGetValue(chart.Id, out var score))
                    {
                        _notRatedCharts.Add(chart);
                        continue;
                    }
                    switch (score.Category)
                    {
                        case TierListCategory.Overrated:
                            _overratedCharts.Add(chart);
                            break;
                        case TierListCategory.VeryEasy:
                            _veryEasyCharts.Add(chart);
                            break;
                        case TierListCategory.Easy:
                            _easyCharts.Add(chart);
                            break;
                        case TierListCategory.Medium:
                            _mediumCharts.Add(chart);
                            break;
                        case TierListCategory.Hard:
                            _hardCharts.Add(chart);
                            break;
                        case TierListCategory.VeryHard:
                            _veryHardCharts.Add(chart);
                            break;
                        case TierListCategory.Underrated:
                            _underratedCharts.Add(chart);
                            break;
                        default:
                            _notRatedCharts.Add(chart);
                            break;
                    }
                }
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }

        StateHasChanged();
    }
    public static double StdDev(IEnumerable<int> values,
        bool as_sample)
    {
    // Get the mean.
        double mean = values.Sum() / values.Count();

    // Get the sum of the squares of the differences
    // between the values and the mean.
        var squares_query =
            from int value in values
            select (value - mean) * (value - mean);
        double sum_of_squares = squares_query.Sum();

        if (as_sample)
        {
            return Math.Sqrt(sum_of_squares / (values.Count() - 1));
        }
        else
        {
            return Math.Sqrt(sum_of_squares / values.Count());
        }
    }
    private async Task SetTierList(TierListType newType)
    {
        _currentTierList = newType;
        if (newType == TierListType.MyScores)
        {
            _hideCompleted = false;
            _showOnlyTodos = false;
        }
        await UiSettings.SetSetting(TierListTypeKey, newType.ToString());
        RefilterCharts();
    }
    private async Task UpdateSelection(int difficulty, string chartType, CoOpSortType coOpSortType)
    {
        _coOpSortType = coOpSortType;
        if (chartType == "CoOp" && difficulty > 5)
        {
            difficulty = 2;
        }
        if (DifficultyFilter != difficulty || ChartTypeFilter != chartType)
        {
            NavManager.NavigateTo(NavManager.GetUriWithQueryParameters(new Dictionary<string, object?>
            {
                { "Difficulty", difficulty },
                { "ChartType", chartType }
            }));
            DifficultyFilter = difficulty;
            ChartTypeFilter = chartType;
        }
        var type = Enum.Parse<ChartType>(chartType);
        var charts = (await Mediator.Send(new GetChartsQuery(_currentMix, difficulty))).ToDictionary(c=>c.Id);
        if (type is ChartType.Single or ChartType.Double)
        {
            var ratings = (await Mediator.Send(new GetChartRatingsQuery(_currentMix, difficulty))).ToArray();
            if(_currentMix == MixEnum.Phoenix){
                var passingScores = _phoenixScores.Values.Where(a => !a.IsBroken && charts.ContainsKey(a.ChartId)).ToDictionary(s => s.ChartId);
                _toPassCharts = _todos.Where(t => charts.ContainsKey(t) && !passingScores.ContainsKey(t)).Select(t=>charts[t]).ToList();

            }
            if (type == ChartType.Single)
            {
                _difficultyAndTypeFilteredCharts = charts.Values.Where(c => c.Type is ChartType.Single or ChartType.SinglePerformance).ToDictionary(c => c.Id);

                _ratings = ratings.Where(r => charts[r.ChartId].Type is ChartType.Single or ChartType.SinglePerformance).ToDictionary(c=>c.ChartId);

            }
            else
            {

                _difficultyAndTypeFilteredCharts = charts.Values.Where(c => c.Type is ChartType.Double or ChartType.DoublePerformance).ToDictionary(c => c.Id);

                _ratings = ratings.Where(r => charts[r.ChartId].Type is ChartType.Double or ChartType.DoublePerformance).ToDictionary(c => c.ChartId);
            }
        }
        else
        {
            
            _difficultyAndTypeFilteredCharts = (await Mediator.Send(new GetChartsQuery(_currentMix, null, ChartType.CoOp))).Where(c => c.PlayerCount == DifficultyFilter).ToDictionary(c=>c.Id);
            _coOpRatings = (await Mediator.Send(new GetCoOpRatingsQuery())).ToDictionary(c => c.ChartId);


        }
        if (_currentMix == MixEnum.Phoenix)
        {
            var matchingScores = _phoenixScores.Values.Where(a => a is { IsBroken: false,Score: { } } && charts.ContainsKey(a.ChartId)).ToDictionary(s=>s.ChartId);
            var baseRating = type==ChartType.CoOp?2000:DifficultyLevel.From(difficulty).BaseRating;
            _averageRating = matchingScores.Any() ? (int)matchingScores.Values.Average(s => s.Score!.Value.LetterGrade.GetModifier() * baseRating) : null;
        }
        else
        {
            _averageRating = 0;
        }
        _allPhoenixScores = (await PhoenixRecords.GetAllPlayerScores(type, difficulty)).GroupBy(r => r.userId)
            .ToDictionary(g => g.Key, g => g.Select(i=>i.record).ToArray().AsEnumerable());
    
        RefilterCharts();
    }

    private enum CoOpSortType
    {
        EasiestPlayer,
        HardestPlayer,
        Average
    }
    
}
