@page "/Tournament/{TournamentId:guid}/Record"
@using ScoreTracker.Domain.SecondaryPorts
@using MediatR
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.Models

<PageTitle>Submit Tournament Session</PageTitle>
@if (_session != null)
{
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h4">Build Session - @_session.TotalScore Total Points</MudText>
        </MudItem>
        @foreach (var entry in _session.Entries)
        {
            <MudItem xs="6" sm="3" md="2">
                <MudCard>
                    <MudCardMedia Height="100" Image="@entry.Chart.Song.ImagePath.ToString()" />
                    <MudCardActions>
                        <MudText>
                            @entry.Score
                        </MudText>
                        <MudTooltip Text="Remove">
                            <MudIconButton Disabled="_isSaving" Icon="@Icons.Material.Filled.Delete" OnClick="@(()=>_session.Remove(entry))"></MudIconButton>
                        </MudTooltip>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
        <MudItem xs="6" sm="3" md="2">
            <MudButton Disabled="_isSaving" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Variant="Variant.Outlined" OnClick="ShowAddDialog">Add Chart</MudButton>
        </MudItem>
        <MudItem xs="12">
            <MudButton Disabled="_isSaving" StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary" Variant="Variant.Outlined" OnClick="Save">Save</MudButton>
        </MudItem>
    </MudGrid>
    <MudDialog @bind-IsVisible="_showAddDialog">
        <DialogContent>
            <MudGrid>
                <MudItem xs="12">
                    <MudAutocomplete T="string"
                                     @ref="_autocomplete"
                                     Value="@_songSearchString"
                                     AdornmentIcon="@Icons.Material.Filled.Search"
                                     ResetValueOnEmptyText="true"
                                     CoerceText="true"
                                     Label="Song"
                                     SearchFunc="Search"
                                     ValueChanged="@SelectSong">

                    </MudAutocomplete>
                </MudItem>
                <MudItem sm="4" xs="12">
                    <MudSelect T="Chart" Label="Chart" @bind-Value="_selectedChart">
                        @foreach (var chart in Charts)
                        {
                            <MudSelectItem Value="chart">@chart.DifficultyString</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem sm="4" xs="12">
                    <MudNumericField T="int" Label="Score" @bind-Value="_score" Min="0" Max="1000000" Variant="Variant.Text" Clearable="false" HideSpinButtons="true"></MudNumericField>
                </MudItem>
                <MudItem sm="4" xs="12">

                    <MudSelect T="PhoenixPlate" Label="Plate" @bind-Value="_plate" Margin="@Margin.Dense">
                        @foreach (var plate in Enum.GetValues<PhoenixPlate>())
                        {
                            <MudSelectItem T="PhoenixPlate" Value="@plate">@plate.GetName()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                
                <MudItem sm="4" xs="12">
                    <MudCheckBox T="bool" @bind-Checked="@_isBroken" Label="Broken"></MudCheckBox>
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudSpacer></MudSpacer>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="AddChart" Disabled="_selectedChart==null">Add</MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Close" OnClick="() => _showAddDialog = false">Close</MudButton>
        </DialogActions>
    </MudDialog>
}
@inject IMediator Mediator
@inject ICurrentUserAccessor CurrentUser;
@inject ITournamentRepository TournamentRepository;
@inject NavigationManager NavManager;
@inject ISnackbar Snackbar;
@code
{

    private MudAutocomplete<string> _autocomplete;
    [Parameter] public Guid TournamentId { get; set; }
    private PhoenixPlate _plate = PhoenixPlate.MarvelousGame;
    private bool _isBroken = false;
    private int _score = 0;
    private TournamentSession? _session;
    private TournamentConfiguration _configuration = new TournamentConfiguration();
    private IEnumerable<Chart> _allCharts = Array.Empty<Chart>();
    private Chart? _selectedChart;
    private string _songSearchString = string.Empty;
    private Chart[] Charts = Array.Empty<Chart>();
    private IEnumerable<Chart> ValidCharts => _allCharts.Where(c => _session?.CanAdd(c) ?? false);
    private IEnumerable<string> SongNames => ValidCharts.Select(c => c.Song.Name.ToString()).Distinct(StringComparer.OrdinalIgnoreCase);
    private bool _showAddDialog = false;
    private bool _isSaving = false;
    private Task<IEnumerable<string>> Search(string song) => Task.FromResult(SongNames.Where(n => n.ToLower().Contains(song.ToLower())).ToArray().AsEnumerable());
    private async Task SelectSong(string songName)
    {

        if (_autocomplete.IsOpen)
        {
            await _autocomplete.ToggleMenu();
        }
        Charts = ValidCharts.Where(c => c.Song.Name == songName).OrderBy(c => c.Type).ThenBy(c => (int)c.Level).ToArray();
        _songSearchString = songName;

    }
    public string DifficultyBubblePath(Chart chart) =>
        $"https://piuimages.arroweclip.se/difficulty/{chart.DifficultyString.ToLower()}.png";
    private void AddChart()
    {
        _session?.Add(_selectedChart!, _score, _plate, _isBroken);
        _selectedChart = null;
        _songSearchString = string.Empty;
        _score = 0;
        Snackbar.Add("Chart Added",Severity.Success);

    }

    private void ShowAddDialog()
    {
        _showAddDialog = true;
        _selectedChart = null;
        _songSearchString = string.Empty;
    }

    private async Task Save()
    {
        _isSaving = true;
        await TournamentRepository.SaveSession(_session!, CancellationToken.None);
        _isSaving = false;
        Snackbar.Add("Session Saved!", Severity.Success);
    }
    protected override async Task OnInitializedAsync()
    {
        if (!CurrentUser.IsLoggedIn)
        {
            NavManager.NavigateTo("/Tournaments");
        }
        _configuration = await Mediator.Send(new GetTournamentQuery(TournamentId));
        _session = await TournamentRepository.GetSession(TournamentId, CurrentUser.User.Id,CancellationToken.None);
        _allCharts = await Mediator.Send(new GetChartsQuery(MixEnum.Phoenix));
    }
}
