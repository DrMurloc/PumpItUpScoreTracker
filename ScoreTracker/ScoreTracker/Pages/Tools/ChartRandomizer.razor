@page "/ChartRandomizer"
@using MediatR
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.Models;
@using ScoreTracker.Domain.SecondaryPorts
@using ChartType = ScoreTracker.Domain.Enums.ChartType
@using System.Text.Json
@using MassTransit.Configuration
@using Microsoft.Extensions.Options
@using ScoreTracker.Application.Commands
@using ScoreTracker.Domain.Exceptions
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Web.Components
<PageTitle>Chart Randomizer</PageTitle>

@if (!CurrentUser.IsLoggedIn)
{
    <MudText Color="Color.Error" Typo="Typo.body1">You are not logged in, your configuration and results will be lost if you refresh.</MudText>
}
@if (CurrentUser.IsLoggedIn)
{
    <MudGrid>
        @if (_savedSettings.Any())
        {
            
            <MudItem xs="12">
                <MudSelect T="string" Value="_currentSettings" ValueChanged="SelectSettings" Label=@L["Saved Settings"] Clearable="true">
                    @foreach (var kv in _savedSettings.OrderBy(kv=>kv.Key))
                    {
                        <MudSelectItem T="string" Value="kv.Key">@kv.Key</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        }
        <MudItem xs="12" sm="8">
            <MudTextField T="string" @bind-Value="_newSettingsName" Label=@L["Settings Name"]></MudTextField>
        </MudItem>
        <MudItem xs="6" sm="2">
            <MudButton Color="Color.Primary" Disabled="_isSaving || string.IsNullOrWhiteSpace(_newSettingsName)" OnClick="SaveSettings" StartIcon="@Icons.Material.Filled.Save">@L["Save"]</MudButton>
        </MudItem>
        <MudItem xs="6" sm="2">
            @if (_savedSettings.ContainsKey(_newSettingsName))
            {
                <MudButton Color="Color.Warning" Disabled="_isSaving" OnClick="DeleteSettings" StartIcon="@Icons.Material.Filled.DeleteForever">@L["Delete"]</MudButton>
            }
        </MudItem>
    </MudGrid>
    <br/>
}
<RandomizerSettingsConfiguration Settings="_settings" ></RandomizerSettingsConfiguration>
<br/>
<MudGrid>
    <MudItem md="4" sm="6" xs="12">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="RandomizeCharts">Randomize Charts</MudButton>
    </MudItem>
</MudGrid>
<br/>
<MudGrid>
    @for (var i=0;i<_pulledCharts.Length;i++)
    {
        var chart = _pulledCharts[i];
        var index = i;
        <MudItem xs="12" sm="6" md="4" lg="3" xl="2">
            <MudCard Class="border-solid border-2" Style="@CardStyle(index)">
                <MudCardMedia Height="300" Image="@chart.Song.ImagePath.ToString()" />
                <MudCardActions>

                    @if (_videos.ContainsKey(chart.Id))
                    {
                        <MudTooltip Text="Open Embeded Video">
                            <MudIconButton Icon="@Icons.Custom.Brands.YouTube" OnClick="@(() => ShowVideo(chart))"></MudIconButton>
                        </MudTooltip>
                    }
                    else
                    {
                        <MudTooltip Text="Open Youtube Search for Chart">
                            <MudIconButton Icon="@Icons.Material.Filled.Search" Href="@ChartSearch(chart)" Target="_blank"></MudIconButton>
                        </MudTooltip>
                    }
                    @if (!_protectedCharts.Contains(index) && !_vetoedCharts.Contains(index))
                    {
                        <MudTooltip Text="Protect">
                            <MudIconButton Icon="@Icons.Material.Filled.Shield" OnClick="@(()=>ProtectChart(index))" Color="Color.Success"></MudIconButton>
                        </MudTooltip>
                        <MudTooltip Text="Veto">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(()=>VetoChart(index))" Color="Color.Error"></MudIconButton>
                        </MudTooltip>
                    }
                    <MudSpacer></MudSpacer>
                    
                    <DifficultyBubble Chart="chart"></DifficultyBubble>
                </MudCardActions>
            </MudCard>
        </MudItem>
    }
    @if (_vetoedCharts.Any())
    {
        <MudItem xs="12">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="RemoveVetoedCharts">Remove Vetoed Charts</MudButton>
        </MudItem>
    }
</MudGrid>
<MudDialog @bind-IsVisible="_showVideoDialog">
    <DialogContent>
        <iframe class="video"
                id="chartVideoFrame"
                src="@(_currentVideo + "?autoplay=1")"
                allow="autoplay; encrypted-media"
                allowfullscreen></iframe>
    </DialogContent>

    <DialogActions>
        <MudSpacer></MudSpacer>
        <MudTooltip Text=@L["Report Video Tooltip"]>
            <MudButton OnClick="NotifyBadVideo" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Report">Report Video</MudButton>
        </MudTooltip>
        <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Close" OnClick="()=>_showVideoDialog=false">Close</MudButton>
    </DialogActions>
</MudDialog>

@inject IMediator Mediator
@inject ISnackbar Snackbar;
@inject ICurrentUserAccessor CurrentUser;
@inject ILogger<ChartRandomizer> Logger;
@inject IAdminNotificationClient Notifications;
@inject IOptions<JsonSerializerOptions> JsonOptions;
@code {

    private string CardStyle(int chartOrder) => _protectedCharts.Contains(chartOrder) ? $@"border-color:{Colors.Green.Darken1}" :
        _vetoedCharts.Contains(chartOrder) ? $@"border-color:{Colors.Red.Darken1}" : "";
    private RandomSettings _settings = new RandomSettings();

    private int _count = 3;
    private bool _showVideoDialog = false;
    private string _currentVideoDescription = string.Empty;
    private string _currentVideo = string.Empty;
    private string _newSettingsName = string.Empty;
    private string _currentSettings = string.Empty;
    private Chart[] _pulledCharts = Array.Empty<Chart>();
    private List<int> _protectedCharts = new ();
    private List<int> _vetoedCharts = new();
    private IDictionary<Guid, string> _videos = new Dictionary<Guid, string>();
    private IDictionary<string, RandomSettings> _savedSettings = new Dictionary<string, RandomSettings>(StringComparer.OrdinalIgnoreCase);
    private async Task NotifyBadVideo()
    {
        await Notifications.NotifyAdmin($"The video for{_currentVideoDescription} was reported by {(CurrentUser.IsLoggedIn?CurrentUser.User.Name:"Unknown")}", CancellationToken.None);
        Snackbar.Add("Notification was sent", Severity.Success);
    }

    private async Task ProtectChart(int order)
    {
        _protectedCharts.Add(order);
        await SaveLastResults();
    }

    private async Task VetoChart(int order)
    {
        _vetoedCharts.Add(order);
        await SaveLastResults();
    }
    private async Task RemoveVetoedCharts()
    {
        
        //God only knows how this works anymore.
        //Because I have an "allow repeats" option index is the only way I can track protect/vetos.
        //Possibly could clean up with usage of GUIDs to keep track of specific pulls instead of index but whatever.
        var newCharts = new List<Chart>();
        var offset = 0;
        for(var i=0; i<_pulledCharts.Length-offset;i++)
        {
            if (_vetoedCharts.Contains(i))
            {
                for (var j = 0; j < _protectedCharts.Count; j++)
                {
                    if (_protectedCharts[j] > i)
                    {
                        _protectedCharts[j]--;
                    }
                }
                for (var j = 0; j < _vetoedCharts.Count; j++)
                {
                    if (_vetoedCharts[j] == i)
                    {
                        _vetoedCharts[j] = -1;
                    }
                    else if (_vetoedCharts[j] > i)
                    {
                        _vetoedCharts[j]--;
                    }
                }
                offset++;
                i--;
            }
            else
            {
                newCharts.Add(_pulledCharts[i+offset]);
            }
        }
        _vetoedCharts.Clear();
        _pulledCharts = newCharts.ToArray();
        await SaveLastResults();
    }
    private void ShowVideo(Chart chart)
    {
        _currentVideo = _videos[chart.Id];
        _currentVideoDescription = $"{chart.Song.Name} {chart.DifficultyString}";
        _showVideoDialog = true;
    }

    private async Task SaveLastResults()
    {
        if (CurrentUser.IsLoggedIn)
        {
            var savedResults = JsonSerializer.Serialize(new SavedResults
                {
                    ChartList = _pulledCharts.Select(c => c.Id).ToArray(),
                    ProtectedCharts = _protectedCharts.ToArray(),
                    VetoedCharts = _vetoedCharts.ToArray()
                });
            await Mediator.Send(new SaveUserUiSettingCommand(LastResultsKey, savedResults));
        }

    }

    private async Task SaveLastConfig()
    {
        if (CurrentUser.IsLoggedIn)
        {
            var savedResults = JsonSerializer.Serialize(new SavedConfiguration()
            {
                Count=_count,
                AllowRepeats = _settings.AllowRepeats,
                    ChartTypeWeights = _settings.ChartTypeWeights,
                LevelWeights = _settings.LevelWeights,
                    PlayerCountWeights = _settings.PlayerCountWeights,
                DoubleWeights = _settings.DoubleLevelWeights,
                SongTypeWeights = _settings.SongTypeWeights,
                UseScoring = _settings.UseScoringLevels,
                ChartTypeLevelMinimums = _settings.ChartTypeLevelMinimums,
                ChartTypeMinimums = _settings.ChartTypeMinimums,
                LevelMinimums = _settings.LevelMinimums
            });
            
            await Mediator.Send(new SaveUserUiSettingCommand(LastConfigKey, savedResults));
        }
    }

    private void SelectSettings(string newSettings)
    {
        _currentSettings = newSettings;
        _newSettingsName = newSettings;
        if (string.IsNullOrWhiteSpace(newSettings))
        {
            _settings = new RandomSettings();
            return;
        }
        _settings = JsonSerializer.Deserialize<RandomSettings>(JsonSerializer.Serialize(_savedSettings[newSettings], JsonOptions.Value), JsonOptions.Value) ?? new RandomSettings();
    }

    private bool _isSaving = false;
    private async Task SaveSettings()
    {
        _isSaving = true;
        await Mediator.Send(new SaveUserRandomSettingsCommand(_newSettingsName, _settings));
        _savedSettings[_newSettingsName] = JsonSerializer.Deserialize<RandomSettings>(JsonSerializer.Serialize(_settings, JsonOptions.Value), JsonOptions.Value) ?? new RandomSettings();
        _isSaving = false;
    }

    private async Task DeleteSettings()
    {
        _isSaving = true;
        await Mediator.Send(new DeleteRandomSettingsCommand(_newSettingsName));
        _savedSettings.Remove(_newSettingsName);
        _newSettingsName = string.Empty;
        _currentSettings = string.Empty;
        _settings = new RandomSettings();
        _isSaving = false;
    }
    private async Task RandomizeCharts()
    {
        await SaveLastConfig();

        try
        {
            _pulledCharts = (await Mediator.Send(new GetRandomChartsQuery(_settings))).ToArray();
            _protectedCharts = new();
            _vetoedCharts = new();
        }
        catch (RandomizerException e)
        {
            Snackbar.Add(e.Message, Severity.Warning);
            return;
        }
        await SaveLastResults();
    }

        const string LastResultsKey = $"ChartRandomizer__LastResults";
        const string LastConfigKey = $"ChartRandomizer__LastConfig";

    private void MergeDictTo<T>(IDictionary<T, int?> from, IDictionary<T, int?> to)
    {
        foreach (var kv in from)
        {
            if (!to.ContainsKey(kv.Key))
            {
                to[kv.Key] = kv.Value;
            }
        }
    }
    private void MergeDictTo<T>(IDictionary<T, int> from, IDictionary<T, int> to)
    {
        foreach (var kv in from)
        {
            if (!to.ContainsKey(kv.Key))
            {
                to[kv.Key] = kv.Value;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {

        _videos = (await Mediator.Send(new GetChartVideosQuery())).ToDictionary(cv => cv.ChartId, cv => cv.VideoUrl.ToString());
        if (CurrentUser.IsLoggedIn)
        {
            _savedSettings = (await Mediator.Send(new GetRandomSettingsQuery())).ToDictionary(r => r.SettingsName.ToString(), r => r.Settings);
            var uiSettings = await Mediator.Send(new GetUserUiSettingsQuery());
            if (uiSettings.TryGetValue(LastResultsKey, out var uiSetting))
            {
                try
                {
                    var lastResults = JsonSerializer.Deserialize<SavedResults>(uiSetting)?? throw new ArgumentNullException($"Couldn't deserialize Saved  Results settings for Chart Randomizer");

                    var charts = (await Mediator.Send(new GetChartsQuery(MixEnum.Phoenix, ChartIds: lastResults.ChartList))).ToDictionary(c => c.Id);
                    _pulledCharts = lastResults.ChartList.Select(id => charts[id]).ToArray();
                    _protectedCharts = lastResults.ProtectedCharts.ToList();
                    _vetoedCharts = lastResults.VetoedCharts.ToList();
                }
                catch (Exception e)
                {
                    Logger.LogWarning(e,$"There was an issue deserializing LastResults");
                }
            }
            if (uiSettings.TryGetValue(LastConfigKey, out var setting))
            {
                try
                {
                    var lastConfig = JsonSerializer.Deserialize<SavedConfiguration>(setting) ?? throw new ArgumentNullException($"Couldn't deserialize configuration for Chart Randomizer");
                    MergeDictTo(_settings.LevelWeights, lastConfig.LevelWeights);
                    _settings.LevelWeights = lastConfig.LevelWeights;
                    MergeDictTo(_settings.DoubleLevelWeights,lastConfig.DoubleWeights);
                    _settings.DoubleLevelWeights = lastConfig.DoubleWeights;
                    MergeDictTo(_settings.PlayerCountWeights, lastConfig.PlayerCountWeights);
                    _settings.PlayerCountWeights = lastConfig.PlayerCountWeights;
                    MergeDictTo(_settings.ChartTypeWeights, lastConfig.ChartTypeWeights);
                    _settings.ChartTypeWeights = lastConfig.ChartTypeWeights;
                    MergeDictTo(_settings.SongTypeWeights, lastConfig.SongTypeWeights);
                    _settings.SongTypeWeights = lastConfig.SongTypeWeights;
                    MergeDictTo(_settings.LevelMinimums, lastConfig.LevelMinimums);
                    _settings.LevelMinimums = lastConfig.LevelMinimums;
                    MergeDictTo(_settings.ChartTypeMinimums, lastConfig.ChartTypeMinimums);
                    _settings.ChartTypeMinimums = lastConfig.ChartTypeMinimums;
                    MergeDictTo(_settings.ChartTypeLevelMinimums, lastConfig.ChartTypeLevelMinimums);
                    _settings.ChartTypeLevelMinimums = lastConfig.ChartTypeLevelMinimums;

                    _settings.UseScoringLevels = lastConfig.UseScoring;
                    _settings.AllowRepeats = lastConfig.AllowRepeats;
                    _count = lastConfig.Count;
                }
                catch (Exception e)
                {
                    Logger.LogWarning(e, $"There was an issue deserializing Last Configs");
                }
            }
        }

    }
    private string ChartString(Chart chart) => $"{chart.Song.Name} {chart.DifficultyString}";
    private string ChartSearch(Chart chart)
    {
        var searchString = "Pump It Up " + chart.Song.Name + " " + chart.DifficultyString;
        return $"https://www.youtube.com/results?search_query={searchString.Replace("%", "Percent ").Replace(" ", "+")}";
    }

    private sealed class SavedResults
    {
        public int[] VetoedCharts { get; set; } = Array.Empty<int>();
        public int[] ProtectedCharts { get; set; } = Array.Empty<int>();
        public Guid[] ChartList { get; set; } = Array.Empty<Guid>();
    }

    private sealed class SavedConfiguration
    {
        public IDictionary<int, int> LevelWeights { get; set; } = new Dictionary<int, int>();
        public IDictionary<int, int> DoubleWeights { get; set; } = new Dictionary<int, int>();
        public IDictionary<ChartType, int> ChartTypeWeights { get; set; } = new Dictionary<ChartType, int>();
        public IDictionary<SongType, int> SongTypeWeights { get; set; } = new Dictionary<SongType, int>();
        public IDictionary<int, int> PlayerCountWeights { get; set; } = new Dictionary<int, int>();
        public IDictionary<ChartType, int?> ChartTypeMinimums { get; set; } = new Dictionary<ChartType, int?>();
        public IDictionary<int, int?> LevelMinimums { get; set; } = new Dictionary<int, int?>();
        public IDictionary<string, int?> ChartTypeLevelMinimums { get; set; } = new Dictionary<string, int?>();
        public  bool UseScoring { get; set; }
        public int Count { get; set; }
        public bool AllowRepeats { get; set; }
    }
}
