@page "/PhoenixCalculator"
@using ScoreTracker.Domain.Records
@using ScoreTracker.Web.Components
@using ScoreTracker.Web.Dtos
@using ScoreTracker.Domain.Enums

<PageTitle>Phoenix Score Calculator</PageTitle>
<HeadContent>
    <meta name="description" content="Calculate scores based on step counts and see how many judgements a score is from the next grade." />
    <meta property="og:title" content="Phoenix Score Calculator">
    <meta property="og:description" content="Calculate scores based on step counts and see how many judgements a score is from the next grade.">
</HeadContent>
<MudImage Src="https://piuimages.arroweclip.se/PhoenixBanner.png" Style="width:95%; max-width:800px;"></MudImage>
<MudGrid>
    <MudItem xs="12" sm="6">
        <MudTextField T="int" InputMode="InputMode.numeric" MaxLength="5" InputType="InputType.Number" Label="Perfects" Value="_perfects" ValueChanged="n=>SetScore(n,_greats,_goods,_bads,_misses,_maxCombo,_calories)" Immediate="true" DebounceInterval="200"></MudTextField>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudTextField T="int" InputMode="InputMode.numeric" MaxLength="5" InputType="InputType.Number" Label="Greats" Value="_greats" ValueChanged="n=>SetScore(_perfects,n,_goods,_bads,_misses,_maxCombo,_calories)" Immediate="true" DebounceInterval="200"></MudTextField>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudTextField T="int" InputMode="InputMode.numeric" MaxLength="5" InputType="InputType.Number" Label="Goods" Value="_goods" ValueChanged="n=>SetScore(_perfects,_greats,n,_bads,_misses,_maxCombo,_calories)" Immediate="true" DebounceInterval="200"></MudTextField>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudTextField T="int" InputMode="InputMode.numeric" MaxLength="5" InputType="InputType.Number" Label="Bads" Value="_bads" ValueChanged="n=>SetScore(_perfects,_greats,_goods,n,_misses,_maxCombo,_calories)" Immediate="true" DebounceInterval="200"></MudTextField>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudTextField T="int" InputMode="InputMode.numeric" MaxLength="5" InputType="InputType.Number" Label="Misses" Value="_misses" ValueChanged="n=>SetScore(_perfects,_greats,_goods,_bads,n,_maxCombo,_calories)" Immediate="true" DebounceInterval="200"></MudTextField>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudTextField T="int" InputMode="InputMode.numeric" MaxLength="5" InputType="InputType.Number" Label="Max Combo" Value="_maxCombo" ValueChanged="n=>SetScore(_perfects,_greats,_goods,_bads,_misses,n,_calories)" Immediate="true" DebounceInterval="200"></MudTextField>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudTextField T="double?" InputMode="InputMode.numeric" InputType="InputType.Number" Label="Calories" Value="_calories" ValueChanged="n=>SetScore(_perfects,_greats,_goods,_bads,_misses,_maxCombo,n)"></MudTextField>
    </MudItem>
    <MudItem xs="12">
        <ScoreBreakdown Score="@Score.CalculatePhoenixScore" Plate="Score.PlateText" ShowScore="true"></ScoreBreakdown>


        @if (Score.IsValid)
        {
            <MudText>
                <b>@L["Next Letter"]:</b> @Score.NextLetterGrade()
            </MudText>

            <MudText><b>@L["Score Loss", "Greats"]:</b> @Score.GreatLoss</MudText>

            <MudText><b>@L["Score Loss", "Goods"]:</b> @Score.GoodLoss</MudText>

            <MudText><b>@L["Score Loss", "Bads"]:</b> @Score.BadLoss</MudText>

            <MudText><b>@L["Score Loss", "Misses"]:</b> @Score.MissLoss</MudText>

            <MudText><b>@L["Score Loss", "Combo"]:</b> @Score.ComboLoss</MudText>
            <MudText>(@L["Score Loss Note"])</MudText>
            @if (Score.EstimatedSteps != null)
            {
                <MudText><b>@L["Arrows Pressed"]:</b> @Score.EstimatedSteps.Value.ToString("n")</MudText>
            }

        }
    </MudItem>

    <MudItem xs="12">

        @if (_showDistribution)
        {

            <ApexChart TItem="JudgementAllocation"
                   Title="Score Distribution">
                <ApexPointSeries TItem="JudgementAllocation"
                                 Items="_yourAllocations"
                                 Name="Your Spread"
                                 SeriesType="SeriesType.Bar"
                                 XValue="@(e => e.Type)"
                                 YAggregate="@(e => e.Sum(z=>z.Count))"
                                 ShowDataLabels />

                <ApexPointSeries TItem="JudgementAllocation"
                                 Items="_averageAllocation"
                                 Name="Average Spread For This Score"
                                 SeriesType="SeriesType.Bar"
                             XValue="@(e => e.Type)"
                             YAggregate="@(e => e.Sum(z=>z.Count))"
                                 ShowDataLabels />
            </ApexChart>
        }
        else
        {
            <MudButton Color="Color.Primary" Disabled="!Score.IsValid" Variant="Variant.Outlined" OnClick="ShowDistribution">@L["Show Score Distribution"]</MudButton>
        }
    </MudItem>
</MudGrid>
<br/>
<br/>
<MudText>
    @L["Score Formula Shoutout"]<br/>
</MudText>

<MudImage Src="https://piuimages.arroweclip.se/PhoenixFormula.jpg" Style="max-width:85vw; width:auto;"></MudImage>
<br/>
<MudText>
    @L["Score Range Shoutout"]
    <br/><br/>
    @foreach (var grade in Enum.GetValues<PhoenixLetterGrade>().OrderByDescending(g => (int)g.GetMinimumScore()))
    {
        <span>@grade.GetName(): @grade.GetMinimumScore() ~ @grade.GetMaximumScore() points</span><br/>
    }
    Perfect Game: 100% Perfect<br/>
    Ultimate Game: 100% Perfect + Great<br/>
    Extreme Game: 100% Perfect + Great + Good <br/>
    Superb Game: 0 Miss (previous S)<br/>
    Marvelous Game: &lt;= 5 misses<br/>
    Talented Game: &lt;= 10 misses<br/>
    Fair Game: &lt;= 20 misses<br/>
    Rough Game: > 20 misses
</MudText>
@inject ISnackbar Snackbar;
@inject ILogger<PhoenixCalculator> Logger;
@code
{
    private ApexChart<ScoreDistributionDto> _distributionChart;

    private sealed record JudgementAllocation(string Type, int Count)
    {

    }
    private JudgementAllocation[] _averageAllocation = Array.Empty<JudgementAllocation>();
    private JudgementAllocation[] _yourAllocations = Array.Empty<JudgementAllocation>();

    private bool _showDistribution = false;
    private Task SetScore(int perfects, int greats, int goods, int bads, int misses, int maxCombo,double? calories)
    {
        _showDistribution = false;
        _calories = calories == null ? null : Math.Abs(calories.Value);
        _perfects = Math.Abs(perfects);
        _greats = Math.Abs(greats);
        _goods = Math.Abs(goods);
        _bads = Math.Abs(bads);
        _misses = Math.Abs(misses);
        _maxCombo = Math.Abs(maxCombo);
        Score = new(_perfects, _greats, _goods, _bads, _misses, _maxCombo, calories);
        return Task.CompletedTask;

    }

    private Task ShowDistribution()
    {
        var scoreNoCombo = new ScoreScreen(_perfects, _greats, _goods, _bads, _misses, 0).CalculatePhoenixScore;
        var distribution = ScoreDistributionDto.Get(scoreNoCombo);
        var averagePerfect = distribution.AvgPerfect;
        var averageGreat = distribution.AvgGreat;
        var averageGood = distribution.AvgGood;
        var averageBad = distribution.AvgBad;
        var averageMiss = distribution.AvgMiss;
        var scalingRatio = Score.TotalCount / (double)(averagePerfect + averageGreat + averageGood + averageBad + averageMiss);
        _averageAllocation = new JudgementAllocation[]
        {
            new("Perfects", (int)(averagePerfect*scalingRatio)),
            new("Greats", (int)(averageGreat*scalingRatio)),
            new("Goods", (int)(averageGood*scalingRatio)),
            new("Bads", (int)(averageBad*scalingRatio)),
            new("Misses",(int)(averageMiss*scalingRatio))
        };
        _yourAllocations = new JudgementAllocation[]
        {

            new("Perfects", _perfects),
            new("Greats", _greats),
            new("Goods",_goods),
            new("Bads",_bads),
            new("Misses", _misses)
        };

        _showDistribution = true;
        return Task.CompletedTask;

    }
    public IEnumerable<ScoreDistributionDto> ScoreDistributions = ScoreDistributionDto.DefaultList;
    private int _perfects = 0;
    private int _greats = 0;
    private int _goods = 0;
    private int _bads = 0;
    private int _misses = 0;
    private int _maxCombo = 0;
    private double? _calories = null;
    private ScoreScreen Score = new (0, 0, 0, 0, 0, 0);
    


}
