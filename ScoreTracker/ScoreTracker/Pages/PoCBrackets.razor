@page "/BITE/BracketPoC"
@using ScoreTracker.Domain.ValueTypes

<PageTitle>About</PageTitle>

<MudPaper>

    <MudTabs>
        @for(var poolIndex = 0; poolIndex<_pools.Length;poolIndex++)
        {
            var pool = _pools[poolIndex];
            <MudTabPanel Text="@TabName(poolIndex+1)">
                @for(var podIndex =0; podIndex<pool.Pods.Length;podIndex++)
                {
                    var curPodIndex = podIndex;
                    var pod = pool.Pods[podIndex];
                        <MudSimpleTable>
                            <thead>
                            <tr>
                                <th>
                                    Pod @curPodIndex
                                </th>
                                <th>
                                    Chart 1 Score
                                </th>
                                <th>
                                    Chart 2 Score
                                </th>
                                <th>
                                    Chart 3 score
                                </th>
                                <th>
                                    Chart 4 score
                                </th>
                                <th>
                                    Pod Score
                                </th>
                            </tr>
                            </thead>
                            <tbody>
                            @for(var playerIndex=0; playerIndex<pod.Players.Length;playerIndex++)
                            {
                                var player = pod.Players[playerIndex];
                                <tr>
                                    <td>@(player.PlayerName?.ToString()??"")</td>
                                    @for (var chartIndex = 0; chartIndex < player.Scores.Length; chartIndex++)
                                    {
                                        <td>

                                            @{
                                                var index = playerIndex;
                                                var index1 = chartIndex;
                                            }
                                            <MudNumericField HideSpinButtons="true" Disabled="!pod.IsReady" T="int" Value="player.Scores[chartIndex]" Label="@ScoreLabel(player.MoneyScore[chartIndex])" ValueChanged="@(s=>pod.SetScore(index,index1,s))" Min="0" Max="20000000"></MudNumericField>
                                        </td>
                                    }
                                    <td>
                                        @player.MoneyScore.Sum()
                                    </td>
                                </tr>
                            }
                            </tbody>
                        </MudSimpleTable>
                        
                }
            </MudTabPanel>
        }
    </MudTabs>
</MudPaper>

@code
{
    private string TabName(int index) => $"Wave {index}";
    private string ScoreLabel(int score) => score == 0 ? "" : score.ToString()+" Points";
    private Pool[] _pools = Array.Empty<Pool>();
    protected override Task OnInitializedAsync()
    {
        var nameChunks = Names.Split(@"
").Where(s => !string.IsNullOrWhiteSpace(s)).Select(Name.From).Chunk(8).ToArray();

        var nextPool = new Pool(nameChunks.First());
        var pools = new List<Pool> { nextPool };

        foreach (var pool in nameChunks.Skip(3))
        {
            var currentPool = new Pool(pool, nextPool);
            pools.Add(currentPool);
            nextPool = currentPool;
        }
        var firstPool = new Pool(nameChunks[1].Concat(nameChunks[2]), nextPool);
        pools.Add(firstPool);
        pools.Reverse();
        _pools = pools.ToArray();
        return Task.CompletedTask;

    }

    private sealed class Pool
    {
        public Pool(IEnumerable<Name> names, Pool? nextPool = null)
        {
            var namesArray = names.ToArray();
            switch (namesArray.Length)
            {
                case 16:
                    Pods = namesArray.Chunk(4).Select((c, index) => new Pod(c[0], c[1], c[2], c[3], nextPool?.Pods[index])).ToArray();
                    break;
                case 8:
                    Pods = namesArray.Chunk(2).Select((c, index) => new Pod(c[0], c[1], null, null, nextPool?.Pods[index])).ToArray();
                    break;
                default:
                    throw new Exception("Invalid player count");
            }

        }
        public Pod[] Pods { get; }
    }
    private sealed class Pod
    {
        public Pod(Name player1, Name player2, Name? player3 = null, Name? player4 = null, Pod ? nextPod = null)
        {
            _nextPod = nextPod;
            Players = new[]
            {
                new PlayerMatchResult(player1),
                new PlayerMatchResult(player2),
                new PlayerMatchResult(player3),
                new PlayerMatchResult(player4)
            };
        }

        public bool IsReady => Players.All(p => p.PlayerName != null);
        private void SetPreviousWinners(Name winner1, Name winner2)
        {
            Players[2].AssignPlayer(winner1);
            Players[3].AssignPlayer(winner2);
        }
        private readonly Pod? _nextPod = null;
        public PlayerMatchResult[] Players { get; }

        public void SetScore(int playerIndex, int chartIndex, XXScore score)
        {
            if (Players.Any(p => p.PlayerName == null))
            {
                throw new Exception("Can't assign scores to a match that doesn't have all players yet");
            }
            Players[playerIndex].Scores[chartIndex] = score;
            if (Players.Any(p => p.Scores[chartIndex] == 0))
                return;


            var scoreGroups = Players.GroupBy(s => s.Scores[chartIndex]).OrderByDescending(g => (int)g.Key!).ToArray();
            var points = 4;
            var count = 0;
            for (var i = 0; i < Players.Length;i++)
            {
                if (scoreGroups.Length <= i)
                {
                    break;
                }
                foreach (var player in scoreGroups[i])
                {
                    player.MoneyScore[chartIndex] = points;
                    count++;
                }
                points -= count;
                count = 0;
            }
            if (!Players.All(p => p.MoneyScore.All(s => s > 0)))
                return;

            var ranking = Players.OrderByDescending(p => p.MoneyScore.Sum()).ThenByDescending(p => p.Scores.Sum(s => (int)s!)).ToArray();

            _nextPod?.SetPreviousWinners(ranking[0].PlayerName!.Value,ranking[1].PlayerName!.Value);
        }

    }

    private sealed class PlayerMatchResult
    {
        public PlayerMatchResult(Name? playerName)
        {
            PlayerName = playerName;
        }

        public void AssignPlayer(Name? playerName)
        {
            PlayerName = playerName;
        }
        public Name? PlayerName { get; private set; }
        public int[] MoneyScore { get; } = { 0, 0, 0, 0 };
        public XXScore[] Scores { get; }= { 0, 0, 0, 0 };
    }

    private string Names = @"
__QED__
_GEM
_UWU_
AZTRYLMYX
Azurian
Bedrock
Blankman
BRTOMAMI
chezmix
Crafty
Dancingmaractus
Daniel Van Eden
DanTheWaffleLord
DarkBeam
DDMBIU
DefaultK
DJPandaga
DrMurloc
eion
Elixir
Ellison
EMCAT
esibun
Feathers
fungpapi
FUNKTION_04
GucciTng
Hamaon
HSPuppets
INVOKER
Iraiah
JellySlosh
Jessip
Jet Fox
KDWAVOUR
Koral
Kwaurter
layZdog
lilblake
Loy
manEmajor15
Mashle
MISCHIEF
NickTrioxin
NOBARBEN
Nyroom
OtakuBot
Paranoia Boi
Pikarichu
PrimoVictorian
S0lost
Scottisgod
Shinobee
ShinySP
silentblackcat
sixxofsixx
Sneezle
SnowStorm
StrawHatGabe
thomas_grover
Whiskey3line
WINDFORCE
Yimmythe42
YUMADORY";
}
