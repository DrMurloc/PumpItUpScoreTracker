@page "/WhatShouldIPlay"
@page "/"
@using MediatR
@using ScoreTracker.Application.Commands
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.Models
@using ScoreTracker.Domain.Models.Titles
@using ScoreTracker.Domain.Models.Titles.Phoenix
@using ScoreTracker.Domain.Records
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Domain.SecondaryPorts
@using ScoreTracker.PersonalProgress.Queries
@using ScoreTracker.Web.Components
@using ScoreTracker.Web.Services.Contracts

<PageTitle>What Should I Play</PageTitle>

<MudText Typo="Typo.h3">What Should I Play?</MudText>
<br/>
@if (_progress != null)
{
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h4">@_progress.Title.Name</MudText>
        </MudItem>
        <MudItem xs="12">
            <MudProgressLinear Color="Color.Primary" Value="100.0 * (_progress.CompletionCount / (double)_progress.Title.CompletionRequired)">
                <MudText Typo="Typo.subtitle1">
                    @((int)_progress.CompletionCount) / @_progress.Title.CompletionRequired
                </MudText>
            </MudProgressLinear>
        </MudItem>

        <MudItem xs="12">
            @L["Remaining Charts",((int)Math.Ceiling((_progress.Title.CompletionRequired - _progress.CompletionCount) / (_rating * PhoenixLetterGrade.SSSPlus.GetModifier()))),
        ((int)Math.Ceiling((_progress.Title.CompletionRequired - _progress.CompletionCount) / (_rating * PhoenixLetterGrade.AA.GetModifier())))]
            <br/>
            @if (_averageRating >0)
            {
                @L["Remaining Charts For You",(int)Math.Ceiling((_progress.Title.CompletionRequired - _progress.CompletionCount) / ((double)_averageRating))]
            }
        </MudItem>
    </MudGrid>
}
@if (_stats != null)
{
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h4">Stats</MudText>
        </MudItem>
        <MudItem xs="12">
            <b>@L["Rating"]</b>: @_stats.SkillRating
        </MudItem>
        <MudItem xs="12">
            <b>Competitive Level</b>: @_stats.CompetitiveLevel.ToString("0.00") <MudIconButton Icon="@Icons.Material.Filled.QuestionMark" Color="Color.Primary" Target="_blank" Href="/CompetitiveLevel" Size="Size.Small"></MudIconButton>
        </MudItem>
        <MudItem xs="12">
            <b>Singles Level</b>: @_stats.SinglesCompetitiveLevel.ToString("0.00")
        </MudItem>
        <MudItem xs="12">
            <b>Doubles Level</b>: @_stats.DoublesCompetitiveLevel.ToString("0.00")
        </MudItem>
    </MudGrid>
}
@foreach (var key in _descriptions.Keys)
{
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h4">
                <MudTooltip Text="@_descriptions[key]">
                @key
                </MudTooltip>

            </MudText>
        </MudItem>
        @foreach (var chart in _charts[key])
        {
            <MudItem xs="6" sm="3" md="2">

                <MudCard>
                    <MudCardMedia Height="100" Image="@chart.Song.ImagePath.ToString()" />
                    @if (_scores.TryGetValue(chart.Id, out var score) && score.Score!=null)
                    {
                        
                        <MudCardContent>
                            <MudText>@score.Score (@score.Score?.LetterGrade.GetName()) @(score.Plate?.GetShorthand())</MudText>
                        </MudCardContent>
                    }
                    <MudCardActions>
                        <DifficultyBubble Chart="chart"></DifficultyBubble>
                        <MudSpacer></MudSpacer>
                        
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(() => Edit(chart.Id,key))"></MudIconButton>
                        @if (_videos.ContainsKey(chart.Id))
                        {
                            <MudIconButton Icon="@Icons.Custom.Brands.YouTube" OnClick="@(() => ShowVideo(_videos[chart.Id],chart))"></MudIconButton>

                        }
                        else
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Search" Href="@ChartSearch(chart)" Target="_blank"></MudIconButton>

                        }

                    </MudCardActions>

                </MudCard>
            </MudItem>
        }
    </MudGrid>
}
<MudDialog @bind-IsVisible="_showVideoDialog">
    <DialogContent>
        <iframe class="video"
                id="chartVideoFrame"
                src="@(_currentVideo + "?autoplay=1")"
                allow="autoplay; encrypted-media"
                allowfullscreen></iframe>
    </DialogContent>

    <DialogActions>
        <MudSpacer></MudSpacer>
        <MudTooltip Text=@L["Report Video Tooltip"]>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Report" OnClick="NotifyBadVideo">@L["Report Video"]</MudButton>
        </MudTooltip>
        <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Close" OnClick="()=>_showVideoDialog=false">@L["Close"]</MudButton>
    </DialogActions>
</MudDialog>
<MudDialog @bind-IsVisible="_showScoreDialog">
    <DialogContent>
        
        @if (_selectedChart != null)
        {
            <EditChartGrid ShowChartName="true" ChartId="_selectedChart.Value" CurrentMix="MixEnum.Phoenix"></EditChartGrid>
        }
    </DialogContent>
    <DialogActions>
        <MudButton StartIcon="@Icons.Material.Filled.ThumbUp" Color="Color.Secondary" Variant="Variant.Filled" Disabled="_isSaving" OnClick="SubmitPositiveFeedback">Good Suggestion</MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.ThumbDown" Color="Color.Secondary" Variant="Variant.Filled" Disabled="_isSaving" OnClick="()=>_showRateDialog=true">Bad Suggestion</MudButton>
        <MudSpacer>

        </MudSpacer>
        <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Close" OnClick="() => _showScoreDialog = false">@L["Close"]</MudButton>

    </DialogActions>
</MudDialog>
<MudDialog @bind-IsVisible="_showRateDialog">
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudSelect T="string" @bind-Value="_feedbackCategory" Label="Reason">
                    <MudSelectItem Value=@("Doesn't Match My Personal Skills")>Doesn't Match My Personal Skills</MudSelectItem>
                    <MudSelectItem Value=@("I Don't Like The Chart")>I Don't Like The Chart</MudSelectItem>
                    <MudSelectItem Value=@("Not Relevant to Category")>Not Relevant to Category</MudSelectItem>
                    <MudSelectItem Value=@("I Just Want to Hide The Chart")>I Just Want to Hide The Chart</MudSelectItem>
                    <MudSelectItem Value=@("The Category Isn't Interesting to Me")>The Category Isn't Interesting to Me'</MudSelectItem>
                    <MudSelectItem Value=@("Other")>Other</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="_notes" Lines="3" MaxLength="250" Counter=@(250-_notes.Length) Label="Additional Comments"></MudTextField>
            </MudItem>
            <MudItem xs="12">
                <MudCheckBox T="bool" @bind-Checked="_shouldHide" Label="Hide Chart for this Category"></MudCheckBox>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudSpacer></MudSpacer>
        <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Close" OnClick="() => _showScoreDialog = false">@L["Close"]</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SubmitFeedback" Disabled="_isSaving">@L["Submit"]</MudButton>
    </DialogActions>
</MudDialog>
@inject IMediator Mediator
@inject ICurrentUserAccessor CurrentUser;
@inject NavigationManager NavManager;
@inject IUiSettingsAccessor UiSettings;

@inject IAdminNotificationClient Notifications;
@inject ISnackbar Snackbar;
@inject IPhoenixRecordRepository PhoenixRecords;

@code {
    private bool _showVideoDialog;
    private bool _showScoreDialog;
    private bool _showRateDialog;
    private string _currentVideoDescription;
    private string _currentVideo = string.Empty;
    private Guid? _selectedChart = null;
    private string _category = string.Empty;
    private string _feedbackCategory = string.Empty;
    private string _notes = string.Empty;
    private bool _shouldHide = false;
    private PlayerStatsRecord? _stats;
    private bool _isSaving = false;
    private TitleProgress? _progress;
    private int _rating = 0;
    private int _averageRating = 0;

    private async Task SubmitPositiveFeedback()
    {
        if (_selectedChart == null)
        {
            return;
        }
        _isSaving = true;
        await Mediator.Send(new SubmitFeedbackCommand(new SuggestionFeedbackRecord(_category, "Positive", "", false, true, _selectedChart.Value)));

        Snackbar.Add("Feedback Submitted, Thank You!", Severity.Success);
        _isSaving = false;
    }
    private async Task SubmitFeedback()
    {
        if (_selectedChart == null)
        {
            return;
        }
        _isSaving = true;
        await Mediator.Send(new SubmitFeedbackCommand(new SuggestionFeedbackRecord(_category, _feedbackCategory, _notes, _shouldHide, false, _selectedChart.Value)));
        if (_shouldHide)
        {
            _charts[_category] = _charts[_category].Where(c => c.Id != _selectedChart).ToArray();
        }
        _showRateDialog = false;
        Snackbar.Add("Feedback Submitted, Thank You!", Severity.Success);
        _isSaving = false;
    }
    private void Edit(Guid chartId, string category)
    {
        _selectedChart = chartId;
        _showScoreDialog = true;
        _category = category;
        _shouldHide = false;
        _notes = string.Empty;
        _feedbackCategory = "Doesn't Match My Personal Skills";
    }
    private string ChartSearch(Chart chart)
    {
        var searchString = "Pump It Up " + chart.Song.Name + " " + chart.DifficultyString;
        return $"https://www.youtube.com/results?search_query={searchString.Replace("%", "Percent ").Replace(" ", "+")}";
    }
    private IDictionary<Name, string> _descriptions = new Dictionary<Name, string>();
    private IDictionary<Name, IEnumerable<Chart>> _charts = new Dictionary<Name, IEnumerable<Chart>>();
    private IDictionary<Guid, RecordedPhoenixScore> _scores = new Dictionary<Guid, RecordedPhoenixScore>();
    private IDictionary<Guid, string> _videos = new Dictionary<Guid, string>();
    private void ShowVideo(string url, Chart chart)
    {
        _showVideoDialog = true;
        _currentVideo = url;
        _currentVideoDescription = $"{chart.Song.Name} - {chart.DifficultyString}";
        StateHasChanged();
    }
    private async Task NotifyBadVideo()
    {
        await Notifications.NotifyAdmin($"The video for{_currentVideoDescription} was reported by {(CurrentUser.IsLoggedIn ? CurrentUser.User.Name : "Unknown")}", CancellationToken.None);
        Snackbar.Add("Notification was sent", Severity.Success);
    }
    protected override async Task OnInitializedAsync()
    {
        if (!CurrentUser.IsLoggedIn)
        {
            NavManager.NavigateTo("/Login");
            return;
        }
        var titles = await Mediator.Send(new GetTitleProgressQuery(MixEnum.Phoenix));
        _progress = titles.GetPushingTitle();
        var pushingLevel = (_progress.Title as PhoenixDifficultyTitle)!.Level;
        _rating = pushingLevel.BaseRating;
        var recommendations = (await Mediator.Send(new GetRecommendedChartsQuery())).ToArray();
        var charts = (await Mediator.Send(new GetChartsQuery(MixEnum.Phoenix)))
            .ToDictionary(c => c.Id);
        _scores = (await Mediator.Send(new GetPhoenixRecordsQuery(CurrentUser.User.Id)))
            .ToDictionary(r => r.ChartId);
        var matchingScores = charts.Values.Where(c => c.Level == pushingLevel &&_scores.ContainsKey(c.Id) && _scores[c.Id].Score != null)
            .Select(c => _scores[c.Id])
            .ToArray();
        _averageRating = matchingScores.Any() ? (int)matchingScores.Average(s => s.Score!.Value.LetterGrade.GetModifier() * _rating) : 0;
        _videos=(await Mediator.Send(new GetChartVideosQuery())).ToDictionary(c => c.ChartId,c=>c.VideoUrl.ToString());
        _charts = recommendations.GroupBy(r => r.Category).ToDictionary(g => g.Key, g => g.Select(r => charts[r.ChartId]).ToArray().AsEnumerable());
        _descriptions = recommendations.GroupBy(r => r.Category).ToDictionary(g => g.Key, g => g.First().Explanation);
        _stats = await Mediator.Send(new GetPlayerStatsQuery(CurrentUser.User.Id));

    }
}
