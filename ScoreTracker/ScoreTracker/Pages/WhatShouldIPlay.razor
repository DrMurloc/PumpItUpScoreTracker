@page "/WhatShouldIPlay"
@page "/"
@using MediatR
@using ScoreTracker.Application.Commands
@using ScoreTracker.Application.Queries
@using ScoreTracker.Data.Migrations
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.Models
@using ScoreTracker.Domain.Models.Titles
@using ScoreTracker.Domain.Models.Titles.Phoenix
@using ScoreTracker.Domain.Records
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Domain.SecondaryPorts
@using ScoreTracker.PersonalProgress.Queries
@using ScoreTracker.Web.Components
@using ScoreTracker.Web.Services
@using ScoreTracker.Web.Services.Contracts
@using ScoreTracker.Web.Shared
@using ChartType = ScoreTracker.Domain.Enums.ChartType

<PageTitle>What Should I Play</PageTitle>

<MudText Typo="Typo.h3">What Should I Play?</MudText>
<br/>
@if (_progress != null)
{
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h4">@_progress.Title.Name</MudText>
        </MudItem>
        <MudItem xs="12">
            <MudProgressLinear Color="Color.Primary" Value="100.0 * (_progress.CompletionCount / (double)_progress.Title.CompletionRequired)">
                <MudText Typo="Typo.subtitle1">
                    @((int)_progress.CompletionCount) / @_progress.Title.CompletionRequired
                </MudText>
            </MudProgressLinear>
        </MudItem>

        <MudItem xs="12">
            @L["Remaining Charts",((int)Math.Ceiling((_progress.Title.CompletionRequired - _progress.CompletionCount) / (_rating * PhoenixLetterGrade.SSSPlus.GetModifier()))),
        ((int)Math.Ceiling((_progress.Title.CompletionRequired - _progress.CompletionCount) / (_rating * PhoenixLetterGrade.AA.GetModifier())))]
            <br/>
            @if (_averageRating >0)
            {
                @L["Remaining Charts For You",(int)Math.Ceiling((_progress.Title.CompletionRequired - _progress.CompletionCount) / ((double)_averageRating))]
            }
        </MudItem>
    </MudGrid>
}
<MudGrid>
    <MudItem xs="4" sm="3">
        <MudSelect T="ChartType?" Label=@L["Chart Type"] Value="_chartType" ValueChanged="SetChartType" Disabled="_isLoading">
            <MudSelectItem T="ChartType?" Value="null">All</MudSelectItem>
            <MudSelectItem T="ChartType?" Value="ChartType.Single">Singles</MudSelectItem>
            <MudSelectItem T="ChartType?" Value="ChartType.Double">Doubles</MudSelectItem>
        </MudSelect>
    </MudItem>
    <MudItem xs="2" sm="1">
        <MudIconButton Icon="@Icons.Material.Filled.Refresh" Variant="Variant.Filled" Color="Color.Primary" OnClick="RefreshRecommendations" Disabled="_isLoading"></MudIconButton>
    </MudItem>
    @if (_isLoading)
    {
        
        <MudItem xs="2" sm="1">
            <MudProgressCircular Indeterminate="true" Color="Color.Primary"></MudProgressCircular>
        </MudItem>
    }
</MudGrid>

<MudGrid>
@foreach (var key in _descriptions.Keys.Where(v=>!_hiddenSections.Contains(v)))
{
        <MudItem xs="12">
            <MudText Typo="Typo.h4" Style="display:inline">
                <MudTooltip Text="@_descriptions[key]">
                    @key
                </MudTooltip>

            </MudText>
            <MudIconButton Icon="@Icons.Material.Filled.HideSource" Style="float:right" Size="Size.Small" Color="Color.Primary" Variant="Variant.Outlined" OnClick="()=>HideSection(key)"></MudIconButton>

            @if (key == "Weekly Charts")
            {
                            <br />
                <MudLink Typo="Typo.subtitle1" Href="/WeeklyCharts">See Leaderboards</MudLink>
            }
        </MudItem>
        @foreach (var chart in _charts[key])
        {
            <MudItem xs="6" sm="3" md="2">
                <MudCard Class="chart-card">
                    <MudCardHeader Style=@($"background-image:url(\"{chart.Song.ImagePath}\");")>

                        <DifficultyBubble Chart="chart"></DifficultyBubble>
                    </MudCardHeader>
                    @if (key!= "Weekly Charts" && _scores.TryGetValue(chart.Id, out var score) && score.Score != null)
                    {
                        <MudCardContent>
                            <ScoreBreakdown Score="score.Score" IsBroken="score.IsBroken" OneLine="true" ShowScore="true" Plate="score.Plate" Ranking="_rankings.TryGetValue(score.ChartId,out var c)?c:null"></ScoreBreakdown>
                            @if (!string.IsNullOrWhiteSpace(_details[key][chart.Id]))
                            {
                                <MudText>@_details[key][chart.Id]</MudText>
                            }
                        </MudCardContent>
                    }
                    else if (key == "Weekly Charts" && _myEntries.TryGetValue(chart.Id, out var entry))
                    {
                        <MudCardContent>
                            <ScoreBreakdown Score="entry.Score" Plate="entry.Plate" IsBroken="entry.IsBroken" OneLine="true" Ranking="_rankings.TryGetValue(chart.Id,out var c)?c:null"></ScoreBreakdown>
                        </MudCardContent>
                    }

                    <MudCardActions>
                        @if (_topCharts.Contains(chart.Id))
                        {
                            <MudTooltip Text=@($"Top 50 {chart.Type}s")>
                                <MudIcon Icon="@PiuScoresIcons.Crown" Style="color:#00ffff"></MudIcon>
                            </MudTooltip>
                        }
                        <MudSpacer></MudSpacer>
                        @if (key != "Weekly Charts")
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(() => Edit(chart.Id, key))"></MudIconButton>

                        }
                        <MudIconButton Icon="@Icons.Custom.Brands.YouTube" OnClick="@(() => VideoDisplayer.ShowVideo(chart.Id))"></MudIconButton>


                    </MudCardActions>

                </MudCard>
            </MudItem>
        }
}
@foreach (var sectionName in _hiddenSections)
{
    <MudItem xs="6" sm="4" md="3">
        <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="()=>ShowSection(sectionName)">Show @sectionName</MudButton>
    </MudItem>
}
</MudGrid>
@if (_stats != null)
{
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h4">Stats</MudText>
        </MudItem>
        <MudItem xs="12">
            <b>PUMBILITY</b>: @_stats.SkillRating
        </MudItem>
        <MudItem xs="12">
            <b>Competitive Level</b>: @_stats.CompetitiveLevel.ToString("0.00") <MudIconButton Icon="@Icons.Material.Filled.QuestionMark" Color="Color.Primary" Target="_blank" Href="/CompetitiveLevel" Size="Size.Small"></MudIconButton>
        </MudItem>
        <MudItem xs="12">
            <b>Singles Level</b>: @_stats.SinglesCompetitiveLevel.ToString("0.00")
        </MudItem>
        <MudItem xs="12">
            <b>Doubles Level</b>: @_stats.DoublesCompetitiveLevel.ToString("0.00")
        </MudItem>
    </MudGrid>
}
@if (_playerHistory.Any())
{
    <ApexChart TItem="PlayerRatingRecord"
               Title="Competitive Level"
               XAxisType="XAxisType.Datetime"
               Options="_scoreBoxesOptions">
        <ApexPointSeries TItem="PlayerRatingRecord"
                         Color="#EA3F24"
                         Items="_playerHistory"
                         Name="Singles"
                         SeriesType="SeriesType.Line"
                         XValue="@(e => e.Date)"
                         YValue="@(e => (decimal)e.SinglesLevel)"
                         OrderBy="e => e.X"/>
        <ApexPointSeries TItem="PlayerRatingRecord"
                         Color="#76FA4F"
                         Items="_playerHistory"
                         Name="Doubles"
                         SeriesType="SeriesType.Line"
                         XValue="@(e => e.Date)"
                         YValue="@(e => (decimal)e.DoublesLevel)"
                         OrderBy="e => e.X" />
        <ApexPointSeries TItem="PlayerRatingRecord"
                         Color="#00FFFF"
                         Items="_playerHistory"
                         Name="Combined"
                         SeriesType="SeriesType.Line"
                         XValue="@(e => e.Date)"
                         YValue="@(e => (decimal)e.CompetitiveLevel)"
                         OrderBy="e => e.X" />

    </ApexChart>    
}
<MudDialog @bind-Visible="_showScoreDialog">
    <DialogContent>
        
        @if (_selectedChart != null)
        {
            <EditChartGrid ShowChartName="true" ChartId="_selectedChart.Value" CurrentMix="MixEnum.Phoenix"></EditChartGrid>
        }
    </DialogContent>
    <DialogActions>
        <MudButton StartIcon="@Icons.Material.Filled.ThumbUp" Color="Color.Secondary" Variant="Variant.Filled" Disabled="_isSaving" OnClick="SubmitPositiveFeedback">Good Suggestion</MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.ThumbDown" Color="Color.Secondary" Variant="Variant.Filled" Disabled="_isSaving" OnClick="()=>_showRateDialog=true">Bad Suggestion</MudButton>
        <MudSpacer>

        </MudSpacer>
        <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Close" OnClick="() => _showScoreDialog = false">@L["Close"]</MudButton>

    </DialogActions>
</MudDialog>
<MudDialog @bind-Visible="_showRateDialog">
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudSelect T="string" @bind-Value="_feedbackCategory" Label="Reason">
                    <MudSelectItem Value=@("Doesn't Match My Personal Skills")>Doesn't Match My Personal Skills</MudSelectItem>
                    <MudSelectItem Value=@("I Don't Like The Chart")>I Don't Like The Chart</MudSelectItem>
                    <MudSelectItem Value=@("Not Relevant to Category")>Not Relevant to Category</MudSelectItem>
                    <MudSelectItem Value=@("I Just Want to Hide The Chart")>I Just Want to Hide The Chart</MudSelectItem>
                    <MudSelectItem Value=@("The Category Isn't Interesting to Me")>The Category Isn't Interesting to Me'</MudSelectItem>
                    <MudSelectItem Value=@("Other")>Other</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="_notes" Lines="3" MaxLength="250" Counter=@(250-_notes.Length) Label="Additional Comments"></MudTextField>
            </MudItem>
            <MudItem xs="12">
                <MudCheckBox T="bool" @bind-Value="_shouldHide" Label="Hide Chart for this Category"></MudCheckBox>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudSpacer></MudSpacer>
        <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Close" OnClick="() => _showScoreDialog = false">@L["Close"]</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SubmitFeedback" Disabled="_isSaving">@L["Submit"]</MudButton>
    </DialogActions>
</MudDialog>
@inject IMediator Mediator
@inject ICurrentUserAccessor CurrentUser;
@inject NavigationManager NavManager;
@inject IUiSettingsAccessor UiSettings;

@inject IAdminNotificationClient Notifications;
@inject ISnackbar Snackbar;
@inject IPhoenixRecordRepository PhoenixRecords;
@inject ChartVideoDisplayer VideoDisplayer;
@inject IWeeklyTournamentRepository WeeklyTournaments;
@code {

    private readonly ApexChartOptions<PlayerRatingRecord> _scoreBoxesOptions = new ApexChartOptions<PlayerRatingRecord>()
    {
        Stroke = new Stroke { Curve = Curve.Smooth },
        Yaxis = new []
        {
            new YAxis()
            {
                DecimalsInFloat = 2
            }
        }.ToList()

    };
    private bool _showScoreDialog;
    private bool _showRateDialog;
    private Guid? _selectedChart = null;
    private string _category = string.Empty;
    private string _feedbackCategory = string.Empty;
    private string _notes = string.Empty;
    private bool _shouldHide = false;
    private PlayerStatsRecord? _stats;
    private bool _isSaving = false;
    private TitleProgress? _progress;
    private int _rating = 0;
    private int _averageRating = 0;

    private ISet<Guid> _topCharts = new HashSet<Guid>();
    private ISet<string> _hiddenSections = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
    private async Task SubmitPositiveFeedback()
    {
        if (_selectedChart == null)
        {
            return;
        }
        _isSaving = true;
        await Mediator.Send(new SubmitFeedbackCommand(new SuggestionFeedbackRecord(_category, "Positive", "", false, true, _selectedChart.Value)));

        Snackbar.Add("Feedback Submitted, Thank You!", Severity.Success);
        _isSaving = false;
    }
    private async Task SubmitFeedback()
    {
        if (_selectedChart == null)
        {
            return;
        }
        _isSaving = true;
        await Mediator.Send(new SubmitFeedbackCommand(new SuggestionFeedbackRecord(_category, _feedbackCategory, _notes, _shouldHide, false, _selectedChart.Value)));
        if (_shouldHide)
        {
            _charts[_category] = _charts[_category].Where(c => c.Id != _selectedChart).ToArray();
        }
        _showRateDialog = false;
        Snackbar.Add("Feedback Submitted, Thank You!", Severity.Success);
        _isSaving = false;
    }
    private void Edit(Guid chartId, string category)
    {
        _selectedChart = chartId;
        _showScoreDialog = true;
        _category = category;
        _shouldHide = false;
        _notes = string.Empty;
        _feedbackCategory = "Doesn't Match My Personal Skills";
    }
    private string ChartSearch(Chart chart)
    {
        var searchString = "Pump It Up " + chart.Song.Name + " " + chart.DifficultyString;
        return $"https://www.youtube.com/results?search_query={searchString.Replace("%", "Percent ").Replace(" ", "+")}";
    }
    private IDictionary<Name, string> _descriptions = new Dictionary<Name, string>();
    private IDictionary<Name, IEnumerable<Chart>> _charts = new Dictionary<Name, IEnumerable<Chart>>();
    private IDictionary<Guid, RecordedPhoenixScore> _scores = new Dictionary<Guid, RecordedPhoenixScore>();
    private IDictionary<Name, IDictionary<Guid, string>> _details = new Dictionary<Name, IDictionary<Guid, string>>();

    private ChartType? _chartType = null;
    private int _levelOffset = 0;
    private bool _isLoading = false;
    private IDictionary<Guid, Chart> _chartDict;
    private IEnumerable<PlayerRatingRecord> _playerHistory = Array.Empty<PlayerRatingRecord>();
    private async Task SetLevelOffset(int levelOffset)
    {
        _levelOffset = levelOffset;
        await UiSettings.SetSetting("WhatShouldIPlay__LevelOffset", levelOffset.ToString());
        await RefreshRecommendations();
    }

    private async Task SetChartType(ChartType? chartType)
    {
        _chartType = chartType;
        await UiSettings.SetSetting("WhatShouldIPlay__ChartType", chartType?.ToString()??"");
        await RefreshRecommendations();
    }

    private IDictionary<Guid, ScoreRankingRecord> _rankings = new Dictionary<Guid, ScoreRankingRecord>();
    private async Task RefreshRecommendations()
    {
        _isLoading = true;
        var recommendations = (await Mediator.Send(new GetRecommendedChartsQuery(_chartType, _levelOffset))).ToArray();
        _charts = recommendations.GroupBy(r => r.Category).ToDictionary(g => g.Key, g => g.Select(r => _chartDict[r.ChartId]).ToArray().AsEnumerable());
        _descriptions = recommendations.GroupBy(r => r.Category).ToDictionary(g => g.Key, g => g.First().Explanation);
        _details = recommendations.GroupBy(r => r.Category).ToDictionary(g => g.Key, g => (IDictionary<Guid, string>)g.ToDictionary(c => c.ChartId, c => c.ChartDetails));
        _rankings = await Mediator.Send(new GetChartScoreRankingsQuery(_charts.Values.SelectMany(c => c.Select(h => h.Id)).Distinct()));
        
        StateHasChanged();
        _isLoading = false;
    }

    private IDictionary<Guid, WeeklyTournamentEntry> _myEntries = new Dictionary<Guid, WeeklyTournamentEntry>();
        private const string HiddenSectionKey = "WhatShouldIPlay__HiddenSections";

    private async Task HideSection(string sectionName)
    {
        if (_hiddenSections.Contains(sectionName))
        {
            return;
        }
        _hiddenSections.Add(sectionName);
        await UiSettings.SetSetting(HiddenSectionKey, string.Join('|', _hiddenSections));
        Snackbar.Add($"Hid {sectionName}", Severity.Success);
    }

    private async Task ShowSection(string sectionName)
    {
        if (!_hiddenSections.Contains(sectionName))
        {
            return;
        }
        _hiddenSections.Remove(sectionName);
        await UiSettings.SetSetting(HiddenSectionKey, string.Join('|', _hiddenSections));
        Snackbar.Add($"Showing {sectionName}", Severity.Success);
    } 
    protected override async Task OnInitializedAsync()
    {
        if (!CurrentUser.IsLoggedIn)
        {
            NavManager.NavigateTo("/Login");
            return;
        }
        _hiddenSections = ((await UiSettings.GetSetting(HiddenSectionKey)) ?? "").Split('|').Where(s=>!string.IsNullOrWhiteSpace(s)).ToHashSet(StringComparer.OrdinalIgnoreCase);
        _isLoading = true;
        _levelOffset = int.TryParse(await UiSettings.GetSetting("WhatShouldIPlay__LevelOffset") ?? "0", out var level) ? level : 0;
        _chartType = Enum.TryParse<ChartType>(await UiSettings.GetSetting("WhatShouldIPlay__ChartType") ?? "", out var type) ? type : null;
        _chartDict = (await Mediator.Send(new GetChartsQuery(MixEnum.Phoenix)))
            .ToDictionary(c => c.Id);
        _topCharts = (await Mediator.Send(new GetTop50CompetitiveQuery(CurrentUser.User.Id, Domain.Enums.ChartType.Double)))
            .Concat(await Mediator.Send(new GetTop50CompetitiveQuery(CurrentUser.User.Id, Domain.Enums.ChartType.Single)))
            .Select(c => c.ChartId).Distinct().ToHashSet();
        var titles = await Mediator.Send(new GetTitleProgressQuery(MixEnum.Phoenix));
        _progress = titles.GetPushingTitle();
        var pushingLevel = (_progress.Title as PhoenixDifficultyTitle)!.Level;
        _rating = pushingLevel.BaseRating;
        _scores = (await Mediator.Send(new GetPhoenixRecordsQuery(CurrentUser.User.Id)))
            .ToDictionary(r => r.ChartId);
        var matchingScores = _chartDict.Values.Where(c => c.Level == pushingLevel && _scores.ContainsKey(c.Id) && _scores[c.Id].Score != null)
            .Select(c => _scores[c.Id])
            .ToArray();
        _averageRating = matchingScores.Any() ? (int)matchingScores.Average(s => s.Score!.Value.LetterGrade.GetModifier() * _rating) : 0;
        
        _stats = await Mediator.Send(new GetPlayerStatsQuery(CurrentUser.User.Id));
        _playerHistory = await Mediator.Send(new GetPlayerHistoryQuery(CurrentUser.User.Id));

        _myEntries = (await WeeklyTournaments.GetEntries(null, CancellationToken.None))
            .Where(e => e.UserId == CurrentUser.User.Id)
            .ToDictionary(e => e.ChartId);
        await RefreshRecommendations();
    }
}
