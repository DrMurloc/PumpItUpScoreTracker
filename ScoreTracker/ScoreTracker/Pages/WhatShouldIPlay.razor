@page "/WhatShouldIPlay"
@page "/"
@using MediatR
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.Models
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Domain.SecondaryPorts
@using ScoreTracker.Web.Services.Contracts

<PageTitle>What Should I Play</PageTitle>

<MudText Typo="Typo.h3">What Should I Play?</MudText>
<br/>
@foreach (var key in _descriptions.Keys)
{
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h4">
                @key
                <MudTooltip Text="@_descriptions[key]">
                    <MudIcon Color="Color.Info" Size="Size.Small" Icon="@Icons.Material.Filled.QuestionMark" ></MudIcon>
                </MudTooltip>

            </MudText>
        </MudItem>
        @foreach (var chart in _charts[key])
        {
            <MudItem xs="6" sm="3" md="2">

                <MudCard>
                    <MudCardMedia Height="100" Image="@chart.Song.ImagePath.ToString()" />
                    @if (_scores.TryGetValue(chart.Id, out var score) && score.Score!=null)
                    {
                        
                        <MudCardContent>
                            <MudText>@score.Score (@score.Score?.LetterGrade.GetName()) @(score.Plate?.GetShorthand())</MudText>
                        </MudCardContent>
                    }
                    <MudCardActions>
                        
                        <MudImage Src="@chart.DifficultyBubblePath" Height="35" Alt="@chart.DifficultyString" ObjectFit="ObjectFit.ScaleDown"></MudImage>
                        <MudSpacer></MudSpacer>
                        @if (_videos.ContainsKey(chart.Id))
                        {
                            <MudIconButton Icon="@Icons.Custom.Brands.YouTube" OnClick="@(() => ShowVideo(_videos[chart.Id],chart))"></MudIconButton>

                        }
                        else
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Search" Href="@ChartSearch(chart)" Target="_blank"></MudIconButton>

                        }

                    </MudCardActions>

                </MudCard>
            </MudItem>
        }
    </MudGrid>
}
<MudDialog @bind-IsVisible="_showVideoDialog">
    <DialogContent>
        <iframe class="video"
                id="chartVideoFrame"
                src="@(_currentVideo + "?autoplay=1")"
                allow="autoplay; encrypted-media"
                allowfullscreen></iframe>
    </DialogContent>

    <DialogActions>
        <MudSpacer></MudSpacer>
        <MudTooltip Text=@L["Report Video Tooltip"]>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Report" OnClick="NotifyBadVideo">@L["Report Video"]</MudButton>
        </MudTooltip>
        <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Close" OnClick="()=>_showVideoDialog=false">@L["Close"]</MudButton>
    </DialogActions>
</MudDialog>


@inject IMediator Mediator
@inject ICurrentUserAccessor CurrentUser;
@inject NavigationManager NavManager;
@inject IUiSettingsAccessor UiSettings;

@inject IAdminNotificationClient Notifications;
@inject ISnackbar Snackbar;
@inject IPhoenixRecordRepository PhoenixRecords;

@code {
    private bool _showVideoDialog;
    private string _currentVideoDescription;
    private string _currentVideo = string.Empty;
    private string ChartSearch(Chart chart)
    {
        var searchString = "Pump It Up " + chart.Song.Name + " " + chart.DifficultyString;
        return $"https://www.youtube.com/results?search_query={searchString.Replace("%", "Percent ").Replace(" ", "+")}";
    }
    private IDictionary<Name, string> _descriptions = new Dictionary<Name, string>();
    private IDictionary<Name, IEnumerable<Chart>> _charts = new Dictionary<Name, IEnumerable<Chart>>();
    private IDictionary<Guid, RecordedPhoenixScore> _scores = new Dictionary<Guid, RecordedPhoenixScore>();
    private IDictionary<Guid, string> _videos = new Dictionary<Guid, string>();
    private void ShowVideo(string url, Chart chart)
    {
        _showVideoDialog = true;
        _currentVideo = url;
        _currentVideoDescription = $"{chart.Song.Name} - {chart.DifficultyString}";
        StateHasChanged();
    }
    private async Task NotifyBadVideo()
    {
        await Notifications.NotifyAdmin($"The video for{_currentVideoDescription} was reported by {(CurrentUser.IsLoggedIn ? CurrentUser.User.Name : "Unknown")}", CancellationToken.None);
        Snackbar.Add("Notification was sent", Severity.Success);
    }
    protected override async Task OnInitializedAsync()
    {
        if (!CurrentUser.IsLoggedIn)
        {
            NavManager.NavigateTo("/Login");
        }
        var recommendations = (await Mediator.Send(new GetRecommendedChartsQuery())).ToArray();
        var charts = (await Mediator.Send(new GetChartsQuery(MixEnum.Phoenix)))
            .ToDictionary(c => c.Id);
        _scores = (await Mediator.Send(new GetPhoenixRecordsQuery(CurrentUser.User.Id)))
            .ToDictionary(r => r.ChartId);
        _videos=(await Mediator.Send(new GetChartVideosQuery())).ToDictionary(c => c.ChartId,c=>c.VideoUrl.ToString());
        _charts = recommendations.GroupBy(r => r.Category).ToDictionary(g => g.Key, g => g.Select(r => charts[r.ChartId]).ToArray().AsEnumerable());
        _descriptions = recommendations.GroupBy(r => r.Category).ToDictionary(g => g.Key, g => g.First().Explanation);



    }
}
