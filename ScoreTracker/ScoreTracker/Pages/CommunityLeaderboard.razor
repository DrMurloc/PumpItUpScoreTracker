@page "/Community/Leaderboard"
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.SecondaryPorts
@using ScoreTracker.Domain.Records
@using MediatR
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using ScoreTracker.Application.Commands
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Exceptions
@using ScoreTracker.Domain.Models
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.PersonalProgress
@using ScoreTracker.PersonalProgress.Queries
@using ChartType = ScoreTracker.Domain.Enums.ChartType
@using System.Web
@using ScoreTracker.Web.Models
<PageTitle>Communities</PageTitle>

<MudSelect T="LeaderboardType" Value="_currentType" ValueChanged="SetType" Label="Leaderboard Type">
    <MudSelectItem T="LeaderboardType" Value="LeaderboardType.Total">Total Rating</MudSelectItem>
    <MudSelectItem T="LeaderboardType" Value="LeaderboardType.Combined">Top 50 Charts</MudSelectItem>
    <MudSelectItem T="LeaderboardType" Value="LeaderboardType.Singles">Top 50 Singles</MudSelectItem>
    <MudSelectItem T="LeaderboardType" Value="LeaderboardType.Doubles">Top 50 Doubles</MudSelectItem>
    <MudSelectItem T="LeaderboardType" Value="LeaderboardType.CoOp">Total CoOp Rating</MudSelectItem>
</MudSelect>
<br/>
<MudTable T="LeaderboardEntry" Items="_entries" Breakpoint="Breakpoint.None">
    <ToolBarContent>
        <MudText Typo="Typo.h4">@HttpUtility.UrlDecode(CommunityName)</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>

            <MudTableSortLabel T="LeaderboardEntry" SortBy="@(e => e.place)">Place</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="LeaderboardEntry" SortBy="@(e => e.PlayerName.ToString())">Name</MudTableSortLabel>
        </MudTh>

        <MudTh>
            <MudTableSortLabel T="LeaderboardEntry" SortBy="@(e => e.Rating)">Rating</MudTableSortLabel>
        </MudTh>
        @if (_currentType != LeaderboardType.Total)
        {
            @if (_currentType != LeaderboardType.CoOp)
            {
                <MudTh>
                    <MudTableSortLabel T="LeaderboardEntry" SortBy="@(e => (int)e.AverageLevel)">Average Level</MudTableSortLabel>
                </MudTh>
            }
            <MudTh>
                <MudTableSortLabel T="LeaderboardEntry" SortBy="@(e => (int)e.Score)">Average Score</MudTableSortLabel>
            </MudTh>
        }
        @if (_currentType == LeaderboardType.Total)
        {

            <MudTh>
                <MudTableSortLabel T="LeaderboardEntry" SortBy="@(e => (int)e.HighestLevel)">Highest Level</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel T="LeaderboardEntry" SortBy="@(e => (int)e.ClearCount)">Clear Count</MudTableSortLabel>
            </MudTh>
        }
        @if (_currentType != LeaderboardType.Total && _currentType != LeaderboardType.CoOp)
        {
            <MudTh>
                View Charts
            </MudTh>
        }
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            @context.place
        </MudTd>
        <MudTd>
            <MudTooltip Text="@context.UserId.ToString()">@context.PlayerName</MudTooltip>
        </MudTd>
        <MudTd>
            <MudText Style=@($"color:{context.Color}")>@context.Rating</MudText>

        </MudTd>
        @if (_currentType != LeaderboardType.Total)
        {
            @if (_currentType != LeaderboardType.CoOp)
            {
                <MudTd>
                    @context.AverageLevel
                </MudTd>
            }
            <MudTd>
                @context.Score (@context.Score.LetterGrade.GetName())
            </MudTd>
        }
        @if (_currentType == LeaderboardType.Total)
        {

            <MudTd>
                @context.HighestLevel
            </MudTd>
            <MudTh>
                @context.ClearCount
            </MudTh>
        }
        @if (_currentType != LeaderboardType.Total && _currentType != LeaderboardType.CoOp)
        {
            <MudTd>
                <MudButton StartIcon="@Icons.Material.Filled.ViewList" Variant="Variant.Text" OnClick="() => ShowUserData(context.UserId, _currentType == LeaderboardType.Singles ? ChartType.Single : _currentType == LeaderboardType.Doubles ? ChartType.Double : null)">View Charts</MudButton>
            </MudTd>
        }
    </RowTemplate>
    <ChildRowContent>
        @if (_showingUserId == context.UserId)
        {
            <td colspan="@Colspan">
                <MudGrid>
                    @foreach (var entry in _scores)
                    {

                        <MudItem xs="4" sm="3" md="2">
                            <MudCard>
                                <MudCardMedia Height="150" Image="@entry.Chart.Song.ImagePath.ToString()"/>
                                <MudCardContent>
                                    <MudTooltip Text=@($"{entry.Chart.Song.Name} {entry.Chart.DifficultyString}")>

                                        <MudImage Src="@entry.Chart.DifficultyBubblePath" Height="35" Alt="@entry.Chart.DifficultyString" ObjectFit="ObjectFit.ScaleDown"></MudImage>

                                    </MudTooltip>
                                    <MudTooltip Text=@($"{entry.Rating} Rating")>
                                        <MudText>
                                            @entry.Score (@entry.Score.LetterGrade.GetName())
                                        </MudText>
                                    </MudTooltip>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            </td>
        }
    </ChildRowContent>
    <PagerContent>
        <MudTablePager></MudTablePager>
    </PagerContent>
</MudTable>

<br/>
<MudText Style="color:#0000FF">Top Player</MudText>
<br />
<MudText Style="color:#00FF00">Top 33%</MudText>
<br />
<MudText Style="color:#FF0000">Top 66%</MudText>
<br />
<MudText Style="color:#FFFFFF">Bottom 33%</MudText>
<br />
@inject IMediator Mediator;
@inject ICurrentUserAccessor CurrentUser;
@inject NavigationManager NavManager;
@code {
    private Guid _showingUserId = Guid.Empty;
    private ChartType? _chartType = null;
    private int Colspan => _currentType == LeaderboardType.CoOp ? 4 : _currentType == LeaderboardType.Total ? 5 : 6;
    private async Task ShowUserData(Guid userId, ChartType? chartType)
    {
        if (_showingUserId == userId && _chartType==chartType)
        {
            _showingUserId = Guid.Empty;
            _chartType = null;
            return;
        }
        var scoringConfig = PlayerRatingSaga.Scoring;

        _scores = (await Mediator.Send(new GetTop50ForPlayerQuery(userId, chartType)))
            .Select(s => new ScoreEntry(_charts[s.ChartId], s.Score ?? 0, scoringConfig.GetScore(_charts[s.ChartId], s.Score ?? 0, s.Plate ?? PhoenixPlate.ExtremeGame, false)))
            .ToArray();
        _showingUserId = userId;
        _chartType = chartType;

    }
    private IEnumerable<CommunityLeaderboardRecord> _leaderboard = Array.Empty<CommunityLeaderboardRecord>();
    private IEnumerable<ScoreEntry> _scores = Array.Empty<ScoreEntry>();
    private IDictionary<Guid, Chart> _charts = new Dictionary<Guid, Chart>();
    private RatingColorSelector _colorSelector = new RatingColorSelector(Array.Empty<CommunityLeaderboardRecord>());
    [Parameter]
    [SupplyParameterFromQuery]public string CommunityName { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var communityName = HttpUtility.UrlDecode(CommunityName);
        var community = await Mediator.Send(new GetCommunityQuery(communityName));
        _charts = (await Mediator.Send(new GetChartsQuery(MixEnum.Phoenix))).ToDictionary(c => c.Id);
        if (community.PrivacyType == CommunityPrivacyType.Private)
        {
            if (!CurrentUser.IsLoggedIn)
            {
                NavManager.NavigateTo("/Communities");
                return;
            }
            var myCommunities = await Mediator.Send(new GetMyCommunitiesQuery());
            if (myCommunities.All(c => c.CommunityName != communityName))
            {

                NavManager.NavigateTo("/Communities");
                return;
            }
        }
        _leaderboard = (await Mediator.Send(new GetCommunityLeaderboardQuery(communityName))).ToArray();
        _colorSelector = new RatingColorSelector(_leaderboard);
        SetType(LeaderboardType.Combined);
    }

    private IEnumerable<LeaderboardEntry> _entries = Array.Empty<LeaderboardEntry>();
    private LeaderboardType _currentType = LeaderboardType.Combined;
    private void SetType(LeaderboardType type)
    {
        switch (type)
        {
            case LeaderboardType.Total:
                _entries = _leaderboard.OrderByDescending(l=>l.TotalRating).Select((l,i) => new LeaderboardEntry(i+1,l.PlayerName, l.UserId, l.TotalRating, 0, 0, _colorSelector.TotalScale.GetColor(l.TotalRating),l.HighestLevel,l.ClearCount));
                break;
                
            case LeaderboardType.Combined:
                _entries = _leaderboard.OrderByDescending(l => l.SkillRating).Select((l, i) => new LeaderboardEntry(i + 1,l.PlayerName, l.UserId, l.SkillRating, l.SkillScore, l.SkillLevel, _colorSelector.SkillScale.GetColor(l.SkillRating), l.HighestLevel, l.ClearCount));
                break;
            case LeaderboardType.Singles:
                _entries = _leaderboard.OrderByDescending(l => l.SinglesRating).Select((l, i) => new LeaderboardEntry(i + 1, l.PlayerName, l.UserId, l.SinglesRating, l.SinglesScore, l.SinglesLevel, _colorSelector.SinglesScale.GetColor(l.SinglesRating), l.HighestLevel, l.ClearCount));
                break;
                    
            case LeaderboardType.Doubles:
                _entries = _leaderboard.OrderByDescending(l => l.DoublesRating).Select((l, i) => new LeaderboardEntry(i + 1, l.PlayerName, l.UserId, l.DoublesRating, l.DoublesScore, l.DoublesLevel, _colorSelector.DoublesScale.GetColor(l.DoublesRating), l.HighestLevel, l.ClearCount));
                break;
            case LeaderboardType.CoOp:
                _entries = _leaderboard.OrderByDescending(l => l.CoOpRating).Select((l, i) => new LeaderboardEntry(i + 1, l.PlayerName, l.UserId, l.CoOpRating, l.CoOpScore, 0, _colorSelector.CoOpScale.GetColor(l.CoOpRating), l.HighestLevel, l.ClearCount));
                break;

        }
        _currentType = type;
    }
    private sealed record ScoreEntry(Chart Chart, PhoenixScore Score, int Rating);

    private sealed record LeaderboardEntry(int place,Name PlayerName, Guid UserId, int Rating, PhoenixScore Score, double AverageLevel, string Color, int HighestLevel, int ClearCount)
    {

    }
    private enum LeaderboardType
    {
        
        Total,
        Combined,
        Singles,
        Doubles,
        CoOp
    }
}