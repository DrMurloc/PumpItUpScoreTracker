@page "/"
@using MediatR
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.Models
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Application.Commands
@using ScoreTracker.Domain.Records
@using ScoreTracker.Domain.SecondaryPorts
@using ScoreTracker.Web.Components;
@using ScoreTracker.Web.Services.Contracts
@using ChartType = ScoreTracker.Domain.Enums.ChartType

<PageTitle>Record Attempt</PageTitle>


@inject IMediator Mediator
@inject NavigationManager NavManager
@inject ICurrentUserAccessor CurrentUser;
@inject IUiSettingsAccessor UiSettings;
<MudPaper MaxWidth="500px">
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h5">Record Score</MudText>
        </MudCardHeader>
        <MudCardContent>
            @if (!_songNames.Any())
            {
                <MudProgressCircular Indeterminate="true"></MudProgressCircular>
            }
            else
            {
                <MudSelect T="MixEnum" AdornmentIcon="@Icons.Material.Filled.LibraryMusic" Label="Mix" Value="_currentMix" ValueChanged="MixChanged">
                    @foreach (var mix in Enum.GetValues<MixEnum>())
                    {
                        <MudSelectItem T="MixEnum" Value="mix">@mix</MudSelectItem>
                    }
                </MudSelect>
                <br/>
                    <MudAutocomplete T="string"
                                     @ref="_autocomplete"
                                     Value="@_selectedSongName"
                                     AdornmentIcon="@Icons.Material.Filled.Search"
                                     ResetValueOnEmptyText="true"
                                     CoerceText="true"
                                     Label="Song"
                                     SearchFunc="@SearchSongs"
                                     ValueChanged="@SelectSong">

                    </MudAutocomplete>
                <br/>
            }
            @if (_charts != null && _charts.Any())
            {
                <div class="d-flex justify-center">
                    <MudImage Fluid="true" Src="@_charts.First().Song.ImagePath.ToString()" Alt="@_charts.First().Song.Name" Elevation="25" ObjectFit="ObjectFit.Contain"/>
                </div>
                <MudChipSet Filter="true" Mandatory="true" SelectedValuesChanged="@SelectChart">
                    @foreach (var chart in _charts.OrderBy(c => c.Type).ThenBy(c => c.Level))
                    {
                        <MudChip Text="@chart.DifficultyString" Style="@StyleFromChartType(chart.Type)" Value="@chart"></MudChip>
                    }
                </MudChipSet>
                <br/>
            }
            @if (_selectedChart != null && !string.IsNullOrWhiteSpace(_selectedSongName))
            {
                <EditChartGrid ChartId="_selectedChart.Id" CurrentMix="_currentMix"></EditChartGrid>
            }
        </MudCardContent>
    </MudCard>
</MudPaper>
@code {
    private MixEnum _currentMix = MixEnum.XX;
    private IEnumerable<Name> _songNames = Array.Empty<Name>();
    private IEnumerable<Chart>? _charts;

    private async Task MixChanged(MixEnum newMix)
    {
        _currentMix = newMix;
        await UiSettings.SetSelectedMix(newMix);
        _songNames = await Mediator.Send(new GetSongNamesQuery(_currentMix));
        _selectedChart = null;
        if (!_songNames.Contains(_selectedSongName))
        {
            
            _selectedSongName = string.Empty;
            _charts = Array.Empty<Chart>();
        }
        else
        {
            await SelectSong(_selectedSongName);
        }
    }
    private MudAutocomplete<string> _autocomplete;
    private string _selectedSongName = string.Empty;
    private Chart? _selectedChart;
    protected override async Task OnInitializedAsync()
    {
        _currentMix = await UiSettings.GetSelectedMix();
        if (!CurrentUser.IsLoggedIn)
        {
            NavManager.NavigateTo("/Charts");
            return;
        }
        _songNames = await Mediator.Send(new GetSongNamesQuery(_currentMix));

    }

    private static string StyleFromChartType(ChartType chartType)
    {
        return chartType switch
        {
            ChartType.Single => $"color:{Colors.Grey.Lighten5}; background:{Colors.Red.Default}",
            ChartType.Double =>$"color:{Colors.Grey.Lighten5}; background:{Colors.Green.Default}",
            ChartType.CoOp => $"color:{Colors.Grey.Darken4}; background:{Colors.Yellow.Default}",
            ChartType.SinglePerformance => $"color:{Colors.Grey.Lighten5}; background:{Colors.Purple.Default}",
            ChartType.DoublePerformance => $"color:{Colors.Grey.Darken4}; background:{Colors.Cyan.Lighten2}",
            _ => $"color:{Colors.Grey.Lighten5}; background:{Colors.Red.Default}"
            };
    }
    private Task<IEnumerable<string>> SearchSongs(string? value)
    {
        return Task.FromResult(string.IsNullOrWhiteSpace(value)
            ? _songNames.Select(s => s.ToString())
            : _songNames.Where(name => name.ToString().Contains(value, StringComparison.OrdinalIgnoreCase)).Select(name => (string)name));
    }
    
    private async Task SelectSong(string stringValue)
    {
        _selectedSongName = stringValue;
        if (_autocomplete.IsOpen)
        {
            await _autocomplete.ToggleMenu();
        }
        _selectedChart = null;
        if (!Name.TryParse(stringValue,out var name))
        {
            _charts = Array.Empty<Chart>();
            return;
        }
        _charts = await Mediator.Send(new GetChartsBySongQuery(_currentMix,name));
    }
    
    private void SelectChart(IEnumerable<object> charts)
    {
        _selectedChart = charts.FirstOrDefault() as Chart;
    }
    

}
