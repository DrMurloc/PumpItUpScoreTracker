@page "/Record"
@using MediatR
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.Models
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Application.Commands
@using ChartType = ScoreTracker.Domain.Enums.ChartType

<PageTitle>Record Attempt</PageTitle>


@inject IMediator Mediator

<MudCard>
    <MudCardContent>
        @if (_songNames == null)
        {
            <p>Loading...</p>
        }
        else
        {

            <MudItem xs="12" sm="6" md="4">
                <MudAutocomplete @ref="_autocomplete" T="string" Value="@_selectedSongName" ResetValueOnEmptyText="true" AutoFocus="true" CoerceText="true" Label="Song" SearchFunc="@SearchSongs" ValueChanged="@SelectSong">

                </MudAutocomplete>
            </MudItem>
            <br/>
        }
        @if (_charts != null)
        {
            <MudChipSet Filter="true" Mandatory="true" SelectedValuesChanged="@SelectChart">
                @foreach (var chart in _charts.OrderBy(c=>c.Type).ThenBy(c=>c.Level))
                {
                    <MudChip Text="@chart.DifficultyString" Style="@StyleFromChartType(chart.Type)" Value="@chart"></MudChip>
                }
            </MudChipSet>
            <br/>
        }
        @if (_selectedChart != null && !string.IsNullOrWhiteSpace(_selectedSongName))
        {
            
            <MudSelect T="LetterGrade" @bind-Value="_selectedLetterGrade">
                @foreach (var letterGrade in Enum.GetValues<LetterGrade>())
                {
                    <MudSelectItem T="LetterGrade" Value="@letterGrade">@letterGrade.ToString()</MudSelectItem>
                }
            </MudSelect>
            <br/>
            <MudCheckBox @bind-Checked="@_isBroken" Label="Broken"></MudCheckBox>
        }
    </MudCardContent>
    <MudCardActions>
        <MudButton Disabled="_selectedChart==null || string.IsNullOrWhiteSpace(_selectedSongName)" Variant="Variant.Filled" Color="Color.Primary" OnClick="@SubmitAttempt">Record Attempt</MudButton>
    </MudCardActions>
</MudCard>
@code {
    private IEnumerable<Name>? _songNames;
    private IEnumerable<Chart>? _charts;
    private MudAutocomplete<string> _autocomplete;
    private string _selectedSongName = string.Empty;
    private Chart? _selectedChart;
    private LetterGrade _selectedLetterGrade = LetterGrade.A;
    private bool _isBroken = false;
    protected override async Task OnInitializedAsync()
    {
        _songNames = await Mediator.Send(new GetSongNamesQuery());

    }

    private static string StyleFromChartType(ChartType chartType)
    {
        return chartType switch
        {
            ChartType.Single => $"color:{Colors.Grey.Lighten5}; background:{Colors.Red.Default}",
            ChartType.Double =>$"color:{Colors.Grey.Lighten5}; background:{Colors.Green.Default}",
            ChartType.CoOp => $"color:{Colors.Grey.Darken4}; background:{Colors.Yellow.Default}",
            ChartType.SinglePerformance => $"color:{Colors.Grey.Lighten5}; background:{Colors.Purple.Default}",
            ChartType.DoublePerformance => $"color:{Colors.Grey.Darken4}; background:{Colors.Cyan.Lighten2}",
            _ => $"color:{Colors.Grey.Lighten5}; background:{Colors.Red.Default}"
            };
    }
    private Task<IEnumerable<string>> SearchSongs(string? value)
    {
        return Task.FromResult(_songNames?.Where(name => name.ToString().Contains(value??string.Empty, StringComparison.OrdinalIgnoreCase)).Select(name => (string)name) ?? Array.Empty<string>());
    }
    private async Task SelectSong(string stringValue)
    {
        _selectedSongName = stringValue;
        if (!Name.TryParse(stringValue,out var name))
        {
            _charts = Array.Empty<Chart>();
            return;
        }
        _charts = await Mediator.Send(new GetChartsBySongQuery(name));
        await _autocomplete.ToggleMenu();
    }
    
    private async Task SelectChart(IEnumerable<object> charts)
    {
        _selectedChart = charts.FirstOrDefault() as Chart;
        await GetBestAttempt();
    }

    private async Task GetBestAttempt()
    {
        if (!Name.TryParse(_selectedSongName, out var name) || _selectedChart == null)
        {
            return;
        }
        var result = await Mediator.Send(new GetBestChartAttemptQuery(name, _selectedChart.Type, _selectedChart.Level));
        if (result.BestAttempt != null)
        {
            _selectedLetterGrade = result.BestAttempt.LetterGrade;
            _isBroken = result.BestAttempt.IsBroken;
        }
    }
    private async Task SubmitAttempt()
    {
        if (!Name.TryParse(_selectedSongName, out var songName) || _selectedChart == null)
        {
            return;
        }
        await Mediator.Send(new RecordAttemptCommand(songName, _selectedChart.Level, _selectedChart.Type, _selectedLetterGrade, _isBroken));
    }
}
