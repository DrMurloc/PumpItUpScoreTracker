@page "/"
@using MediatR
@using ScoreTracker.Application.Commands
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Web.Dtos
@using ChartType = ScoreTracker.Domain.Enums.ChartType;
<PageTitle>Best Attempts</PageTitle>
<MudSelect T="DifficultyLevel" Value="@_selectedLevel" ValueChanged="ChangeDifficulty">
    @for (var level = DifficultyLevel.Min; level <DifficultyLevel.Max; level++)
    {
        var currentLevel = level;
        <MudSelectItem Value="@currentLevel">@currentLevel</MudSelectItem>
    }
    <MudSelectItem Value="DifficultyLevel.From(28)">28</MudSelectItem>
</MudSelect>

<MudDataGrid T="BestAttemptDto" Items="_bestAttempts" Hover="true" Striped="true" Dense="true" ReadOnly="false"
             EditMode="@DataGridEditMode.Cell" CommittedItemChanges="@UpdateBest" EditTrigger="@DataGridEditTrigger.OnRowClick">
    <Columns>
        <Column T="BestAttemptDto" Field="SongName" Title="Song" IsEditable="false"></Column>
        <Column T="BestAttemptDto" Field="ChartType" Title="Type" IsEditable="false"></Column>
        <Column T="BestAttemptDto" Field="LetterGrade" Title="Letter">
            <EditTemplate>
                <MudSelect T="string" Value="@context.Item.LetterGrade" ValueChanged="@(newValue => SetLetter(context.Item,newValue))" Clearable="true" Margin="@Margin.Dense">
                    @foreach (var letterGrade in Enum.GetValues<LetterGrade>())
                    {
                        <MudSelectItem Value="@letterGrade.ToString()">@letterGrade.ToString()</MudSelectItem>
                    }
                </MudSelect>
            </EditTemplate>
        </Column>
        <Column T="BestAttemptDto" Field="IsBroken" Title="Broken">
            <EditTemplate>
                <MudCheckBox T="bool" Checked="context.Item.IsBroken" CheckedChanged="@(newValue=>SetBroken(context.Item,newValue))" Required Margin="@Margin.Dense"></MudCheckBox>
            </EditTemplate>
        </Column>
    </Columns>
</MudDataGrid>

@inject IMediator Mediator

@code {
    private IEnumerable<BestAttemptDto> _bestAttempts = Array.Empty<BestAttemptDto>();
    private DifficultyLevel _selectedLevel = 14;
    private async Task ChangeDifficulty(DifficultyLevel level)
    {
        _selectedLevel = level;
        _bestAttempts = (await Mediator.Send(new GetBestChartAttemptsByDifficultyQuery(level))).Select(BestAttemptDto.From).ToArray();
    }
    protected override async Task OnInitializedAsync()
    {
        await ChangeDifficulty(_selectedLevel);

    }

    private async Task SetBroken(BestAttemptDto dto, bool newBroken)
    {
        dto.IsBroken = newBroken;
        await UpdateBest(dto);
    }
    private async Task SetLetter(BestAttemptDto dto, string newLetterGrade)
    {
        dto.LetterGrade = newLetterGrade;
        await UpdateBest(dto);
    }
    private async Task UpdateBest(BestAttemptDto dto)
    {
        await Mediator.Send(new UpdateBestAttemptCommand(dto.SongName, Enum.Parse<ChartType>(dto.ChartType), dto.Level, Enum.TryParse<LetterGrade>(dto.LetterGrade,out var grade)?grade:null, dto.IsBroken));
    }
}
