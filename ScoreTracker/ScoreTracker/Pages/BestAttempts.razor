@page "/"
@using MediatR
@using ScoreTracker.Application.Commands
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Web.Dtos
@using ChartType = ScoreTracker.Domain.Enums.ChartType;
<PageTitle>Best Attempts</PageTitle>

<MudDataGrid @ref="_dataGrid" T="BestAttemptDto" Items="_bestAttempts" Hover="true" ReadOnly="false"
             EditMode="@DataGridEditMode.Cell" CommittedItemChanges="@UpdateBest" EditTrigger="@DataGridEditTrigger.OnRowClick"
             Groupable="true" FixedHeader="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Best Attempts</MudText>
        <MudSpacer />
        <MudSelect T="string" Label="Difficulty Level" Value="@_selectedFilter" ValueChanged="ChangeSelectedFilter">
            @for (var level = DifficultyLevel.Min; level <DifficultyLevel.Max; level++)
            {
                var currentLevel = level;
                <MudSelectItem Value="@currentLevel.ToString()">@currentLevel</MudSelectItem>
            }
            <MudSelectItem Value="@("28")">28</MudSelectItem>
            <MudSelectItem Value="@(nameof(ChartType.CoOp))">CoOp</MudSelectItem>
        </MudSelect>
    </ToolBarContent>
    <Columns>
        <Column T="BestAttemptDto" Field="ImagePath" Title="Image" IsEditable="false">
            <CellTemplate>
                <MudImage Src="@context.Item.ImagePath" Height="35" Alt="@context.Item.SongName" Elevation="25" ObjectFit="ObjectFit.ScaleDown"/>
            </CellTemplate>

        </Column>
        <Column T="BestAttemptDto" Field="SongName" Title="Song" IsEditable="false">
        </Column>
        <Column T="BestAttemptDto" Field="Category" Title="Type" IsEditable="false" Grouping="true">
            <GroupTemplate>
                <span style="font-weight: bold">@context.Grouping.Key
                    @if (context.Grouping.Any(i => !IsPassing(i)))
                    {
                        <MudChip Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small">Not Passed: @context.Grouping.Count(i => !IsPassing(i))</MudChip>
                    }
                    @if (context.Grouping.Any(IsPassing))
                    {
                        <MudChip Variant="Variant.Outlined" Color="Color.Success" Size="Size.Small">Passed: @context.Grouping.Count(IsPassing)</MudChip>
                    }
                </span>
            </GroupTemplate>
        </Column>
        <Column T="BestAttemptDto" Field="LetterGrade" Title="Letter">
            <EditTemplate>
                <MudSelect T="string" Value="@context.Item.LetterGrade" ValueChanged="@(newValue => SetLetter(context.Item, newValue))" Clearable="true" Margin="@Margin.Dense">
                    @foreach (var letterGrade in Enum.GetValues<LetterGrade>())
                    {
                        <MudSelectItem Value="@letterGrade.ToString()">@letterGrade.ToString()</MudSelectItem>
                    }
                </MudSelect>
            </EditTemplate>
        </Column>
        <Column T="BestAttemptDto" Field="IsBroken" Title="Broken">
            <EditTemplate>
                <MudCheckBox T="bool" Checked="context.Item.IsBroken" CheckedChanged="@(newValue => SetBroken(context.Item, newValue))" Required Margin="@Margin.Dense"></MudCheckBox>
            </EditTemplate>
            <FooterTemplate>
                Passed @context.Items.Count(IsPassing) / @context.Items.Count()
            </FooterTemplate>
        </Column>
    </Columns>
</MudDataGrid>

@inject IMediator Mediator

@code {
    private MudDataGrid<BestAttemptDto>? _dataGrid;
    private IEnumerable<BestAttemptDto> _bestAttempts = Array.Empty<BestAttemptDto>();

    private string _selectedFilter = "14";

    private static bool IsPassing(BestAttemptDto dto)
    {
        return !string.IsNullOrWhiteSpace(dto.LetterGrade) && !dto.IsBroken;
    }
    private async Task ChangeSelectedFilter(string filter)
    {
        _selectedFilter = filter;

        if (DifficultyLevel.TryParse(filter, out var level))
        {
            _bestAttempts = (await Mediator.Send(new GetBestChartAttemptsByDifficultyQuery(level))).Select(BestAttemptDto.From).ToArray();
            
        }
        else
        {
            _bestAttempts = filter switch
            {
                nameof(ChartType.CoOp) => (await Mediator.Send(new GetCoOpBestAttemptsQuery())).Select(BestAttemptDto.From).ToArray(),
                _ => _bestAttempts
                };
        }
        if (_dataGrid != null)
        {
            _dataGrid.Items = _bestAttempts;
            _dataGrid.GroupItems();
            _dataGrid.CollapseAllGroups();

        }
    }
    protected override async Task OnInitializedAsync()
    {
        await ChangeSelectedFilter(_selectedFilter);

    }

    private async Task SetBroken(BestAttemptDto dto, bool newBroken)
    {
        dto.IsBroken = newBroken;
        await UpdateBest(dto);
    }
    private async Task SetLetter(BestAttemptDto dto, string newLetterGrade)
    {
        dto.LetterGrade = newLetterGrade;
        await UpdateBest(dto);
    }
    private async Task UpdateBest(BestAttemptDto dto)
    {
        await Mediator.Send(new UpdateBestAttemptCommand(dto.SongName, Enum.Parse<ChartType>(dto.ChartType), dto.Level, Enum.TryParse<LetterGrade>(dto.LetterGrade,out var grade)?grade:null, dto.IsBroken));
    }
}
