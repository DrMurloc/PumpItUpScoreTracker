@page "/PhoenixCalculator"

@using ScoreTracker.Web.Services.Contracts
@using ScoreTracker.Domain.Records
@using ScoreTracker.Web.Dtos

<PageTitle>Upload Scores</PageTitle>
@if (ShowScoreUpload)
{
    <MudButton HtmlTag="label"
               Variant="@Variant.Filled"
               Color="@Color.Primary"
               StartIcon="@Icons.Filled.UploadFile"
               for="uploadInput">
        Upload Scores
    </MudButton>
}
<MudImage Src="https://piuimages.arroweclip.se/PhoenixBanner.png" Style="width:95%; max-width:800px;"></MudImage>
<MudGrid>
    <MudItem xs="12" sm="6">
        <MudTextField T="int" MaxLength="5" InputType="InputType.Number" Label="Perfects" Value="_perfects" ValueChanged="n=>SetScore(n,_greats,_goods,_bads,_misses,_maxCombo)" Immediate="true" DebounceInterval="200"></MudTextField>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudTextField T="int" MaxLength="5" InputType="InputType.Number" Label="Greats" Value="_greats" ValueChanged="n=>SetScore(_perfects,n,_goods,_bads,_misses,_maxCombo)" Immediate="true" DebounceInterval="200"></MudTextField>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudTextField T="int" MaxLength="5" InputType="InputType.Number" Label="Goods" Value="_goods" ValueChanged="n=>SetScore(_perfects,_greats,n,_bads,_misses,_maxCombo)" Immediate="true" DebounceInterval="200"></MudTextField>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudTextField T="int" MaxLength="5" InputType="InputType.Number" Label="Bads" Value="_bads" ValueChanged="n=>SetScore(_perfects,_greats,_goods,n,_misses,_maxCombo)" Immediate="true" DebounceInterval="200"></MudTextField>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudTextField T="int" MaxLength="5" InputType="InputType.Number" Label="Misses" Value="_misses" ValueChanged="n=>SetScore(_perfects,_greats,_goods,_bads,n,_maxCombo)" Immediate="true" DebounceInterval="200"></MudTextField></MudItem>
    <MudItem xs="12" sm="6">
        <MudTextField T="int" MaxLength="5" InputType="InputType.Number" Label="Max Combo" Value="_maxCombo" ValueChanged="n=>SetScore(_perfects,_greats,_goods,_bads,_misses,n)" Immediate="true" DebounceInterval="200"></MudTextField>
    </MudItem>
    <MudItem xs="12">
        <MudText>
            <b>Score:</b> @Score.CalculatePhoenixScore
        </MudText>
        <MudText>
            <b>Letter:</b> @Score.LetterGrade
        </MudText>
        <MudText>
            <b>Plate:</b> @Score.PlateText
        </MudText>
        @if (Score.IsValid)
        {
            <MudText>
                <b>Next Letter:</b> @Score.NextLetterGrade()
            </MudText>
            
        }
    </MudItem>
    <MudItem xs="12">

        @if (_showDistribution)
        {

            <ApexChart TItem="JudgementAllocation"
                   Title="Score Distribution">
                <ApexPointSeries TItem="JudgementAllocation"
                                 Items="_yourAllocations"
                                 Name="Your Spread"
                                 SeriesType="SeriesType.Bar"
                                 XValue="@(e => e.Type)"
                                 YAggregate="@(e => e.Sum(z=>z.Count))"
                                 OrderByDescending="e=>e.Y"
                                 ShowDataLabels />

                <ApexPointSeries TItem="JudgementAllocation"
                                 Items="_averageAllocation"
                                 Name="Average Spread"
                                 SeriesType="SeriesType.Bar"
                             XValue="@(e => e.Type)"
                             YAggregate="@(e => e.Sum(z=>z.Count))"
                                 OrderByDescending="e=>e.Y"
                                 ShowDataLabels />
            </ApexChart>
        }
        else
        {
            <MudButton Color="Color.Primary" Disabled="!Score.IsValid" Variant="Variant.Outlined" OnClick="ShowDistribution">Show Score Distribution</MudButton>
        }
    </MudItem>
</MudGrid>
<InputFile id="uploadInput" OnChange="@UploadFile" hidden accept=".png,.jpg,jpeg" />
<br/>
<br/>
<MudText>
    Shout out to MR_WEQ for reverse engineering this score formula!<br/>
</MudText>

<MudImage Src="https://piuimages.arroweclip.se/PhoenixFormula.jpg" Style="max-width:85vw; width:auto;"></MudImage>
<br/>
<MudText>
    Note that Letter Grade and Plate Text formulas were pulled from the <MudButton Color="Color.Primary" Href="https://namu.wiki/w/%ED%8E%8C%ED%94%84%20%EC%9E%87%20%EC%97%85%202023%20PHOENIX" Target="_blank">Korean PIU Wikipedia</MudButton>, it is possible for there to be misalignment with actual game logic:<br />
    <br/><br/>
    SSS+: 995,000 points or more<br/>
    SSS: 990,000~994,999 points<br/>
    SS+: 985,000~989,999 points<br/>
    SS: 980,000~984,999 points<br/>
    S+: 975,000~979,999 points<br/>
    S: 970,000~974,999 points<br/>
    AAA+: 960,000~ 969,999 points<br/>
    AAA: 950,000~959,999 points<br/>
    AA+: 925,000 to 949,999 points<br/>
    AA: 900,000~924,999 points<br/>
    A+: 800,000 to 899,999 points<br/>
    A: 750,000 - 799,999 points<br/>
    B: 700,000 ~ 749,999 points<br/>
    C: ~ 699,999 points<br/><br/>
    Perfect Game: All Perfect (previous SSS)<br/>
    Ultimate Game: All Perfect + Great (Previous SS) <br/>
    Extreme Game: All Perfect + Great + Good <br/>
    Superb Game: No Miss (previous S)<br/>
    Marvelous Game: 5 misses or less<br/>
    Talented Game: 10 misses or less<br/>
    Fair Game: Less than 20 misses<br/>
    Rough Game: Over 20 misses
</MudText>
@inject ISnackbar Snackbar;
@inject IScoreImageExtractor ScoreExtractor;
@inject ILogger<PhoenixCalculator> Logger;
@code
{
    private ApexChart<ScoreDistributionDto> _distributionChart;
    private const bool ShowScoreUpload = false;

    private sealed record JudgementAllocation(string Type, int Count)
    {

    }
    private JudgementAllocation[] _averageAllocation = Array.Empty<JudgementAllocation>();
    private JudgementAllocation[] _yourAllocations = Array.Empty<JudgementAllocation>();

    private bool _showDistribution = false;
    private Task SetScore(int perfects, int greats, int goods, int bads, int misses, int maxCombo)
    {
        _showDistribution = false;
        _perfects = perfects;
        _greats = greats;
        _goods = goods;
        _bads = bads;
        _misses = misses;
        _maxCombo = maxCombo;
        Score = new(_perfects, _greats, _goods, _bads, _misses, _maxCombo);
        return Task.CompletedTask;

    }

    private Task ShowDistribution()
    {
        var scoreNoCombo = new ScoreScreen(_perfects, _greats, _goods, _bads, _misses, 0).CalculatePhoenixScore;
        var distribution = ScoreDistributionDto.Get(scoreNoCombo,Score.TotalCount);
        var averagePerfect = (distribution.MaxPerfect + distribution.MinPerfect) / 2;
        var averageGreat = (distribution.MaxGreat + distribution.MinGreat) / 2;
        var averageGood = (distribution.MaxGood + distribution.MinGood) / 2;
        var averageBad = (distribution.MaxBad + distribution.MinBad) / 2;
        var averageMiss = (distribution.MaxMiss + distribution.MinMiss) / 2;
        var scalingRatio = Score.TotalCount / (double)(averagePerfect + averageGreat + averageGood + averageBad + averageMiss);
        _averageAllocation = new JudgementAllocation[]
        {
            new("Perfects", (int)(averagePerfect*scalingRatio)),
            new("Greats", (int)(averageGreat*scalingRatio)),
            new("Goods", (int)(averageGood*scalingRatio)),
            new("Bads", (int)(averageBad*scalingRatio)),
            new("Misses",(int)(averageMiss*scalingRatio))
        };
        _yourAllocations = new JudgementAllocation[]
        {

            new("Perfects", _perfects),
            new("Greats", _greats),
            new("Goods",_goods),
            new("Bads",_bads),
            new("Misses", _misses)
        };

        _showDistribution = true;
        return Task.CompletedTask;

    }
    public IEnumerable<ScoreDistributionDto> ScoreDistributions = ScoreDistributionDto.DefaultList;
    private int _perfects = 0;
    private int _greats = 0;
    private int _goods = 0;
    private int _bads = 0;
    private int _misses = 0;
    private int _maxCombo = 0;
    private ScoreScreen Score = new (0, 0, 0, 0, 0, 0);
    

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        try
        {

            var score = await ScoreExtractor.GetScore(e.File, CancellationToken.None);
            Snackbar.Add("Done", Severity.Info);
        }
        catch (Exception er)
        {
            Snackbar.Add("Error", Severity.Error);
            Logger.LogError(er, "There was an error");
        }
    }
}
