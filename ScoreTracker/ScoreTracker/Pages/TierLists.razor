@page "/TierLists"
@using MediatR
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.Models
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Application.Commands
@using ScoreTracker.Domain.Records
@using ScoreTracker.Web.Components
@using ScoreTracker.Domain.SecondaryPorts
@using ScoreTracker.Web.Services.Contracts
@using ChartType = ScoreTracker.Domain.Enums.ChartType

<PageTitle>Record Attempt</PageTitle>


@inject IMediator Mediator
@inject ICurrentUserAccessor CurrentUser;
@inject NavigationManager NavManager;
@inject IUiSettingsAccessor UiSettings;
<MudGrid>

    <MudItem xs="12" sm="4">
        <MudSelect T="MixEnum" AdornmentIcon="@Icons.Material.Filled.LibraryMusic" Label="Mix" Value="_currentMix" ValueChanged="MixChanged">
            @foreach (var mix in Enum.GetValues<MixEnum>())
            {
                <MudSelectItem T="MixEnum" Value="mix">@mix</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    @if (ChartTypeFilter == nameof(ChartType.CoOp))
    {
        <MudItem xs="12" sm="4">
            <MudSelect T="int" AdornmentIcon="@Icons.Material.Filled.Bolt" Label="Players" Value="DifficultyFilter" ValueChanged="@(d => UpdateSelection(d, ChartTypeFilter, _coOpSortType))">
                @foreach (var level in Enumerable.Range(2, 4))
                {
                    <MudSelectItem T="int" Value="@level">@level</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="4">
            <MudSelect T="CoOpSortType" AdornmentIcon="@Icons.Material.Filled.Numbers" Label="CoOp Aggregation" Value="_coOpSortType" ValueChanged="@(d => UpdateSelection(DifficultyFilter, ChartTypeFilter, d))">
                <MudSelectItem T="CoOpSortType" Value="CoOpSortType.Average">Average</MudSelectItem>
                <MudSelectItem T="CoOpSortType" Value="CoOpSortType.EasiestPlayer">Easiest Player</MudSelectItem>
                <MudSelectItem T="CoOpSortType" Value="CoOpSortType.HardestPlayer">Hardest Player</MudSelectItem>
            </MudSelect>
        </MudItem>
    }
    else
    {
            
        <MudItem xs="12" sm="4">
            <MudSelect T="int" AdornmentIcon="@Icons.Material.Filled.Bolt" Label="Difficulty Level" Value="DifficultyFilter" ValueChanged="@(d => UpdateSelection(d, ChartTypeFilter, _coOpSortType))">
                
                <MudSelectItem T="int" Value="1">1</MudSelectItem>
                <MudSelectItem T="int" Value="2">2</MudSelectItem>
                <MudSelectItem T="int" Value="3">3</MudSelectItem>
                <MudSelectItem T="int" Value="4">4</MudSelectItem>
                <MudSelectItem T="int" Value="5">5</MudSelectItem>
                <MudSelectItem T="int" Value="6">6</MudSelectItem>
                <MudSelectItem T="int" Value="7">7</MudSelectItem>
                <MudSelectItem T="int" Value="8">8</MudSelectItem>
                <MudSelectItem T="int" Value="9">9</MudSelectItem>
                <MudSelectItem T="int" Value="10">10</MudSelectItem>
                <MudSelectItem T="int" Value="11">11</MudSelectItem>
                <MudSelectItem T="int" Value="12">12</MudSelectItem>
                <MudSelectItem T="int" Value="13">13</MudSelectItem>
                <MudSelectItem T="int" Value="14">14</MudSelectItem>
                <MudSelectItem T="int" Value="15">15</MudSelectItem>
                <MudSelectItem T="int" Value="16">16</MudSelectItem>
                <MudSelectItem T="int" Value="17">17</MudSelectItem>
                <MudSelectItem T="int" Value="18">18</MudSelectItem>
                <MudSelectItem T="int" Value="19">19</MudSelectItem>
                <MudSelectItem T="int" Value="20">20</MudSelectItem>
                <MudSelectItem T="int" Value="21">21</MudSelectItem>
                <MudSelectItem T="int" Value="22">22</MudSelectItem>
                <MudSelectItem T="int" Value="23">23</MudSelectItem>
                <MudSelectItem T="int" Value="24">24</MudSelectItem>
                <MudSelectItem T="int" Value="25">25</MudSelectItem>
                <MudSelectItem T="int" Value="26">26</MudSelectItem>
                <MudSelectItem T="int" Value="27">27</MudSelectItem>
                <MudSelectItem T="int" Value="28">28</MudSelectItem>
            </MudSelect>
        </MudItem>
    }
    <MudItem xs="12" sm="4">
        <MudSelect T="string" AdornmentIcon="@Icons.Material.Filled.Category" Label="Chart Type" Value="ChartTypeFilter" ValueChanged="@(c => UpdateSelection(DifficultyFilter, c,_coOpSortType))">
            <MudSelectItem T="string" Value="ChartType.Single.ToString()">Singles</MudSelectItem>
            <MudSelectItem T="string" Value="ChartType.Double.ToString()">Doubles</MudSelectItem>
            <MudSelectItem T="string" Value="ChartType.CoOp.ToString()">CoOp</MudSelectItem>
        </MudSelect>
    </MudItem>
</MudGrid>
@if (ChartTypeFilter == nameof(ChartType.CoOp))
{
    @foreach (var group in _coOpLevels.OrderByDescending(g => g.Key))
    {
        <TierListSection Charts="group.Value" Name="@group.Key.ToString()" OutlineColor="@Colors.Grey.Darken1" Passes="_passes" ShowVideo="ShowVideo" Videos="_videos" OnEdit="EditChart"></TierListSection>
    }
    <TierListSection Charts="_unratedCoOps" Name="Unrated" OutlineCOlor="@Colors.Grey.Darken1" Passes="_passes" ShowVideo="ShowVideo" Videos="_videos" OnEdit="EditChart"></TierListSection>
}
else
{

    <TierListSection Charts="_underratedCharts" Name="1+ Level Harder" OutlineColor="@Colors.Red.Darken1" Passes="_passes" ShowVideo="ShowVideo" Videos="_videos" OnEdit="EditChart"></TierListSection>
    <TierListSection Charts="_veryHardCharts" Name="Very Hard" OutlineColor="@Colors.Orange.Darken1" Passes="_passes" ShowVideo="ShowVideo" Videos="_videos" OnEdit="EditChart"></TierListSection>
    <TierListSection Charts="_hardCharts" Name="Hard" OutlineColor="@Colors.Yellow.Darken1" Passes="_passes" ShowVideo="ShowVideo" Videos="_videos" OnEdit="EditChart"></TierListSection>
    <TierListSection Charts="_mediumCharts" Name="Medium" OutlineColor="@Colors.Grey.Darken1" Passes="_passes" ShowVideo="ShowVideo" Videos="_videos" OnEdit="EditChart"></TierListSection>
    <TierListSection Charts="_easyCharts" Name="Easy" OutlineColor="@Colors.Cyan.Darken1" Passes="_passes" ShowVideo="ShowVideo" Videos="_videos" OnEdit="EditChart"></TierListSection>
    <TierListSection Charts="_veryEasyCharts" Name="Very Easy" OutlineColor="@Colors.Blue.Darken1" Passes="_passes" ShowVideo="ShowVideo" Videos="_videos" OnEdit="EditChart"></TierListSection>
    <TierListSection Charts="_overratedCharts" Name="1+ Level Easier" OutlineColor="@Colors.Purple.Darken1" Passes="_passes" ShowVideo="ShowVideo" Videos="_videos" OnEdit="EditChart"></TierListSection>
    <TierListSection Charts="_disputedCharts" Disclaimer="Charts with 4 or more votes, within .5 levels of adjusted rating, and more than .4 Standard Deviation" Name="Disputed Charts" OutlineColor="@Colors.Brown.Darken1" Passes="_passes" ShowVideo="ShowVideo" Videos="_videos" OnEdit="EditChart"></TierListSection>
    <TierListSection Charts="_notRatedCharts" Name="Not Rated" OutlineColor="@Colors.Grey.Darken1" Passes="_passes" ShowVideo="ShowVideo" Videos="_videos" OnEdit="EditChart"></TierListSection>

}
<MudDialog @bind-IsVisible="_showEditDialog">
    <DialogContent>
        @if (_selectedChartId != Guid.Empty)
        {
            <EditChartGrid ShowChartName="true" ChartId="_selectedChartId" NewAttemptRecorded="AttemptRegistered" CurrentMix="_currentMix"></EditChartGrid>
        }
    </DialogContent>
    <DialogActions>
        <MudSpacer></MudSpacer>
        <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Close" OnClick="() => _showEditDialog = false">Close</MudButton>
    </DialogActions>
</MudDialog>
<MudDialog @bind-IsVisible="_showVideoDialog">
    <DialogContent>
        <iframe class="video"
                id="chartVideoFrame"
                src="@(_currentVideo + "?autoplay=1")"
                allow="autoplay; encrypted-media"
                allowfullscreen></iframe>
    </DialogContent>

    <DialogActions>
        <MudSpacer></MudSpacer>
        <MudTooltip Text="Report Low Quality, Broken, or Incorrect Video">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Report" OnClick="NotifyBadVideo">Report Video</MudButton>
        </MudTooltip>
        <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Close" OnClick="()=>_showVideoDialog=false">Close</MudButton>
    </DialogActions>
</MudDialog>
@inject IAdminNotificationClient Notifications;
@inject ISnackbar Snackbar;
@code {
    private MixEnum _currentMix = MixEnum.Phoenix;
    private ICollection<Chart> _overratedCharts = Array.Empty<Chart>();
    private ICollection<Chart> _veryEasyCharts = Array.Empty<Chart>();
    private ICollection<Chart> _easyCharts = Array.Empty<Chart>();
    private ICollection<Chart> _mediumCharts = Array.Empty<Chart>();
    private ICollection<Chart> _hardCharts = Array.Empty<Chart>();
    private ICollection<Chart> _veryHardCharts = Array.Empty<Chart>();
    private ICollection<Chart> _underratedCharts = Array.Empty<Chart>();
    private ICollection<Chart> _notRatedCharts = Array.Empty<Chart>();
    private ICollection<Chart> _disputedCharts = Array.Empty<Chart>();
    private IDictionary<DifficultyLevel, IEnumerable<Chart>> _coOpLevels = new Dictionary<DifficultyLevel, IEnumerable<Chart>>();
    private ICollection<Chart> _unratedCoOps = Array.Empty<Chart>();
    private IDictionary<Guid, string> _videos = new Dictionary<Guid, string>();
    private bool _showVideoDialog = false;
    private bool _showEditDialog = false;
    private string _currentVideo = "";
    private string _currentVideoDescription = string.Empty;

    private async Task NotifyBadVideo()
    {
        await Notifications.NotifyAdmin($"The video for{_currentVideoDescription} was reported", CancellationToken.None);
        Snackbar.Add("Notification was sent", Severity.Success);
    }
    private CoOpSortType _coOpSortType = CoOpSortType.Average;
    private ISet<Guid> _passes = new HashSet<Guid>();
    private Guid _selectedChartId = Guid.Empty;

    [Parameter]
    [SupplyParameterFromQuery(Name = "Difficulty")]
    public int DifficultyFilter { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "ChartType")]
    public string ChartTypeFilter { get; set; } = string.Empty;

    private void AttemptRegistered(Chart chart, XXChartAttempt? attempt)
    {
        switch (attempt?.IsBroken??true)
        {
            case true when _passes.Contains(chart.Id):
                _passes.Remove(chart.Id);
                break;
            case false when !_passes.Contains(chart.Id):
                _passes.Add(chart.Id);
                break;
        }
        StateHasChanged();
    }
    private void EditChart(Guid chartId)
    {
        _selectedChartId = chartId;
        _showEditDialog = true;
        StateHasChanged();
    }
    private void ShowVideo(string url, Chart chart)
    {
        _showVideoDialog = true;
        _currentVideo = url;
        _currentVideoDescription = $"{chart.Song.Name} - {chart.DifficultyString}";
        StateHasChanged();
    }

    private async Task MixChanged(MixEnum newMix)
    {
        _currentMix = newMix;
        await UiSettings.SetSelectedMix(newMix);
        await UpdateSelection(DifficultyFilter, ChartTypeFilter,_coOpSortType);
        if (_currentMix == MixEnum.XX)
        {
                
            var attempts = await Mediator.Send(new GetXXBestChartAttemptsQuery(CurrentUser.User.Id));
            _passes = attempts.Where(a => !(a.BestAttempt?.IsBroken??true)).Select(a => a.Chart.Id).Distinct().ToHashSet();
        }
        else
        {
            var attempts = await Mediator.Send(new GetPhoenixRecordsQuery(CurrentUser.User.Id));
            _passes = attempts.Where(a => !a.IsBroken).Select(a => a.ChartId).Distinct().ToHashSet();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        _currentMix = await UiSettings.GetSelectedMix();
        var isDifficultyValid = DifficultyFilter >= DifficultyLevel.Min && DifficultyFilter <= DifficultyLevel.Max;
        var isChartTypeValid = !string.IsNullOrWhiteSpace(ChartTypeFilter) && (ChartTypeFilter.Equals(ChartType.CoOp.ToString())||ChartTypeFilter.Equals(ChartType.Single.ToString()) || ChartTypeFilter.Equals(ChartType.Double.ToString()));
        if (!isDifficultyValid || !isChartTypeValid)
        {
            DifficultyFilter = isDifficultyValid ? DifficultyFilter : 18;
            ChartTypeFilter = isChartTypeValid ? ChartTypeFilter: ChartType.Double.ToString();
            NavManager.NavigateTo(NavManager.GetUriWithQueryParameters(new Dictionary<string, object?>
            {
                { "Difficulty", DifficultyFilter },
                { "ChartType", ChartTypeFilter }
            }));
        }

        await UpdateSelection(DifficultyFilter, ChartTypeFilter,CoOpSortType.Average);

        _videos = (await Mediator.Send(new GetChartVideosQuery())).ToDictionary(cv => cv.ChartId, cv => cv.VideoUrl.ToString());

        if (CurrentUser.IsLoggedIn)
        {
            if (_currentMix == MixEnum.XX)
            {
                
                var attempts = await Mediator.Send(new GetXXBestChartAttemptsQuery(CurrentUser.User.Id));
                _passes = attempts.Where(a => !(a.BestAttempt?.IsBroken??true)).Select(a => a.Chart.Id).Distinct().ToHashSet();
            }
            else
            {
                var attempts = await Mediator.Send(new GetPhoenixRecordsQuery(CurrentUser.User.Id));
                _passes = attempts.Where(a => !a.IsBroken).Select(a => a.ChartId).Distinct().ToHashSet();
            }
        }
    }

    private async Task UpdateSelection(int difficulty, string chartType, CoOpSortType coOpSortType)
    {
        _coOpSortType = coOpSortType;
        if (chartType == "CoOp" && difficulty > 5)
        {
            difficulty = 2;
        }
        if (DifficultyFilter != difficulty || ChartTypeFilter != chartType)
        {
            NavManager.NavigateTo(NavManager.GetUriWithQueryParameters(new Dictionary<string, object?>
            {
                { "Difficulty", difficulty },
                { "ChartType", chartType }
            }));
            DifficultyFilter = difficulty;
            ChartTypeFilter = chartType;
        }
        var type = Enum.Parse<ChartType>(chartType);
        Chart[] charts;
        
        _overratedCharts = new List<Chart>();
        _veryEasyCharts = new List<Chart>();
        _easyCharts = new List<Chart>();
        _mediumCharts = new List<Chart>();
        _hardCharts = new List<Chart>();
        _veryHardCharts = new List<Chart>();
        _underratedCharts = new List<Chart>();
        _disputedCharts = new List<Chart>();
        _notRatedCharts = new List<Chart>();
        if (type is ChartType.Single or ChartType.Double)
        {

            IDictionary<Guid, ChartDifficultyRatingRecord> ratings;
            if (type == ChartType.Single)
            {
                charts = (await Mediator.Send(new GetChartsQuery(_currentMix, difficulty, ChartType.Single)))
                    .Concat(await Mediator.Send(new GetChartsQuery(_currentMix, difficulty, ChartType.SinglePerformance))).ToArray();

                ratings = (await Mediator.Send(new GetChartRatingsQuery(_currentMix, difficulty, ChartType.Single)))
            .Concat(await Mediator.Send(new GetChartRatingsQuery(_currentMix, difficulty, ChartType.SinglePerformance))).ToDictionary(c => c.ChartId);

            }
            else
            {

                charts = (await Mediator.Send(new GetChartsQuery(_currentMix, difficulty, ChartType.Double)))
                    .Concat(await Mediator.Send(new GetChartsQuery(_currentMix, difficulty, ChartType.DoublePerformance))).ToArray();

                ratings = (await Mediator.Send(new GetChartRatingsQuery(_currentMix, difficulty, ChartType.Double)))
                    .Concat(await Mediator.Send(new GetChartRatingsQuery(_currentMix, difficulty, ChartType.DoublePerformance))).ToDictionary(c => c.ChartId);
            }
            foreach (var chart in charts.OrderByDescending(c => ratings.ContainsKey(c.Id) ? ratings[c.Id].Difficulty : c.Level + .5))
            {
                if (!ratings.ContainsKey(chart.Id))
                {
                    _notRatedCharts.Add(chart);
                    continue;
                }
                var rating = ratings[chart.Id];
                if (rating is { RatingCount: >= 4, StandardDeviation: > .4 } && Math.Abs(rating.Difficulty - chart.Level) <= .5)
                {
                    _disputedCharts.Add(chart);
                    continue;
                }
                var diff = rating.Difficulty - chart.Level - .5;
                switch (diff)
                {
                    case <= -.75:
                        _overratedCharts.Add(chart);
                        break;
                    case <= -.375:
                        _veryEasyCharts.Add(chart);
                        break;
                    case <= -.125:
                        _easyCharts.Add(chart);
                        break;
                    case < .125:
                        _mediumCharts.Add(chart);
                        break;
                    case < .375:
                        _hardCharts.Add(chart);
                        break;
                    case < .75:
                        _veryHardCharts.Add(chart);
                        break;
                    default:
                        _underratedCharts.Add(chart);
                        break;
                }

            }
        }
        else
        {
            charts = (await Mediator.Send(new GetChartsQuery(_currentMix, null, ChartType.CoOp))).Where(c => c.PlayerCount == DifficultyFilter).ToArray();
            var ratings = (await Mediator.Send(new GetCoOpRatingsQuery())).ToDictionary(c => c.ChartId);
            _unratedCoOps = charts.Where(c => !ratings.ContainsKey(c.Id)).ToArray();
            _coOpLevels = charts.Where(c => ratings.ContainsKey(c.Id)).GroupBy(c => coOpSortType == CoOpSortType.Average ? ratings[c.Id].Average :
                coOpSortType == CoOpSortType.EasiestPlayer ? ratings[c.Id].Minimum :
                    ratings[c.Id].Maximum).ToDictionary(c => c.Key, c => c.ToArray().AsEnumerable());

        }

    }

    private enum CoOpSortType
    {
        EasiestPlayer,
        HardestPlayer,
        Average
    }
    
}
