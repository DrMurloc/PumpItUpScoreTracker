@page "/TierLists"
@using MediatR
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.Models
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Application.Commands
@using ScoreTracker.Domain.Records
@using ScoreTracker.Web.Components
@using ScoreTracker.Domain.SecondaryPorts
@using ChartType = ScoreTracker.Domain.Enums.ChartType

<PageTitle>Record Attempt</PageTitle>


@inject IMediator Mediator
@inject ICurrentUserAccessor CurrentUser;
@inject NavigationManager NavManager;
<MudGrid>
    <MudItem xs="12" sm="6">
        <MudSelect T="int" AdornmentIcon="@Icons.Filled.Bolt" Label="Difficulty Level" Value="DifficultyFilter" ValueChanged="@(d=>UpdateSelection(d,ChartTypeFilter))">
            @foreach (var level in Enumerable.Range(DifficultyLevel.Min,DifficultyLevel.Max))
            {
                <MudSelectItem T="int" Value="@level">@level</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudSelect T="string" AdornmentIcon="@Icons.Filled.Category" Label="Chart Type" Value="ChartTypeFilter" ValueChanged="@(c=>UpdateSelection(DifficultyFilter,c))">
            <MudSelectItem T="string" Value="ChartType.Single.ToString()">Singles</MudSelectItem>
            <MudSelectItem T="string" Value="ChartType.Double.ToString()">Doubles</MudSelectItem>
        </MudSelect>
    </MudItem>
</MudGrid>
<TierListSection Charts="_underratedCharts" Name="1+ Level Harder" OutlineColor="@Colors.Red.Darken1" Passes="_passes" ShowVideo="ShowVideo" Videos="_videos" OnEdit="EditChart"></TierListSection>
<TierListSection Charts="_veryHardCharts" Name="Very Hard" OutlineColor="@Colors.Orange.Darken1" Passes="_passes" ShowVideo="ShowVideo" Videos="_videos" OnEdit="EditChart"></TierListSection>
<TierListSection Charts="_hardCharts" Name="Hard" OutlineColor="@Colors.Yellow.Darken1" Passes="_passes" ShowVideo="ShowVideo" Videos="_videos" OnEdit="EditChart"></TierListSection>
<TierListSection Charts="_mediumCharts" Name="Medium" OutlineColor="@Colors.Grey.Darken1" Passes="_passes" ShowVideo="ShowVideo" Videos="_videos" OnEdit="EditChart"></TierListSection>
<TierListSection Charts="_easyCharts" Name="Easy" OutlineColor="@Colors.Cyan.Darken1" Passes="_passes" ShowVideo="ShowVideo" Videos="_videos" OnEdit="EditChart"></TierListSection>
<TierListSection Charts="_veryEasyCharts" Name="Very Easy" OutlineColor="@Colors.Blue.Darken1" Passes="_passes" ShowVideo="ShowVideo" Videos="_videos" OnEdit="EditChart"></TierListSection>
<TierListSection Charts="_overratedCharts" Name="1+ Level Easier" OutlineColor="@Colors.Purple.Darken1" Passes="_passes" ShowVideo="ShowVideo" Videos="_videos" OnEdit="EditChart"></TierListSection>
<TierListSection Charts="_disputedCharts" Disclaimer="Charts with 4 or more votes, within .5 levels of adjusted rating, and more than .4 Standard Deviation" Name="Disputed Charts" OutlineColor="@Colors.Brown.Darken1" Passes="_passes" ShowVideo="ShowVideo" Videos="_videos" OnEdit="EditChart"></TierListSection>
<TierListSection Charts="_notRatedCharts" Name="Not Rated" OutlineColor="@Colors.Grey.Darken1" Passes="_passes" ShowVideo="ShowVideo" Videos="_videos" OnEdit="EditChart"></TierListSection>

<MudDialog @bind-IsVisible="_showEditDialog">
    <DialogContent>
        @if (_selectedChartId != Guid.Empty)
        {
            <EditChartGrid ShowChartName="true" ChartId="_selectedChartId" NewAttemptRecorded="AttemptRegistered"></EditChartGrid>
        }
    </DialogContent>
    <DialogActions>
        <MudSpacer></MudSpacer>
        <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Filled.Close" OnClick="() => _showEditDialog = false">Close</MudButton>
    </DialogActions>
</MudDialog>
<MudDialog @bind-IsVisible="_showVideoDialog">
    <DialogContent>
        <iframe class="video"
                id="chartVideoFrame"
                src="@(_currentVideo + "?autoplay=1")"
                allow="autoplay; encrypted-media"
                allowfullscreen></iframe>
    </DialogContent>

    <DialogActions>
        <MudSpacer></MudSpacer>
        <MudTooltip Text="Report Low Quality, Broken, or Incorrect Video">
            <MudButton Href="mailto:sharkingbird@gmail.com" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Filled.Report">Report Video</MudButton>
        </MudTooltip>
        <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Filled.Close" OnClick="()=>_showVideoDialog=false">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private ICollection<Chart> _overratedCharts = Array.Empty<Chart>();
    private ICollection<Chart> _veryEasyCharts = Array.Empty<Chart>();
    private ICollection<Chart> _easyCharts = Array.Empty<Chart>();
    private ICollection<Chart> _mediumCharts = Array.Empty<Chart>();
    private ICollection<Chart> _hardCharts = Array.Empty<Chart>();
    private ICollection<Chart> _veryHardCharts = Array.Empty<Chart>();
    private ICollection<Chart> _underratedCharts = Array.Empty<Chart>();
    private ICollection<Chart> _notRatedCharts = Array.Empty<Chart>();
    private ICollection<Chart> _disputedCharts = Array.Empty<Chart>();
    private IDictionary<Guid, string> _videos = new Dictionary<Guid, string>();
    private bool _showVideoDialog = false;
    private bool _showEditDialog = false;
    private string _currentVideo = "";
    private ISet<Guid> _passes = new HashSet<Guid>();
    private Guid _selectedChartId = Guid.Empty;

    [Parameter]
    [SupplyParameterFromQuery(Name = "Difficulty")]
    public int DifficultyFilter { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "ChartType")]
    public string ChartTypeFilter { get; set; } = string.Empty;

    private void AttemptRegistered(Chart chart, ChartAttempt? attempt)
    {
        switch (attempt?.IsBroken??true)
        {
            case true when _passes.Contains(chart.Id):
                _passes.Remove(chart.Id);
                break;
            case false when !_passes.Contains(chart.Id):
                _passes.Add(chart.Id);
                break;
        }
        StateHasChanged();
    }
    private void EditChart(Guid chartId)
    {
        _selectedChartId = chartId;
        _showEditDialog = true;
        StateHasChanged();
    }
    private void ShowVideo(string url)
    {
        _showVideoDialog = true;
        _currentVideo = url;
        StateHasChanged();
    }
    
    protected override async Task OnInitializedAsync()
    {
        var isDifficultyValid = DifficultyFilter >= DifficultyLevel.Min && DifficultyFilter <= DifficultyLevel.Max;
        var isChartTypeValid = !string.IsNullOrWhiteSpace(ChartTypeFilter) && (ChartTypeFilter.Equals(ChartType.Single.ToString()) || ChartTypeFilter.Equals(ChartType.Double.ToString()));
        if (!isDifficultyValid || !isChartTypeValid)
        {
            DifficultyFilter = isDifficultyValid ? DifficultyFilter : 18;
            ChartTypeFilter = isChartTypeValid ? ChartTypeFilter: ChartType.Double.ToString();
            NavManager.NavigateTo(NavManager.GetUriWithQueryParameters(new Dictionary<string, object?>
            {
                { "Difficulty", DifficultyFilter },
                { "ChartType", ChartTypeFilter }
            }));
        }

        await UpdateSelection(DifficultyFilter, ChartTypeFilter);

        _videos = (await Mediator.Send(new GetChartVideosQuery())).ToDictionary(cv => cv.ChartId, cv => cv.VideoUrl.ToString());

        if (CurrentUser.IsLoggedIn)
        {
            var attempts = await Mediator.Send(new GetBestChartAttemptsQuery(CurrentUser.User.Id));
            _passes = attempts.Where(a => !(a.BestAttempt?.IsBroken??true)).Select(a => a.Chart.Id).Distinct().ToHashSet();
        }
    }

    private async Task UpdateSelection(int difficulty, string chartType)
    {
        
        if (DifficultyFilter != difficulty || ChartTypeFilter != chartType)
        {
            NavManager.NavigateTo(NavManager.GetUriWithQueryParameters(new Dictionary<string, object?>
            {
                { "Difficulty", difficulty },
                { "ChartType", chartType }
            }));
            DifficultyFilter = difficulty;
            ChartTypeFilter = chartType;
        }
        var type = Enum.Parse<ChartType>(chartType);
        Chart[] charts;
        IDictionary<Guid, ChartDifficultyRatingRecord> ratings;
        if (type == ChartType.Single)
        {
            charts = (await Mediator.Send(new GetChartsQuery(difficulty, ChartType.Single)))
                .Concat(await Mediator.Send(new GetChartsQuery(difficulty, ChartType.SinglePerformance))).ToArray();

            ratings = (await Mediator.Send(new GetChartRatingsQuery(difficulty, ChartType.Single)))
        .Concat(await Mediator.Send(new GetChartRatingsQuery(difficulty, ChartType.SinglePerformance))).ToDictionary(c => c.ChartId);

        }
        else
        {

            charts = (await Mediator.Send(new GetChartsQuery(difficulty, ChartType.Double)))
                .Concat(await Mediator.Send(new GetChartsQuery(difficulty, ChartType.DoublePerformance))).ToArray();

            ratings = (await Mediator.Send(new GetChartRatingsQuery(difficulty, ChartType.Double)))
                .Concat(await Mediator.Send(new GetChartRatingsQuery(difficulty, ChartType.DoublePerformance))).ToDictionary(c => c.ChartId);
        }
        _overratedCharts = new List<Chart>();
        _veryEasyCharts = new List<Chart>();
        _easyCharts = new List<Chart>();
        _mediumCharts = new List<Chart>();
        _hardCharts = new List<Chart>();
        _veryHardCharts = new List<Chart>();
        _underratedCharts = new List<Chart>();
        _disputedCharts = new List<Chart>();
        _notRatedCharts = new List<Chart>();
        foreach (var chart in charts.OrderByDescending(c=>ratings.ContainsKey(c.Id)?ratings[c.Id].Difficulty:c.Level+.5))
        {
            if (!ratings.ContainsKey(chart.Id))
            {
                _notRatedCharts.Add(chart);
                continue;
            }
            var rating = ratings[chart.Id];
            if (rating is { RatingCount: >= 4, StandardDeviation: > .4 } && Math.Abs(rating.Difficulty-chart.Level)<=.5)
            {
                _disputedCharts.Add(chart);
                continue;
            }
            var diff = rating.Difficulty - chart.Level - .5;
            switch (diff)
            {
                case < -1:
                    _overratedCharts.Add(chart);
                    break;
                case < -.5:
                    _veryEasyCharts.Add(chart);
                    break;
                case < -.25:
                    _easyCharts.Add(chart);
                    break;
                case <= .25:
                    _mediumCharts.Add(chart);
                    break;
                case <= .5:
                    _hardCharts.Add(chart);
                    break;
                case < 1.0:
                    _veryHardCharts.Add(chart);
                    break;
                default:
                    _underratedCharts.Add(chart);
                    break;
            }

        }

    }
    
}
