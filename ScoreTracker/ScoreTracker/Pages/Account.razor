@page "/Account"
@using ScoreTracker.Domain.SecondaryPorts
@using MediatR
@using ScoreTracker.Application.Commands
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Web.Dtos
@using CsvHelper
@using System.Globalization
@using System.Web
@using Microsoft.AspNetCore.Localization
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.Records
@using ScoreTracker.Web.Services.Contracts

<PageTitle>@L["Account"]</PageTitle>

<MudCard>
    <MudCardHeader>@L["Account"]</MudCardHeader>
    <MudCardContent>
        <MudGrid>
            <MudItem xs="10">
                <MudTextField Label="Id" Disabled="true" Value="@_id" HelperText=@L["Used Primarily for debugging"]></MudTextField>
            </MudItem>
            <MudItem xs="2">
                <MudIconButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="CopyUserId" Icon="@Icons.Material.Filled.ContentCopy"></MudIconButton>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField T="string" Disabled="_isUpdatingUser" Label=@L["Username"] MaxLength="100" Value="@_name" ValueChanged="UpdateName"></MudTextField>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudSelect T="string" Value="_countryName" ValueChanged="UpdateCountry" Label=@L["Country"] Clearable="true">
                    @foreach (var country in _countries)
                    {
                        <MudSelectItem T="string" Value="country.Name">
                            <MudImage Height="15" ObjectFit="ObjectFit.ScaleDown" Src="@country.ImagePath.ToString()"></MudImage>
                            @country.Name
                        </MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudSelect T="string" Disabled="_isUpdatingUser" Label="@L["Language"]" Value="_currentCulture" ValueChanged="UpdateCulture">
                    <MudSelectItem T="string" Value=@("en-US")>English</MudSelectItem>
                    <MudSelectItem T="string" Value=@("es-MX")>Español</MudSelectItem>
                    <MudSelectItem T="string" Value=@("pt-BR")>Português</MudSelectItem>
                    <MudSelectItem T="string" Value=@("ko-KR")>한국어</MudSelectItem>
                    <MudSelectItem T="string" Value=@("en-ZW")>Murloc</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12">
                <MudSwitch T="bool" Disabled="_isUpdatingUser" Label=@L["Public"] Value="_isPublic" ValueChanged="() => _showPublicConfirmDialog = true" Color="Color.Success"></MudSwitch>
            </MudItem>
            <MudItem xs="12">
                <MudTextField Label="API Token" Disabled="true" Value="@(_apiToken?.ToString()??string.Empty)" HelperText=@($"Authorization Header: Basic {Base64Encode(":"+_apiToken)}")></MudTextField>
            </MudItem>
            <MudItem xs="6" sm="4">
                <MudButton OnClick="GenerateToken" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.GeneratingTokens">New Token</MudButton>
            </MudItem>
            @if (_apiToken != null)
            {
                <MudItem xs="6" sm="4">
                    <MudButton OnClick="CopyToken" Disabled="_apiToken==null" Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.ContentCopy">Copy Token</MudButton>
                </MudItem>
                <MudItem xs="6" sm="4">
                    <MudButton Href="/swagger" Target="_blank" Variant="Variant.Outlined">API Documentation</MudButton>
                </MudItem>
            }
        </MudGrid>
    </MudCardContent>
    <MudCardActions>
        <MudSpacer></MudSpacer>
        <MudButton Icon="@Icons.Material.Filled.Download" Variant="Variant.Filled" Color="Color.Primary" OnClick="DownloadScores">@L["Download Scores"]</MudButton>
        <MudButton Href="/UploadXXScores" Icon="@Icons.Material.Filled.UploadFile" Variant="Variant.Filled" Color="Color.Primary">@L["Upload XX Scores"]</MudButton>
        <MudButton Href="/UploadPhoenixScores" Icon="@Icons.Material.Filled.UploadFile" Variant="Variant.Filled" Color="Color.Primary">@L["Import Phoenix Scores"]</MudButton>
        
        <MudButton Href="/Logout" Icon="@Icons.Material.Filled.Logout" Variant="Variant.Filled" Color="Color.Primary">@L["Logout"]</MudButton>
    </MudCardActions>
</MudCard>

<MudDialog @bind-Visible="_showPublicConfirmDialog">
    <DialogContent>
        @if (_isPublic)
        {
            <MudText>@L["Make Not Public Disclaimer"]</MudText>
            
        }
        else
        {
            <MudText>@L["Make Public Disclaimer 1"]</MudText>
            <br/>
            <MudText>@L["Make Public Disclaimer 2"]</MudText>
        }
    </DialogContent>
    <DialogActions>
        <MudSpacer></MudSpacer>
        <MudButton Variant="Variant.Text"
                   OnClick="()=>_showPublicConfirmDialog=false"
                   Color="Color.Primary">Cancel</MudButton>
        <MudButton Variant="Variant.Filled"
                   OnClick="ToggleIsPublic"
                   Color="Color.Primary">@(_isPublic?@L["Make Private"]:@L["Make Public"])</MudButton>
    </DialogActions>
</MudDialog>

@inject NavigationManager NavManager
@inject ICurrentUserAccessor CurrentUser;
@inject IMediator Mediator;
@inject ISnackbar Snackbar;
@inject IUiSettingsAccessor UiSettings;
@inject IJSRuntime JSRuntime;
@inject IUserRepository Users;
@code
{

    private string _id = string.Empty;
    private string _name = string.Empty;
    private bool _isPublic = false;
    private bool _showPublicConfirmDialog = false;
    private bool _isUpdatingUser = false;
    private IEnumerable<CountryRecord> _countries = Array.Empty<CountryRecord>();
    private string _countryName = null;
    private Guid? _apiToken;
    private string _currentCulture = "en-US";
    public static string Base64Encode(string plainText) 
    {
        var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(plainText);
        return System.Convert.ToBase64String(plainTextBytes);
    }
    private async Task UpdateCulture(string newCulture)
    {
        _isUpdatingUser = true;
        await UiSettings.SetSetting("Culture", newCulture);
        NavManager.NavigateTo($"/Culture/Set?culture={newCulture}&redirectUrl="+HttpUtility.UrlEncode("/Account"),forceLoad:true);
    }
    protected override async Task OnInitializedAsync()
    {
        if (!CurrentUser.IsLoggedIn)
        {
            NavManager.NavigateTo("/Login");
            return;
        }
        var culture = await UiSettings.GetSetting("Culture");
        _currentCulture = culture??CultureInfo.CurrentUICulture.ToString();
        _id = CurrentUser.User.Id.ToString();
        _name = CurrentUser.User.Name;
        _countryName = CurrentUser.User.Country;
        _isPublic = CurrentUser.User.IsPublic;
        _apiToken = await Mediator.Send(new GetUserApiTokenQuery());
        _countries = (await Users.GetCountries()).OrderBy(c => c.Name);
    }

    private async Task CopyUserId()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", _id);
        Snackbar.Add("Copied to Clipboard!", Severity.Success);
    }
    private async Task CopyToken()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", _apiToken!.Value);
        Snackbar.Add("Copied to Clipboard!", Severity.Success);
    }

    private async Task GenerateToken()
    {
        _apiToken = await Mediator.Send(new SetApiTokenCommand());
        Snackbar.Add("New API Token Generated!", Severity.Success);
    }
    private async Task UpdateUser()
    {
        _isUpdatingUser = true;
        await Mediator.Send(new UpdateUserCommand(_name,_isPublic,string.IsNullOrWhiteSpace(_countryName)?null:_countryName));
           /*
           Why does it always come back to javascript...
           Blazor interacts over WebSockets that close HTTP responses before it processes.B
           This means we can't update a user's signed in information (stored in a cookie) utilizing standard Blazor back end interactions
           HttpClient interactions all happen via sockets in the back end, so does not contain cookie information for managing user claims.
           So the conclusion was to do a quick javascript fetch to a Refresh endpoint to log out and log back in a user when their claims
           are updated.
           See https://github.com/dotnet/aspnetcore/issues/34095#issuecomment-874012924 for Microsoft's stance on this.
           See: >:(  for my stance on this.*/
        var module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/helpers.js");
        await module.InvokeVoidAsync("refreshLogin");
        _isUpdatingUser = false;
    }

    private async Task ToggleIsPublic()
    {
        _showPublicConfirmDialog = false;
        _isPublic = !_isPublic;
        await UpdateUser();

        var message = _isPublic ? "Public" : "Private";
        Snackbar.Add($"Account made {message}", Severity.Success);
    }

    private async Task UpdateCountry(string newCountry)
    {
        _countryName = newCountry;
        await UpdateUser();
        
    }
    private async Task UpdateName(string newName)
    {
        if (Name.TryParse(newName, out var name) || name.ToString().Length>100)
        {
            _name = name;
            await UpdateUser();
            Snackbar.Add($"User Profile Up set to {_name}",Severity.Success);
        }
        else
        {
            Snackbar.Add("Invalid Name",Severity.Error);
        }
    }

    private async Task DownloadScores()
    {
        var result = Array.Empty<object>();
        if (await UiSettings.GetSelectedMix() == MixEnum.XX)
        {
            var scores = await Mediator.Send(new GetXXBestChartAttemptsQuery(CurrentUser.User.Id));
            result = scores.OrderBy(s => s.Chart.Level).ThenBy(s => s.Chart.Type).Select(s => new XXSpreadsheetScoreDto
            {
                Difficulty = s.Chart.DifficultyString,
                IsBroken = s.BestAttempt?.IsBroken.ToString() ?? "",
                LetterGrade = s.BestAttempt?.LetterGrade.ToString() ?? "",
                Score = s.BestAttempt?.Score?.ToString() ?? "",
                Song = s.Chart.Song.Name

            }).ToArray();
        }
        else
        {
            var scores = await Mediator.Send(new GetPhoenixRecordsQuery(CurrentUser.User.Id));
            var charts = (await Mediator.Send(new GetChartsQuery(MixEnum.Phoenix))).ToDictionary(c => c.Id);
            result = scores.OrderBy(s => charts[s.ChartId].Level).ThenBy(s => charts[s.ChartId].Type)
                .Select(s => new
                {
                    Difficulty = charts[s.ChartId].DifficultyString,
                    Song = charts[s.ChartId].Song.Name.ToString(),
                    IsBroken=s.IsBroken.ToString(),
                    LetterGrade=s.Score?.LetterGrade.GetName(),
                    Score=s.Score?.ToString(),
                }).ToArray();
        }
        

        var stream = new MemoryStream();
        await using var writer = new StreamWriter(stream);
        await using var csv = new CsvWriter(writer, CultureInfo.InvariantCulture);
        await csv.WriteRecordsAsync(result);
        await writer.FlushAsync();
        await csv.FlushAsync();
        const string fileName = "scores.csv";

        using var streamRef = new DotNetStreamReference(stream: stream);
        stream.Seek(0, SeekOrigin.Begin);

        var module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/helpers.js");
        await module.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }
}
