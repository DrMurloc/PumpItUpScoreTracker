@page "/Account"
@using ScoreTracker.Domain.SecondaryPorts
@using MediatR
@using ScoreTracker.Application.Commands
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Web.Dtos
@using CsvHelper
@using System.Globalization

<PageTitle>Account</PageTitle>

<MudCard>
    <MudCardHeader>Account Settings</MudCardHeader>
    <MudCardContent>
        <MudTextField Label="Id" Disabled="true" Value="@_id" HelperText="Used primarily for debugging"></MudTextField>
        <MudTextField T="string" Disabled="_isUpdatingUser" Label="Username" MaxLength="100" Value="@_name" ValueChanged="UpdateName"></MudTextField>
        <MudSwitch T="bool" Disabled="_isUpdatingUser" Label="Public" Checked="_isPublic" CheckedChanged="()=>_showPublicConfirmDialog=true" Color="Color.Success"></MudSwitch>
    </MudCardContent>
    <MudCardActions>
        <MudSpacer></MudSpacer>
        <MudButton Icon="@Icons.Filled.Download" Variant="Variant.Filled" Color="Color.Primary" OnClick="DownloadScores">Download Scores</MudButton>
        <MudButton Href="/UploadScores" Icon="@Icons.Filled.UploadFile" Variant="Variant.Filled" Color="Color.Primary">Upload Scores</MudButton>
        <MudButton Href="/Logout" Icon="@Icons.Filled.Logout" Variant="Variant.Filled" Color="Color.Primary">Logout</MudButton>
    </MudCardActions>
</MudCard>

<MudDialog @bind-IsVisible="_showPublicConfirmDialog">
    <DialogContent>
        @if (_isPublic)
        {
            <MudText>Making your account private will make your scores and progress no longer be externally visible, even for anyone already following you.</MudText>
            
        }
        else
        {
            <MudText>Making your account public will make your scores and progress externally visible. Others will be able to search for your account by name or ID.</MudText>
            <br/>
            <MudText>If your account was previously public and you made it private, making it public again will make anyone following you able to see your progress again.</MudText>
        }
    </DialogContent>
    <DialogActions>
        <MudSpacer></MudSpacer>
        <MudButton Variant="Variant.Text"
                   OnClick="()=>_showPublicConfirmDialog=false"
                   Color="Color.Primary">Cancel</MudButton>
        <MudButton Variant="Variant.Filled"
                   OnClick="ToggleIsPublic"
                   Color="Color.Primary">Make @(_isPublic?"Private":"Public")</MudButton>
    </DialogActions>
</MudDialog>

@inject NavigationManager NavManager
@inject ICurrentUserAccessor CurrentUser;
@inject IMediator Mediator;
@inject ISnackbar Snackbar;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;
@code
{
    private string _id = string.Empty;
    private string _name = string.Empty;
    private bool _isPublic = false;
    private bool _showPublicConfirmDialog = false;
    private bool _isDownloading = false;
    private bool _isUpdatingUser = false;
    protected override Task OnInitializedAsync()
    {
        if (!CurrentUser.IsLoggedIn)
        {
            NavManager.NavigateTo("/Login");
            return Task.CompletedTask;
        }
        _id = CurrentUser.User.Id.ToString();
        _name = CurrentUser.User.Name;
        _isPublic = CurrentUser.User.IsPublic;
        return Task.CompletedTask;
    }

    private async Task UpdateUser()
    {
        _isUpdatingUser = true;
        await Mediator.Send(new UpdateUserCommand(_name,_isPublic));
       /*
          Why does it always come back to javascript...
          Blazor interacts over WebSockets that close HTTP responses before it processes.
          This means we can't update a user's signed in information (stored in a cookie) utilizing standard Blazor back end interactions
          HttpClient interactions all happen via sockets in the back end, so does not contain cookie information for managing user claims.
          So the conclusion was to do a quick javascript fetch to a Refresh endpoint to log out and log back in a user when their claims
          are updated.
          See https://github.com/dotnet/aspnetcore/issues/34095#issuecomment-874012924 for Microsoft's stance on this.
          See: >:(  for my stance on this.*/
        var module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/helpers.js");
        await module.InvokeVoidAsync("refreshLogin");
        _isUpdatingUser = false;
    }

    private async Task ToggleIsPublic()
    {
        _showPublicConfirmDialog = false;
        _isPublic = !_isPublic;
        await UpdateUser();
        var message = _isPublic ? "Public" : "Private";
        Snackbar.Add($"Account made {message}", Severity.Success);
    }
    private async Task UpdateName(string newName)
    {
        if (Name.TryParse(newName, out var name) || name.ToString().Length>100)
        {
            _name = name;
            await UpdateUser();
            Snackbar.Add($"User Profile Up set to {_name}",Severity.Success);
        }
        else
        {
            Snackbar.Add("Invalid Name",Severity.Error);
        }
    }

    private async Task DownloadScores()
    {
        var scores = await Mediator.Send(new GetBestChartAttemptsQuery(CurrentUser.User.Id));
        var scoreDtos = scores.OrderBy(s=>s.Chart.Level).ThenBy(s=>s.Chart.Type).Select(s => new SpreadsheetScoreDto
        {
            Difficulty = s.Chart.DifficultyString,
            IsBroken = s.BestAttempt?.IsBroken.ToString() ?? "",
            LetterGrade = s.BestAttempt?.LetterGrade.ToString() ?? "",
            Score = s.BestAttempt?.Score?.ToString() ?? "",
            Song = s.Chart.Song.Name

        }).ToArray();

        var stream = new MemoryStream();
        await using var writer = new StreamWriter(stream);
        await using var csv = new CsvWriter(writer, CultureInfo.InvariantCulture);
        await csv.WriteRecordsAsync(scoreDtos);
        await writer.FlushAsync();
        await csv.FlushAsync();
        const string fileName = "scores.csv";

        using var streamRef = new DotNetStreamReference(stream: stream);
        stream.Seek(0, SeekOrigin.Begin);

        var module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/helpers.js");
        await module.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }
}
