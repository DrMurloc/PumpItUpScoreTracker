@page "/ChartUpdate"
@using MediatR
@using MudBlazor.Utilities
@using ScoreTracker.Application.Commands
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.SecondaryPorts
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.Records
@using ScoreTracker.Domain.Services.Contracts
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Web.Components
@using ScoreTracker.Web.Services.Contracts
@using ChartType = ScoreTracker.Domain.Enums.ChartType
@using System.Text.RegularExpressions

<PageTitle>Chart Update</PageTitle>
<ChartSelector ChartIdSelected="SelectChart"></ChartSelector>
@if (_currentChart != null)
{
    <MudGrid>

        <MudItem xs="12">
            <MudSelect T="TierListCategory" @bind-Value="_category" Label="Difficulty">
                @foreach (var category in Enum.GetValues<TierListCategory>())
                {
                    <MudSelectItem T="TierListCategory" Value="category">@category</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12">
            @foreach (var skill in Enum.GetValues<Skill>().Where(s => !_skills.Contains(s)).OrderBy(s => s.GetColor()))
            {
                <MudChip T="string" Style=@($"background-color:{skill.GetColor()}") OnClick="() => _skills.Add(skill)">@skill.GetName()</MudChip>
            }
        </MudItem>
        @foreach (var skill in _skills.OrderBy(s => s.GetColor()))
        {
            <MudItem xs="6">
                <MudChip T="string" Style=@($"background-color:{skill.GetColor()}") OnClick="() => _skills.Remove(skill)">@skill.GetName()</MudChip>
            </MudItem>
        }

        <MudItem xs="12">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="_isSaving" OnClick="UpdateChart">Save Chart</MudButton>
        </MudItem>

    </MudGrid>

}
@inject ICurrentUserAccessor CurrentUser;
@inject IMediator Mediator;
@inject ITierListRepository TierLists;
@inject ISnackbar Snackbar;
@inject NavigationManager NavManager;
@code
{

    private Chart? _currentChart = null;


    private ISet<Skill> _skills = Array.Empty<Skill>().ToHashSet();
    private TierListCategory _category = TierListCategory.Unrecorded;
    private bool _isSaving = false;

    private Task SelectChart(Chart c)
    {
        _currentChart = c;
        if (c.Skills.Any())
        {
            _skills = c.Skills.ToHashSet();
        }
        StateHasChanged();
        return Task.CompletedTask;
    }
    private async Task UpdateChart()
    {
        if (_currentChart == null)
        {
            return;
        }
        _isSaving = true;
        await Mediator.Send(new UpdateChartSkillCommand(new ChartSkillsRecord(_currentChart.Id, _skills, Array.Empty<Skill>())));
        await TierLists.SaveEntry(new SongTierListEntry("Chabala", _currentChart.Id, _category, 1), CancellationToken.None);
        Snackbar.Add($"Updated {_currentChart.Song.Name} {_currentChart.DifficultyString}");
        _isSaving = false;
    }

    protected override async Task OnInitializedAsync()
    {
        if (!CurrentUser.User.IsAdmin)
        {
            NavManager.NavigateTo("/");
        }
    }
}