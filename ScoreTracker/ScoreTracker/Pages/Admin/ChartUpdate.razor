@page "/ChartUpdate"
@using MediatR
@using MudBlazor.Utilities
@using ScoreTracker.Application.Commands
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.SecondaryPorts
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.Records
@using ScoreTracker.Domain.Services.Contracts
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Web.Services.Contracts
@using ChartType = ScoreTracker.Domain.Enums.ChartType
@using System.Text.RegularExpressions

<PageTitle>Chart Update</PageTitle>
@if (_currentChart != null)
{
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h4">@_currentChart.Song.Name @_currentChart.DifficultyString (@_toProcess.Count(), @_toProcess.Where(c=>c.Level>=10).Count() Remaining)</MudText>
        </MudItem>
        <MudItem xs="4">
            <MudNumericField T="decimal" Label="Min BPM" ValueChanged="SetMin" Value="_minBpm"></MudNumericField>
        </MudItem>
        <MudItem xs="4">
            <MudNumericField T="decimal" Label="Max BPM" @bind-Value="_maxBpm"></MudNumericField>
        </MudItem>
        <MudItem xs="12">
            <MudAutocomplete T="string"
                             Label="Step Artist"
                             @bind-Value="_stepArtist"
                             CoerceValue="true"
                             SearchFunc="s=>Task.FromResult(_existingStepArtists.Where(a=>a.Contains(s,StringComparison.OrdinalIgnoreCase)).Distinct().ToArray().AsEnumerable())"></MudAutocomplete>
        </MudItem>
        <MudItem xs="12">
            <MudTextField T="string" Immediate="true" Label=@("Video "+_video) Value="_video" ValueChanged="SetVideo"></MudTextField>
        </MudItem>
        <MudItem xs="12">
            @foreach (var skill in Enum.GetValues<Skill>().Where(s=>!_skills.Contains(s)).OrderBy(s=>s.GetColor()))
            {
                <MudChip Style=@($"background-color:{skill.GetColor()}") OnClick="()=>_skills.Add(skill)">@skill.GetName()</MudChip>
            }
        </MudItem>
        @foreach (var skill in _skills.OrderBy(s=>s.GetColor()))
        {
            <MudItem xs="6">
                <MudChip Style=@($"background-color:{skill.GetColor()}") OnClick="()=>_skills.Remove(skill)">@skill.GetName()</MudChip>
            </MudItem>
            <MudItem xs="6">
                <MudCheckBox T="bool" Checked="_highlightedSkills.Contains(skill)" CheckedChanged="v=>ToggleHighlight(skill,v)" Label="Highlighted"></MudCheckBox>
            </MudItem>
        }

        <MudItem xs="4">
            <MudNumericField T="int" Label="Note Count" @bind-Value="_noteCount" Min="1" Max="10000" HideSpinButtons="true"></MudNumericField>
        </MudItem>
        <MudItem xs="12">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="_isSaving" OnClick="UpdateChart">Save Chart</MudButton>
        </MudItem>
        <MudItem xs="12">
            
            <iframe class="video"
                    id="chartVideoFrame"
                    src="@(_chartVideos[_currentChart.Id].ToString() + "?autoplay=1")"
                    allow="autoplay; encrypted-media"
                    allowfullscreen></iframe>
        </MudItem>


    </MudGrid>

}
@inject ICurrentUserAccessor CurrentUser;
@inject IChartRepository _charts;
@inject IMediator Mediator;
@inject ISnackbar Snackbar;
@inject NavigationManager NavManager;
@code
{
    private List<Chart> _toProcess = new List<Chart>();
    private Chart? _currentChart = null;
    private IDictionary<Guid, Uri> _chartVideos = new Dictionary<Guid, Uri>();
    private string _stepArtist = string.Empty;


    private void ToggleHighlight(Skill skill, bool newValue)
    {
        if (newValue)
            _highlightedSkills.Add(skill);
        else
            _highlightedSkills.Remove(skill);

    }
    private string _video = string.Empty;//https://youtu.be/euJl6KlomBU?si=K3W2w8n9YMagpqq0
    private static readonly Regex VideoRegex = new Regex(@"https\:\/\/www\.youtube\.com\/watch\?v\=(.*)", RegexOptions.Compiled);
    private static readonly Regex VideoRegex2 = new Regex(@"https\:\/\/youtu\.be\/([^?]+)", RegexOptions.Compiled);
    private ISet<Skill> _skills = Array.Empty<Skill>().ToHashSet();
    private ISet<Skill> _highlightedSkills = Array.Empty<Skill>().ToHashSet();
    private decimal _minBpm = 180;
    private int _noteCount = 0;
    private decimal _maxBpm = 180;
    private bool _isSaving = false;

    private void SetMin(decimal newMin)
    {
        _minBpm = newMin;
        _maxBpm = newMin;
    }

    private void SetVideo(string video)
    {
        var match = VideoRegex.Match(video);
        if (match.Success)
        {
            var hash = match.Groups[1].Value;
            _video = $"https://www.youtube.com/embed/{hash}";
            StateHasChanged();
            Snackbar.Add(_video, Severity.Error);
            return;
        }
        match = VideoRegex2.Match(video);
        if(match.Success)
        {
            
            var hash = match.Groups[1].Value;
            _video = $"https://www.youtube.com/embed/{hash}";
            StateHasChanged();
        Snackbar.Add(_video, Severity.Error);
            return;
        }
        _video = video;
        Snackbar.Add(_video, Severity.Error);
        StateHasChanged();
    }
    private void NextChart()
    {
        _currentChart = _toProcess.FirstOrDefault();
        if (_currentChart == null) return;

        _video = _chartVideos.TryGetValue(_currentChart.Id, out var video) ? video.ToString() : "";
        _minBpm = 180;
        _maxBpm = 180;
        _stepArtist = "";
        _noteCount = 0; _skills = Array.Empty<Skill>().ToHashSet();
        _highlightedSkills = Array.Empty<Skill>().ToHashSet();
    }

    private async Task UpdateChart()
    {
        if (_currentChart == null)
        {
            return;
        }
        _isSaving = true;
        await _charts.UpdateChart(_currentChart.Id, _stepArtist);
        await _charts.UpdateNoteCount(_currentChart.Id, _noteCount);
        await _charts.UpdateSong(_currentChart.Song.Name, Bpm.From(_minBpm, _maxBpm));
        await _charts.SetChartVideo(_currentChart.Id, new Uri(_video), "NOT KNOWN");
        await Mediator.Send(new UpdateChartSkillCommand(new ChartSkillsRecord(_currentChart.Id, _skills, _highlightedSkills)));
        Snackbar.Add("Updated Chart");
        _toProcess.Remove(_currentChart);
        NextChart();
        _isSaving = false;
    }
    private ISet<string> _existingStepArtists = new HashSet<string>();
    protected override async Task OnInitializedAsync()
    {
        if (!CurrentUser.User.IsAdmin)
        {
            NavManager.NavigateTo("/");
        }
        _chartVideos = (await Mediator.Send(new GetChartVideosQuery())).ToDictionary(cv => cv.ChartId, cv => cv.VideoUrl);
        
        var charts = (await Mediator.Send(new GetChartsQuery(MixEnum.Phoenix)))
            .Where(c=>c.Level==20)
            .ToArray();
        _existingStepArtists = charts.Select(c => c.StepArtist).Where(a => a != null).Select(c => c.Value.ToString()).Distinct(StringComparer.OrdinalIgnoreCase)
            .ToHashSet();
        _toProcess = charts
            .Where(c => c.StepArtist == null)
            .OrderByDescending(c => c.Level)
            .ToList();
        NextChart();
    }
}