@page "/Admin"
@using MediatR
@using Microsoft.EntityFrameworkCore
@using ScoreTracker.Application.Commands
@using ScoreTracker.Application.Queries
@using ScoreTracker.Data.Persistence
@using ScoreTracker.Domain.SecondaryPorts
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.Services.Contracts
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Web.Services.Contracts
@using ChartType = ScoreTracker.Domain.Enums.ChartType
@using MassTransit
@using Microsoft.AspNetCore.Mvc
@using Microsoft.Extensions.Caching.Memory
@using Microsoft.Identity.Client.Extensions.Msal
@using ScoreTracker.Application.Handlers
@using ScoreTracker.Domain.Events
@using ScoreTracker.Domain.Records
@using ScoreTracker.PersonalProgress
@using ScoreTracker.Domain.SecondaryPorts
@using System.Reflection

<PageTitle>Admin</PageTitle>

<MudButton OnClick="RebuildOfficialLeaderboard">
    Do It
</MudButton>
<MudButton Color="Color.Warning" Variant="Variant.Filled" OnClick="ClearCache">Clear Cache</MudButton>
<MudCard>
    <MudButton Disabled="_isReCalculating" OnClick="ReCalculateScores" Color="Color.Primary" Variant="Variant.Filled">ReCalculate Ratings</MudButton>

    @if (_isReCalculating)
    {
        <br />
        <MudProgressLinear Color="Color.Primary" Max="_maxReCalculate" Min="0" Value="@_currentReCalculate"></MudProgressLinear>
    }
</MudCard>
<MudCard>
    <MudCardHeader>Update Chart</MudCardHeader>
    <MudCardContent>
        <MudItem xs="12">
            <MudAutocomplete T="string"
                             @ref="_autocomplete"
                             Value="@_songSearchString"
                             AdornmentIcon="@Icons.Material.Filled.Search"
                             ResetValueOnEmptyText="true"
                             CoerceText="true"
                             Label="Song"
                             SearchFunc="(s,c)=>Search(s)"
                             ValueChanged="@SelectSong" MaxItems="100">

            </MudAutocomplete>
        </MudItem>
        @if (Charts.Any())
        {


            <MudItem sm="4" xs="12">
                <MudSelect T="Chart" Label="Chart" Value="_selectedChart" ValueChanged="SelectChart">
                    @foreach (var chart in Charts)
                    {
                        <MudSelectItem Value="chart">@chart.DifficultyString</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        }
        @if (_selectedChart != null)
        {
            <MudItem sm="4" xs="12">
                <MudTextField Label="Video URL" @bind-Value="_videoUrl"></MudTextField>
            </MudItem>
            <MudItem sm="4" xs="12">
                <MudTextField Label="Channel Name" @bind-Value="_videoChannel"></MudTextField>
            </MudItem>
            <MudItem sm="4" xs="12">
                <MudButton Variant="Variant.Filled" Disabled="_isSaving" Color="Color.Primary" OnClick="SaveChart">Save</MudButton>
            </MudItem>
        }
        </MudCardContent>
</MudCard>
<MudCard>
    <MudCardHeader>Create Song</MudCardHeader>
    <MudCardContent>
        <MudGrid>
            <MudItem xs="3">
                <MudTextField T="string" @bind-Value="_songName" Label="Song Name"></MudTextField>
            </MudItem>
            <MudItem xs="3">
                <MudTextField T="string" @bind-Value="_koreanName" Label="Korean Name"></MudTextField>
            </MudItem>
            <MudItem xs="3">
                <MudTextField T="string" @bind-Value="_imageUrl" Label="Image Name"></MudTextField>
            </MudItem>
            <MudItem xs="3">
                <MudSelect T="SongType" @bind-Value="_songType" Label="Song Type">
                    @foreach (var type in Enum.GetValues<SongType>())
                    {
                        <MudSelectItem T="SongType" Value="type">@type.ToString()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="3">
                <MudNumericField T="int" Min="0" Max="60" Label="Minutes" @bind-Value="_minutes"></MudNumericField>
            </MudItem>
            <MudItem xs="3">
                <MudNumericField T="int" Min="0" Max="60" Label="Seconds" @bind-Value="_seconds"></MudNumericField>
            </MudItem>
            <MudItem xs="6">
                <MudAutocomplete T="string"
                                 Label="Song Artist"
                                 @bind-Value="_songArtist"
                                 CoerceValue="true"
                                 SearchFunc="(s,c)=>Task.FromResult(_songArtists.Where(a=>a.Contains(s,StringComparison.OrdinalIgnoreCase)).Distinct().ToArray().AsEnumerable())"></MudAutocomplete>
            </MudItem>

            <MudItem xs="6">
                <MudNumericField T="decimal" Label="Min BPM" ValueChanged="SetMin" Value="_minBpm"></MudNumericField>
            </MudItem>
            <MudItem xs="6">
                <MudNumericField T="decimal" Label="Max BPM" @bind-Value="_maxBpm"></MudNumericField>
            </MudItem>
            @foreach (var chart in _newCharts)
            {
                <MudItem xs="2">
                    <MudSelect T="ChartType" @bind-Value="chart.Type" Label="Chart Type">
                        @foreach (var type in Enum.GetValues<ChartType>())
                        {
                            <MudSelectItem T="ChartType" Value="type">@type.ToString()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="2">
                    <MudNumericField T="int" Min="(int)DifficultyLevel.Min" Max="(int)DifficultyLevel.Max" @bind-Value="chart.Level" Label="Level/Players"></MudNumericField>
                </MudItem>
                <MudItem xs="3">
                    <MudTextField T="string" @bind-Value="chart.YoutubeHash" Label="Youtube Hash"></MudTextField>
                </MudItem>
                <MudItem xs="2">
                    <MudTextField T="string" @bind-Value="chart.ChannelName" Label="Channel Name"></MudTextField>
                </MudItem>
                <MudItem xs="3">
                    <MudAutocomplete T="string"
                                     Label="Step Artist"
                                     @bind-Value="chart.StepArtist"
                                     CoerceValue="true"
                                     SearchFunc="(s,c)=>Task.FromResult(_stepArtists.Where(a=>a.Contains(s,StringComparison.OrdinalIgnoreCase)).Distinct().ToArray().AsEnumerable())"></MudAutocomplete>
                </MudItem>
            }
            <MudItem xs="12">
                <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddChart"></MudIconButton>
            </MudItem>
            <MudItem xs="12">
                <MudButton StartIcon="@Icons.Material.Filled.Save" Disabled="_isSaving||!IsValid" OnClick="CreateSong">Create</MudButton>
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>

@inject ICurrentUserAccessor CurrentUser;
@inject IChartRepository _charts;
@inject IOfficialLeaderboardRepository OfficialLeaderboards;
@inject IMediator Mediator;
@inject IUiSettingsAccessor UiSettings;
@inject ISnackbar Snackbar;
@inject NavigationManager NavManager;
@inject ITierListRepository TierLists;
@inject IWorldRankingService WorldRanking;
@inject IBus Bus;
@inject IOfficialSiteClient OfficialClient;
@inject IFileUploadClient Files;
@inject ChartAttemptDbContext Database;
@inject IUserRepository Users;
@inject IBotClient Bot;
@inject IMemoryCache Cache;
@code
{
    private MudAutocomplete<string> _autocomplete;   
    private Chart? _selectedChart;
    private string _songSearchString = string.Empty;
    private Chart[] Charts = Array.Empty<Chart>();
    private IEnumerable<string> SongNames = Array.Empty<string>();
    private string _videoUrl = string.Empty;
    private string _videoChannel = string.Empty;
    private string _koreanName = string.Empty;
    private Task<IEnumerable<string>> Search(string song) =>
        Task.FromResult(SongNames.Where(n => n.ToLower().Contains(song?.ToLower() ?? ""))
            .OrderBy(n => n.Equals(song, StringComparison.OrdinalIgnoreCase) ? 0 : 1).ToArray().AsEnumerable());

    private void AddChart()
    {
        var newChart = new NewChart();
        if (_newCharts.Any())
        {
            var lastChart = _newCharts.Last();
            newChart.StepArtist = lastChart.StepArtist;
            newChart.Type = lastChart.Type;
        }
        _newCharts.Add(newChart);
    }

    private void ClearCache()
    {
        _charts.ClearCache();
    }
    private async Task RebuildOfficialLeaderboard()
    {

        /*var message = string.Join(" ", Enum.GetValues<PhoenixLetterGrade>().Select(l => $"#LETTERGRADE|{l}#").Append("#LETTERGRADE|#"));
        message += "\n";
        message += string.Join(" ", Enum.GetValues<PhoenixPlate>().Select(l => $"#PLATE|{l}#").Append("#PLATE|#"));
        var message = string.Join(" ", DifficultyLevel.All.Select(l => $"#DIFFICULTY|{ChartType.Double.GetShortHand()}{l}#")
            .Concat(Enumerable.Range(1, 26).Select(l => $"#DIFFICULTY|{ChartType.Single.GetShortHand()}{l}#"))
            .Concat(Enumerable.Range(2, 4).Select(l => $"#DIFFICULTY|{ChartType.CoOp.GetShortHand()}{l}#")));
        await Bot.SendMessage(message, 1164337603034759278, CancellationToken.None);*/

    // await OfficialClient.FixAvatars();
    //await Bus.Publish(new ProcessScoresTiersListCommand());
     //await Bus.Publish(new ProcessPassTierListCommand());
    //await Bus.Publish(new UpdateBountiesEvent());
     //   await Bus.Publish(new CalculateScoringDifficultyEvent());
    
    //await OfficialLeaderboards.FixRankingOrders(CancellationToken.None);
    
       //await Mediator.Send(new UpdateSongImagesCommand(false));
       
       await Mediator.Send(new ProcessChartPopularityCommand());
        await Mediator.Send(new ProcessOfficialLeaderboardsCommand());
    await Mediator.Send(new ProcessChartPopularityCommand());
    await WorldRanking.CalculateWorldRankings(CancellationToken.None);
        

        //await Bus.Publish(new ProcessPassTierListCommand());
        /*var songImages = (await Database.Song.Select(s => s.ImagePath).ToArrayAsync()).ToHashSet();
         * 
        var images = await Files.GetFiles("songs/");
        var toDelete = images.Where(s => !songImages.Contains(s.ToString())).ToArray();
        foreach (var image in toDelete)
        {
            await Files.DeleteFile(image.PathAndQuery);
        }*/

   /* var userIds = await Database.User.Select(u => u.Id).ToArrayAsync();
        foreach (var userId in userIds)
        {
            await Mediator.Send(new PlayerRatingSaga.RecalculateStats(userId));
        }*/


       // await Bus.Publish(new CalculateChartLetterDifficultiesEvent());
       Snackbar.Add("Done", Severity.Success);

    }

    private decimal _minBpm = 0;
    private decimal _maxBpm = 0;
    private void SetMin(decimal newMin)
    {
        _minBpm = newMin;
        _maxBpm = newMin;
    }

    private async Task SelectChart(Chart chart)
    {
        var video = await Mediator.Send(new GetChartVideosQuery(new[] { chart.Id }));
        _selectedChart = chart;
        _videoUrl = video.FirstOrDefault()?.VideoUrl.ToString() ?? string.Empty;
        _videoChannel = video.FirstOrDefault()?.ChannelName.ToString() ?? string.Empty;
    }

    private async Task SaveChart()
    {
        if (_selectedChart==null || !Uri.TryCreate(_videoUrl, UriKind.Absolute, out var url) || !Name.TryParse(_videoChannel, out var channel))
        {
            Snackbar.Add("Video info is not formatted correctly", Severity.Error);
            return;
        }
        _isSaving = true;
        await _charts.SetChartVideo(_selectedChart.Id, url, channel);
        _isSaving = false;
        Snackbar.Add("Chart saved", Severity.Success);
    }
    private async Task SelectSong(string songName)
    {
        songName = songName ?? string.Empty;
        if (_autocomplete.Open)
        {
            await _autocomplete.ToggleMenuAsync();
        }
        _songSearchString = songName;
        _selectedChart = null;
        if (!Name.TryParse(songName, out var name))
        {
            Charts = Array.Empty<Chart>();
            return;
        }

        Charts = (await Mediator.Send(new GetChartsBySongQuery(await UiSettings.GetSelectedMix(), name))).ToArray();

    }
    private bool _isReCalculating = false;
    private int _maxReCalculate = 1;
    private int _currentReCalculate = 0;
    private readonly ICollection<NewChart> _newCharts = new List<NewChart>();
    private string _songName = string.Empty;
    private string _imageUrl = string.Empty;
    private string _songArtist = string.Empty;
    private int _minutes = 2;
    private int _seconds = 0;
    private SongType _songType = SongType.Arcade;
    private bool IsValid => Name.TryParse(_songName, out var name) && !string.IsNullOrWhiteSpace(_imageUrl) && _newCharts.Any() && _newCharts.All(c => !string.IsNullOrWhiteSpace(c.YoutubeHash) && Name.TryParse(c.ChannelName, out var channelName));
    private bool _isSaving = false;

    private async Task CreateSong()
    {
        _isSaving = true;
        var songId = await _charts.CreateSong(_songName,_koreanName, new Uri($"https://piuimages.arroweclip.se/songs/{_imageUrl}"), _songType,TimeSpan.FromMinutes(_minutes).Add(TimeSpan.FromSeconds(_seconds)),_songArtist,Bpm.From(_minBpm,_maxBpm));
        foreach (var chart in _newCharts)
        {
            await _charts.CreateChart(MixEnum.Phoenix, songId, chart.Type, chart.Level, chart.ChannelName,new Uri($"https://www.youtube.com/embed/{chart.YoutubeHash}"),chart.StepArtist);

        }
        _charts.ClearCache();
        _songName = string.Empty;
        _koreanName = string.Empty;
        _imageUrl = string.Empty;
        _songType = SongType.Arcade;
        _newCharts.Clear();
        _isSaving = false;

    }
    private async Task ReCalculateScores()
    {
        _isReCalculating = true;
        //var ratingsWithVotes = (await Mediator.Send(new GetChartRatingsQuery(MixEnum.Phoenix))).Where(c => c.RatingCount > 0).ToArray();
        var charts = (await Mediator.Send(new GetChartsQuery(MixEnum.Phoenix))).ToArray();
        _maxReCalculate = charts.Length;
        _currentReCalculate = 1;
        /*foreach (var rating in ratingsWithVotes)
        {
            await Mediator.Send(new ReCalculateChartRatingCommand(MixEnum.XX, rating.ChartId));
            _currentReCalculate++;
            StateHasChanged();
        }*/

        foreach (var chart in charts)
        {
            await Mediator.Send(new ReCalculateChartRatingCommand(MixEnum.Phoenix, chart.Id));
            _currentReCalculate++;
            StateHasChanged();
        }
        _isReCalculating = false;
    }

    private IList<PlayerStatsRecord> _stats = new List<PlayerStatsRecord>();
    private IEnumerable<string> _songArtists = Array.Empty<string>();
    private IEnumerable<string> _stepArtists = Array.Empty<string>();
    protected override async Task OnInitializedAsync()
    {
        if (!CurrentUser.User.IsAdmin)
        {
            NavManager.NavigateTo("/");
        }
        var charts = (await Mediator.Send(new GetChartsQuery(MixEnum.Phoenix))).ToArray();
        _songArtists = charts.Select(c => c.Song.Artist).Distinct().Select(s => s.ToString()).ToArray();
        _stepArtists = charts.Where(c => c.StepArtist != null).Select(c => c.StepArtist!.Value).Distinct().Select(s=>s.ToString()).ToArray();
        SongNames = (await Mediator.Send(new GetChartsQuery(await UiSettings.GetSelectedMix()))).Select(c => c.Song.Name.ToString()).Distinct().ToArray();
    }

    private sealed class NewChart
    {
        public ChartType Type { get; set; } = ChartType.Single;
        public int Level { get; set; } = 14;
        public string ChannelName { get; set; } = "펌프잇업공식PUMP IT UP Official";
        public string YoutubeHash { get; set; } = string.Empty;
        public string StepArtist { get; set; } = string.Empty;

    }
}
