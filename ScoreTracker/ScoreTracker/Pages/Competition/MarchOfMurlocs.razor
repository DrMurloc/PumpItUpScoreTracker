@page "/Tournaments/MarchOfMurlocs"
@using ScoreTracker.Domain.SecondaryPorts
@using MediatR
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.Models
@using ScoreTracker.Domain.Records
<PageTitle>March of Murlocs</PageTitle>

@if (_active.Any())
{

    <MudText Typo="Typo.h4">March of Murlocs</MudText>
    <MudText Typo="Typo.subtitle1">
        <MudLink Target="_blank" Href="https://docs.google.com/document/d/1Nwr-PDy6lgkTSt4dKu1-0fdeDXdgLWvl7j5yiuIcRCw/edit?usp=sharing">@L["Rules"]</MudLink>
    </MudText>
    <br/>
    <br/>
    <MudDataGrid T="TournamentRecord" Items="_active">
        <Columns>
            <PropertyColumn T="TournamentRecord" TProperty="string" Property="x => x.Name" Title="Tournament" Sortable="false"></PropertyColumn>
            <TemplateColumn T="TournamentRecord" Title="Start Date" Sortable="true" SortBy="x => x.StartDate ?? DateTimeOffset.MinValue">
                <CellTemplate>
                    <MudText>@(context.Item.StartDate?.ToString("D")??"")</MudText>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="TournamentRecord" Title="End Date" Sortable="true" SortBy="x => x.EndDate ?? DateTimeOffset.MaxValue">
                <CellTemplate>
                    <MudText>@(context.Item.EndDate?.ToString("D")??"")</MudText>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="TournamentRecord" Title="Link" Sortable="false">
                <CellTemplate>

                    <MudIconButton Disabled="_isLoading" Icon="@Icons.Material.Filled.Leaderboard" OnClick="() => GoToSubmit(context.Item.Id,context.Item.Type)"></MudIconButton>
                    
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
}
@if (_upcoming.Any())
{
    <br/>
    <br/>
    <MudText Typo="Typo.h4">Upcoming Tournaments</MudText>
    <MudDataGrid T="TournamentRecord" Items="_upcoming">
        <Columns>
            <PropertyColumn T="TournamentRecord" TProperty="string" Property="x => x.Name" Title="Tournament" Sortable="false"></PropertyColumn>
            <TemplateColumn T="TournamentRecord" Title="Start Date" Sortable="true" SortBy="x => x.StartDate ?? DateTimeOffset.MinValue">
                <CellTemplate>
                    <MudText>@(context.Item.StartDate?.ToString("D")??"")</MudText>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="TournamentRecord" Title="End Date" Sortable="true" SortBy="x => x.EndDate ?? DateTimeOffset.MaxValue">
                <CellTemplate>
                    <MudText>@(context.Item.EndDate?.ToString("D")??"")</MudText>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="TournamentRecord" Title="Link" Sortable="false">
                <CellTemplate>

                    <MudIconButton Disabled="_isLoading" Icon="@Icons.Material.Filled.Leaderboard" OnClick="() => GoToSubmit(context.Item.Id,context.Item.Type)"></MudIconButton>
                    
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
}
@if (_previous.Any())
{
    
    <br/>
    <br/>
    <MudText Typo="Typo.h4">Previous Tournaments</MudText>
    <MudDataGrid T="TournamentRecord" Items="_previous">
        <Columns>
            <PropertyColumn T="TournamentRecord" TProperty="string" Property="x => x.Name" Title="Tournament" Sortable="false"></PropertyColumn>
            <TemplateColumn T="TournamentRecord" Title="Start Date" Sortable="true" SortBy="x => x.StartDate ?? DateTimeOffset.MinValue">
                <CellTemplate>
                    <MudText>@(context.Item.StartDate?.ToString("D")??"")</MudText>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="TournamentRecord" Title="End Date" Sortable="true" SortBy="x => x.EndDate ?? DateTimeOffset.MaxValue">
                <CellTemplate>
                    <MudText>@(context.Item.EndDate?.ToString("D")??"")</MudText>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="TournamentRecord" Title="Link" Sortable="false">
                <CellTemplate>

                    <MudIconButton Disabled="_isLoading" Icon="@Icons.Material.Filled.Leaderboard" OnClick="() => GoToSubmit(context.Item.Id,context.Item.Type)"></MudIconButton>
                    
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
}

@inject IMediator Mediator
@inject NavigationManager NavManager;
@inject IQualifiersRepository Qualifiers;
@code
{
    private bool _isLoading = false;
    private void GoToSubmit(Guid tournamentId, TournamentType type)
    {
        
        NavManager.NavigateTo($"/Tournament/Stamina/{tournamentId}");
    }

    private TournamentRecord[] _upcoming = Array.Empty<TournamentRecord>();
    private TournamentRecord[] _previous = Array.Empty<TournamentRecord>();
    private TournamentRecord[] _active = Array.Empty<TournamentRecord>();
    private IDictionary<Guid, TournamentRecord> _tournaments = new Dictionary<Guid, TournamentRecord>();
    private IDictionary<Guid, bool> _hasQualifiers = new Dictionary<Guid, bool>();
    protected override async Task OnInitializedAsync()
    {
        var tournaments = (await Mediator.Send(new GetAllTournamentsQuery())).Where(t=>t.IsMoM).ToArray();
        _tournaments = tournaments.ToDictionary(t => t.Id);
        var now = DateTimeOffset.Now;
        foreach (var tournament in _tournaments.Values)
        {
            if (tournament.Type == TournamentType.Stamina || tournament.StartDate<now)
            {
                _hasQualifiers[tournament.Id] = false;
                continue;
            }
            try
            {

                var qualSettings = await Qualifiers.GetQualifiersConfiguration(tournament.Id);
                _hasQualifiers[tournament.Id] = qualSettings.PlayCount > 0;
            }
            catch (Exception e)
            {
                _hasQualifiers[tournament.Id] = false;
            }
        }
        _upcoming = tournaments.Where(t => t.StartDate != null && t.StartDate > DateTimeOffset.Now).ToArray();
        _previous = tournaments.Where(t => t.EndDate != null && t.EndDate < DateTimeOffset.Now).ToArray();
        _active = tournaments.Where(t => (t.StartDate == null || t.StartDate <= DateTimeOffset.Now) && (t.EndDate == null || t.EndDate >= DateTimeOffset.Now)).ToArray();

    }
}
