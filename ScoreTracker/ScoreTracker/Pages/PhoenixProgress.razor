@using MediatR
@using ScoreTracker.Application.Commands
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.SecondaryPorts
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Domain.Models
@using ChartType = ScoreTracker.Domain.Enums.ChartType
@page "/{RequestedUserId:guid}/Phoenix/Progress"
@page "/Phoenix/Progress"
<MudPaper>
    <MudText><i>Disclaimer: The progress page for Phoenix is still being developed, there are known bugs and improvements to be addressed.</i></MudText>
    <MudToolBar>
        <MudText Typo="Typo.h6">Progress</MudText>
        <MudSpacer></MudSpacer>

        <MudSelect T="ChartType?" Label="Chart Type" Value="_selectedChartType" ValueChanged="SetSelectedChartType" FullWidth="false" Style="padding-left: 30px;">
            <MudSelectItem T="ChartType?" Value="null">All</MudSelectItem>
            <MudSelectItem T="ChartType?" Value="ChartType.Single">Singles</MudSelectItem>
            <MudSelectItem T="ChartType?" Value="ChartType.Double">Doubles</MudSelectItem>
            <MudSelectItem T="ChartType?" Value="ChartType.CoOp">CoOp</MudSelectItem>
        </MudSelect>
        <MudNumericField T="int" HideSpinButtons="true" Label="Level Min" Min="DifficultyLevel.Min" Max="DifficultyLevel.Max" Value="_minLevel" ValueChanged="l => SetLevels(l, _maxLevel)"></MudNumericField>
        <MudNumericField T="int" HideSpinButtons="true" Label="Level Max" Min="DifficultyLevel.Min" Max="DifficultyLevel.Max" Value="_maxLevel" ValueChanged="l => SetLevels(_minLevel, l)"></MudNumericField>
        @if (CurrentUser.IsLoggedIn && CurrentUser.User.IsPublic && CurrentUser.User.Id == RequestedUserId)
        {
            <MudTooltip Text="Share Your Progress Page" Inline="true">
                <MudIconButton Icon="@Icons.Material.Filled.Share" OnClick="() => _showShareDialog = true"></MudIconButton>
            </MudTooltip>
        }
        <MudSwitch T="bool" Label="Separate Levels" Checked="_separateLevels" CheckedChanged="SetSeparateLevels" Color="Color.Primary"></MudSwitch>
        <br/>

    </MudToolBar>
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" @ref="_tabs">
        <MudTabPanel Text="Score Distribution Lines">
            <ApexChart TItem="RecordedPhoenixScore"
                       Title="Score Distribution"
                       @ref="_scoreDdistribution"
                       Options="_scoreDistributionOptions">

                @if (_separateLevels && _filteredScores.Any(s => s.Score != null))
                {
                    @foreach (var levelGroup in _filteredScores.Where(s => s.Score != null).GroupBy(s => _charts[s.ChartId].Level).OrderBy(g => g.Key))
                    {

                        <ApexPointSeries TItem="RecordedPhoenixScore"
                                         Items="levelGroup"
                                         Name="@levelGroup.Key.ToString()"
                                         SeriesType="SeriesType.Line"
                                         XValue="@(e => (int)e.Score.Value.Round(4))"
                                         YAggregate="@(e => e.Count())"
                                         OrderBy="e => e.X"/>
                    }
                }
                else
                {
                    <ApexPointSeries TItem="RecordedPhoenixScore"
                                     Items="_filteredScores.Where(s => s.Score != null)"
                                     Name="Scores"
                                     SeriesType="SeriesType.Line"
                                     XValue="@(e => (int)e.Score.Value.Round(4))"
                                     YAggregate="@(e => e.Count())"
                                     OrderBy="e => e.X"/>
                }
            </ApexChart>

        </MudTabPanel>
        <MudTabPanel Text="Score Distribution Boxes">

            <ApexChart TItem="BoxPlotData"
                       Title="Score Distribution"
                       @ref="_scoreBoxes">

                @if (_separateLevels)
                {

                    <ApexBoxPlotSeries TItem="BoxPlotData"
                                       Items="BoxPlotData.From(_filteredScores.Where(s => s.Score != null).ToArray(), s => _charts[s.ChartId].Level.ToString()).ToArray()"
                                       Name="Scores"
                                       XValue="@(e => e.Label)"
                                       Max="@(e => e.Max)"
                                       Min="@(e => e.Min)"
                                       Quantile1="@(e => e.Q1)"
                                       Quantile3="@(e => e.Q3)"
                                       OrderBy="@(e => e.X)"
                                       Median="@(e => e.Median)"/>
                }
                else
                {
                    <ApexBoxPlotSeries TItem="BoxPlotData"
                                       Items="BoxPlotData.From(_filteredScores.Where(s => s.Score != null).ToArray(), s => AllLevelsString).ToArray()"
                                       Name="Scores"
                                       XValue="@(e => e.Label)"
                                       Max="@(e => e.Max)"
                                       Min="@(e => e.Min)"
                                       Quantile1="@(e => e.Q1)"
                                       Quantile3="@(e => e.Q3)"
                                       OrderBy="@(e => e.X)"
                                       Median="@(e => e.Median)"/>
                }
            </ApexChart>
        </MudTabPanel>
    </MudTabs>


    <MudDialog @bind-IsVisible="_showShareDialog">
        <DialogContent>
            <MudText>Use this link to share your chart list to other players.</MudText>
            <br/>
            <MudTextField Value="@ShareUrl" Label="Share Url" Variant="Variant.Outlined" Margin="Margin.Dense" ReadOnly="true"/>
        </DialogContent>
        <DialogActions>
            <MudSpacer></MudSpacer>
            <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.ContentCopy" OnClick="CopyShareLink">Copy To Clipboard</MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Close" OnClick="() => _showShareDialog = false">Close</MudButton>
        </DialogActions>
    </MudDialog>
</MudPaper>
@inject IMediator Mediator
@inject NavigationManager NavManager
@inject ICurrentUserAccessor CurrentUser;
@inject IJSRuntime Javascript;
@inject ISnackbar Snackbar;
@code {

    private const string AllLevelsString = "All Levels";
    private ApexChart<RecordedPhoenixScore>? _scoreDdistribution;
    private ApexChart<BoxPlotData>? _scoreBoxes;
    private bool _separateLevels = false;
    private MudTabs _tabs;

    private readonly ApexChartOptions<RecordedPhoenixScore> _scoreDistributionOptions = new ApexChartOptions<RecordedPhoenixScore>()
    {
        Stroke = new Stroke { Curve = Curve.Smooth }
    };

    [Parameter]
    public Guid? RequestedUserId { get; set; }

    private bool _showShareDialog = false;

    private async Task SetSeparateLevels(bool value)
    {
        _separateLevels = value;
        await Filter();
    }
    private async Task SetLevels(DifficultyLevel min, DifficultyLevel max)
    {
        _minLevel = min;
        _maxLevel = max;
        await Filter();
    }
    private async Task SetSelectedChartType(ChartType? chartType)
    {
        _selectedChartType = chartType;
        await Filter();
    }
    private ChartType? _selectedChartType = ChartType.Single;
    private async Task CopyShareLink()
    {
        await Javascript.InvokeVoidAsync("navigator.clipboard.writeText", ShareUrl);
        Snackbar.Add("Copied to clipboard!", Severity.Success);
    }
    
    private string ShareUrl => CurrentUser.IsLoggedIn ? $"{NavManager.BaseUri}{CurrentUser.User.Id}/Phoenix/Progress" : string.Empty;

    private IEnumerable<RecordedPhoenixScore> _filteredScores = Array.Empty<RecordedPhoenixScore>();
    private IEnumerable<RecordedPhoenixScore> _scores = Array.Empty<RecordedPhoenixScore>();
    private IDictionary<Guid, Chart> _charts = new Dictionary<Guid, Chart>();
    private DifficultyLevel _minLevel = DifficultyLevel.Min;
    private DifficultyLevel _maxLevel = DifficultyLevel.Max;

    private async Task Filter()
    {
        var results = _scores;
        if (_selectedChartType != null)
        {
            results = results.Where(c => _charts[c.ChartId].Type == _selectedChartType);
        }
        results = results.Where(c => _charts[c.ChartId].Level >= _minLevel);
        results = results.Where(c => _charts[c.ChartId].Level <= _maxLevel);
        _filteredScores = results.ToArray();
        StateHasChanged();
        if (_scoreDdistribution != null && _tabs.ActivePanel.Text=="Score Distribution Lines")
        {
            
            await _scoreDdistribution.UpdateSeriesAsync(true);
            await _scoreDdistribution.UpdateOptionsAsync(true,true,true);
        }
        if (_scoreBoxes != null && _tabs.ActivePanel.Text == "Score Distribution Boxes")
        {
            
            await _scoreBoxes.UpdateSeriesAsync(true);
            await _scoreBoxes.UpdateOptionsAsync(true, true, true);

        }
        StateHasChanged();
        
    }
    protected override async Task OnInitializedAsync()
    {
        if (RequestedUserId == null)
        {
            if (!CurrentUser.IsLoggedIn)
            {
                NavManager.NavigateTo("/Charts");
                return;
            }
            RequestedUserId = CurrentUser.User.Id;
        }
        _scores = await Mediator.Send(new GetPhoenixRecordsQuery(RequestedUserId.Value));
        _charts = (await Mediator.Send(new GetChartsQuery(MixEnum.Phoenix))).ToDictionary(c => c.Id);
        
        await Filter();
    }

    private sealed record BoxPlotData(object Label, int Min, int Max, int Median, int Q1, int Q3)
    {

        public static IEnumerable<BoxPlotData> From(RecordedPhoenixScore[] scores, Func<RecordedPhoenixScore, object> getLabel) =>
            scores.Any(s => s.Score != null) ? scores.Where(s => s.Score != null).GroupBy(getLabel).Select(group =>
                new BoxPlotData(group.Key, group.Min(s => (int)s.Score), group.Max(s => (int)s.Score), Median(group), Q1(group), Q3(group))):
                Array.Empty<BoxPlotData>();
    }

    private static int Q1(IEnumerable<RecordedPhoenixScore> values)
    {
        var sorted = values.Select(s=>(int)s.Score).OrderBy(v => v).ToArray();
        return sorted[sorted.Length / 4];
    }
    private static int Q3(IEnumerable<RecordedPhoenixScore> values)
    {
        var sorted = values.Select(s => (int)s.Score).OrderBy(v => v).ToArray();
        return sorted[3* sorted.Length / 4];
    }
    private static int Median(IEnumerable<RecordedPhoenixScore> values)
    {
        var sorted = values.Select(s => (int)s.Score).OrderBy(v => v).ToArray();
        return sorted[sorted.Length / 2];
    }
}
