@using MediatR
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.SecondaryPorts
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Domain.Models
@using ScoreTracker.Web.Services.Contracts
@using ChartType = ScoreTracker.Domain.Enums.ChartType
@page "/{RequestedUserId:guid}/Phoenix/Progress"
@page "/Phoenix/Progress"
<MudPaper>
    <MudText><i>Disclaimer: The progress page for Phoenix is still being developed, there are known bugs and improvements to be addressed.</i></MudText>
    <MudToolBar>
        <MudText Typo="Typo.h6">Progress</MudText>
        <MudSpacer></MudSpacer>

        <MudNumericField T="int" HideSpinButtons="true" Label="Level Min" Min="DifficultyLevel.Min" Max="DifficultyLevel.Max" Value="_minLevel" ValueChanged="l => SetLevels(l, _maxLevel)"></MudNumericField>
        <MudNumericField T="int" HideSpinButtons="true" Label="Level Max" Min="DifficultyLevel.Min" Max="DifficultyLevel.Max" Value="_maxLevel" ValueChanged="l => SetLevels(_minLevel, l)"></MudNumericField>
        @if (CurrentUser.IsLoggedIn && CurrentUser.User.IsPublic && CurrentUser.User.Id == RequestedUserId)
        {
            <MudTooltip Text="Share Your Progress Page" Inline="true">
                <MudIconButton Icon="@Icons.Material.Filled.Share" OnClick="() => _showShareDialog = true"></MudIconButton>
            </MudTooltip>
        }
        <br/>

    </MudToolBar>
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" @ref="_tabs">
        <MudTabPanel Text="Difficulty Progress">
            <MudTable T="DifficultyEntry" Items="_difficultyEntries">
                <HeaderContent>
                    <MudTh>Level</MudTh>
                    <MudTh>Passes</MudTh>
                    <MudTh>Rating</MudTh>
                    <MudTh>Min Score</MudTh>
                    <MudTh>Avg Score</MudTh>
                    <MudTh>Max Score</MudTh>
                    <MudTh>Avg Plate</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Level</MudTd>
                    <MudTd>
                        <MudProgressLinear Color="@(context.Remaining==0 ? Color.Success : Color.Primary)" Value="100.0 * (context.Passed / (double)(context.Passed+context.Remaining))">
                            <MudText Typo="Typo.subtitle1">
                                @context.Passed / @(context.Passed+context.Remaining)
                            </MudText>
                        </MudProgressLinear>
                    </MudTd>
                    <MudTd>
                        @if (context.RatingRemaining + context.TotalRating > 0)
                        {

                            <MudProgressLinear Color="@(context.RatingRemaining==0 ? Color.Success : Color.Primary)" Value="100.0 * (context.TotalRating / (double)(context.TotalRating+context.RatingRemaining))">
                            </MudProgressLinear>
                        }
                    </MudTd>
                    <MudTd>
                        @if(context.MinScore!=null){
                            <MudText>@context.MinScore (@context.MinScore.Value.LetterGrade.GetName())</MudText>
                        }
                    </MudTd>
                    <MudTd>
                        @if(context.AverageScore!=null){
                            <MudText>@context.AverageScore (@context.AverageScore.Value.LetterGrade.GetName())</MudText>
                        }
                    </MudTd>
                    <MudTd>
                        @if (context.MaxScore != null)
                        {
                            <MudText>@context.MaxScore (@context.MaxScore.Value.LetterGrade.GetName())</MudText>
                        }
                    </MudTd>
                    <MudTd>
                        @if (context.AvgPlate1 != null)
                        {
                            @context.AvgPlate1.Value.GetShorthand()
                        }
                        @if(context.AvgPlate2!=null && context.AvgPlate2 != context.AvgPlate1)
                        {
                            @($" - {context.AvgPlate2.Value.GetShorthand()}")
                        }
                    </MudTd>
                </RowTemplate>
            </MudTable>


        </MudTabPanel>
        <MudTabPanel Text="Score Distribution Lines">
            <ApexChart TItem="BoxPlotData"
                       Title="Score Distribution"
                       @ref="_scoreDistLines"
                       Options="_scoreBoxesOptions">
                <ApexPointSeries TItem="BoxPlotData"
                                 Items="BoxPlotData.From(_filteredScores.Where(s => s.Score != null).ToArray(), s => _charts[s.ChartId].Level).ToArray()"
                                 Name="Min"
                                 SeriesType="SeriesType.Line"
                                 XValue="@(e => e.Label)"
                                 YValue="@(e=>e.Min)"
                                 OrderBy="e => e.X"/>
                <ApexPointSeries TItem="BoxPlotData"
                                 Items="BoxPlotData.From(_filteredScores.Where(s => s.Score != null).ToArray(), s => _charts[s.ChartId].Level).ToArray()"
                                 Name="Q1"
                                 SeriesType="SeriesType.Line"
                                 XValue="@(e => e.Label)"
                                 YValue="@(e=>e.Q1)"
                                 OrderBy="e => e.X"/>
                <ApexPointSeries TItem="BoxPlotData"
                                 Items="BoxPlotData.From(_filteredScores.Where(s => s.Score != null).ToArray(), s => _charts[s.ChartId].Level).ToArray()"
                                 Name="Median"
                                 SeriesType="SeriesType.Line"
                                 XValue="@(e => e.Label)"
                                 YValue="@(e=>e.Median)"
                                 OrderBy="e => e.X" />
                <ApexPointSeries TItem="BoxPlotData"
                                 Items="BoxPlotData.From(_filteredScores.Where(s => s.Score != null).ToArray(), s => _charts[s.ChartId].Level).ToArray()"
                                 Name="Q3"
                                 SeriesType="SeriesType.Line"
                                 XValue="@(e => e.Label)"
                                 YValue="@(e=>e.Q3)"
                                 OrderBy="e => e.X" />

                <ApexPointSeries TItem="BoxPlotData"
                                 Items="BoxPlotData.From(_filteredScores.Where(s => s.Score != null).ToArray(), s => _charts[s.ChartId].Level).ToArray()"
                                 Name="Max"
                                 SeriesType="SeriesType.Line"
                                 XValue="@(e => e.Label)"
                                 YValue="@(e=>e.Max)"
                                 OrderBy="e => e.X" />
            </ApexChart>
        </MudTabPanel>
        <MudTabPanel Text="Singles vs Doubles">
            <ApexChart TItem="BoxPlotData"
                       Title="Singles vs Doubles"
                       @ref="_sdChart"
                       Options="_scoreBoxesOptions">
                <ApexPointSeries TItem="BoxPlotData"
                                 Color="#EA3F24"
                                 Items="BoxPlotData.From(_scores.Where(s => s.Score != null && _charts[s.ChartId].Type==ChartType.Single).ToArray(), s => _charts[s.ChartId].Level).ToArray()"
                                 Name="Singles"
                                 SeriesType="SeriesType.Line"
                                 XValue="@(e => e.Label)"
                                 YValue="@(e=>e.Average)"
                                 OrderBy="e => e.X" />
                <ApexPointSeries TItem="BoxPlotData"
                                 Color="#76FA4F"
                                 Items="BoxPlotData.From(_scores.Where(s => s.Score != null && _charts[s.ChartId].Type==ChartType.Double).ToArray(), s => _charts[s.ChartId].Level).ToArray()"
                                 Name="Doubles"
                                 SeriesType="SeriesType.Line"
                                 XValue="@(e => e.Label)"
                                 YValue="@(e=>e.Average)"
                                 OrderBy="e => e.X" />

            </ApexChart>
        </MudTabPanel>
    </MudTabs>


    <MudDialog @bind-IsVisible="_showShareDialog">
        <DialogContent>
            <MudText>Use this link to share your chart list to other players.</MudText>
            <br/>
            <MudTextField Value="@ShareUrl" Label="Share Url" Variant="Variant.Outlined" Margin="Margin.Dense" ReadOnly="true"/>
        </DialogContent>
        <DialogActions>
            <MudSpacer></MudSpacer>
            <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.ContentCopy" OnClick="CopyShareLink">Copy To Clipboard</MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Close" OnClick="() => _showShareDialog = false">Close</MudButton>
        </DialogActions>
    </MudDialog>
</MudPaper>
<style>
    .apexcharts-text tspan {
        fill:#FFFFFF
    }
</style>
@inject IMediator Mediator
@inject NavigationManager NavManager
@inject ICurrentUserAccessor CurrentUser;
@inject IJSRuntime Javascript;
@inject ISnackbar Snackbar;
@inject IUiSettingsAccessor UiSettings;
@code {
    private ApexChart<BoxPlotData>? _scoreDistLines;
    private ApexChart<BoxPlotData>? _sdChart;
    private MudTabs _tabs;

    private readonly ApexChartOptions<RecordedPhoenixScore> _scoreDistributionOptions = new ApexChartOptions<RecordedPhoenixScore>()
    {
        Stroke = new Stroke { Curve = Curve.Smooth }
        };
    private readonly ApexChartOptions<BoxPlotData> _scoreBoxesOptions = new ApexChartOptions<BoxPlotData>()
        {
            Stroke = new Stroke { Curve = Curve.Smooth },
            Yaxis = new[]{new YAxis()
            {
                Max=1000000
            }}.ToList(),

        };

    [Parameter]
    public Guid? RequestedUserId { get; set; }

    private bool _showShareDialog = false;

    private async Task SetLevels(DifficultyLevel min, DifficultyLevel max)
    {
        _minLevel = min;
        _maxLevel = max;
        await Filter();
    }
    private async Task SetSelectedChartType(ChartType? chartType)
    {
        _selectedChartType = chartType;
        await Filter();
    }
    private ChartType? _selectedChartType = null;
    private async Task CopyShareLink()
    {
        await Javascript.InvokeVoidAsync("navigator.clipboard.writeText", ShareUrl);
        Snackbar.Add("Copied to clipboard!", Severity.Success);
    }

    private string ShareUrl => CurrentUser.IsLoggedIn ? $"{NavManager.BaseUri}{CurrentUser.User.Id}/Phoenix/Progress" : string.Empty;

    private IEnumerable<RecordedPhoenixScore> _filteredScores = Array.Empty<RecordedPhoenixScore>();
    private IEnumerable<RecordedPhoenixScore> _scores = Array.Empty<RecordedPhoenixScore>();
    private IDictionary<Guid, Chart> _charts = new Dictionary<Guid, Chart>();
    private DifficultyLevel _minLevel = DifficultyLevel.Min;
    private DifficultyLevel _maxLevel = DifficultyLevel.Max;

    private async Task Filter()
    {
        var results = _scores;
        if (_selectedChartType != null)
        {
            results = results.Where(c => _charts[c.ChartId].Type == _selectedChartType);
        }
        results = results.Where(c => _charts[c.ChartId].Level >= _minLevel);
        results = results.Where(c => _charts[c.ChartId].Level <= _maxLevel);
        _filteredScores = results.ToArray();
        StateHasChanged();
        if (_scoreDistLines != null && _tabs.ActivePanel.Text == "Score Distribution Lines")
        {
            await _scoreDistLines.UpdateSeriesAsync(true);
            await _scoreDistLines.UpdateOptionsAsync(true, true, true);
        }
        if (_sdChart != null && _tabs.ActivePanel.Text == "Singles vs Doubles")
        {

            await _sdChart.UpdateSeriesAsync(true);
            await _sdChart.UpdateOptionsAsync(true, true, true);

        }
        StateHasChanged();

    }
    private IEnumerable<DifficultyEntry> _difficultyEntries = Array.Empty<DifficultyEntry>();
    protected override async Task OnInitializedAsync()
    {
        if (RequestedUserId == null)
        {
            if (!CurrentUser.IsLoggedIn)
            {
                NavManager.NavigateTo("/Charts");
                return;
            }
            RequestedUserId = CurrentUser.User.Id;
        }
        if (await UiSettings.GetSelectedMix() == MixEnum.XX)
        {
            NavManager.NavigateTo("/Progress");
        }
        _scores = await Mediator.Send(new GetPhoenixRecordsQuery(RequestedUserId.Value));
        var chartScores = _scores.ToDictionary(s => s.ChartId);
        var charts = await Mediator.Send(new GetChartsQuery(MixEnum.Phoenix));
        var coOpCharts = charts.Where(c => c.Type == ChartType.CoOp).ToArray();
        var levelCharts = charts.Where(c => c.Type != ChartType.CoOp).GroupBy(c => c.Level).ToDictionary(g => g.Key, g => g.ToArray());

        _charts = charts.ToDictionary(c => c.Id);
        var entries = new List<DifficultyEntry>();
        foreach(var level in DifficultyLevel.All)
        {
            var passed = levelCharts[level].Where(c=>!(chartScores.TryGetValue(c.Id,out var score)?score!.IsBroken:true)).Count();
            var remaining = levelCharts[level].Where(c => (chartScores.TryGetValue(c.Id, out var score) ? score!.IsBroken : true)).Count();
            var totalRating = levelCharts[level].Sum(c => chartScores.TryGetValue(c.Id, out var score) ? (score!.Score?.LetterGrade.GetModifier() ?? 0) * level.BaseRating : 0);
            var ratingRemainnig = levelCharts[level].Count() * (PhoenixLetterGrade.SSSPlus.GetModifier() * level.BaseRating) - totalRating;
            var scores = levelCharts[level].Where(c => chartScores.TryGetValue(c.Id, out var score) && score.Score != null).Select(c => (int)chartScores[c.Id].Score!)
            .ToArray();
            var minScore = scores.Any() ? (int?) scores.Min() : null;
            var maxScore = scores.Any() ? (int?)scores.Max():null;
            var avgScore = scores.Any() ? (int?)scores.Average() : null;
            var plates = levelCharts[level].Where(c => chartScores.TryGetValue(c.Id, out var score) && score.Plate != null).Select(c => (int)chartScores[c.Id].Plate!)
            .ToArray();
            var avgPlate = plates.Any()? plates.Average(p => (int)p):0;
            var plate1 = plates.Any()? (PhoenixPlate?)Math.Floor(avgPlate):null;
            var plate2 = plates.Any()?(PhoenixPlate?)Math.Ceiling(avgPlate):null;
            entries.Add(new DifficultyEntry(level.ToString(), passed, remaining, (int)totalRating, (int)ratingRemainnig, minScore, avgScore, maxScore, plate1, plate2));
        }
        _difficultyEntries = entries;
        await Filter();
    }

    private sealed record BoxPlotData(int Label, int Min, int Max, int Median, int Q1, int Q3, int Average)
    {

        public static IEnumerable<BoxPlotData> From(RecordedPhoenixScore[] scores, Func<RecordedPhoenixScore, int> getLabel) =>
            scores.Any(s => s.Score != null) ? scores.Where(s => s.Score != null).GroupBy(getLabel).Select(group =>
            {
                var sorted = group.Select(s=>(int)s.Score).OrderBy(v => v).ToArray();
                var median = sorted[sorted.Length / 2];
                var q1 = sorted[sorted.Length / 4];
                var q3 = sorted[3 * sorted.Length / 4];
                var average = (int)sorted.Average();
                return new BoxPlotData(group.Key, sorted[0], sorted[^1], median, q1, q3,average);
            }):
                Array.Empty<BoxPlotData>();
    }
    private sealed record DifficultyEntry(string Level, int Passed, int Remaining, int TotalRating, int RatingRemaining, PhoenixScore? MinScore, PhoenixScore? AverageScore, PhoenixScore? MaxScore, PhoenixPlate? AvgPlate1, PhoenixPlate? AvgPlate2)
    {
        
    }
}
