@page "/Titles"
@using MediatR
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.Models
@using ScoreTracker.Domain.Models.Titles.Phoenix
@using ScoreTracker.Domain.Records
@using ScoreTracker.Domain.SecondaryPorts
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Web.Components
@using ScoreTracker.Web.Dtos
@using ScoreTracker.Web.Services.Contracts
<PageTitle>Titles</PageTitle>

<MudDataGrid @ref="_dataGrid" T="TitleProgressDto" Items="_titleProgress" Hover="true" ReadOnly="true"
             Groupable="true" FixedHeader="true" Height="500" Loading="@_isLoading">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Titles</MudText>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="t=>t.TitleCategory" Title="Category" Grouping="true"></PropertyColumn>
        <PropertyColumn Property="t=>t.TitleName" Title="Title" Groupable="false"></PropertyColumn>
        <PropertyColumn Property="t=>t.TitleDescription" Title="Description" Groupable="false"></PropertyColumn>
        <TemplateColumn Title="Community Completion" Groupable="false" T="TitleProgressDto">
            <CellTemplate>
                @if (_titleCounts.TryGetValue(context.Item.TitleName, out var count))
                {
                    <MudTooltip Text=@($"{count}/{_userCount} Players")>
                        <MudButton StartIcon="@Icons.Material.Filled.Visibility" Color="Color.Primary" Variant="Variant.Outlined" OnClick="()=>ShowTitledUsers(context.Item.TitleName)">
                            @($"{(100.0 * count / (double)_userCount):N2}%")
                        </MudButton>
                    </MudTooltip>
                }
                else
                {

                    <MudText>0%</MudText>
                }
            </CellTemplate>
        </TemplateColumn>
        @if (CurrentUser.IsLoggedIn)
        {
            <TemplateColumn T="TitleProgressDto" Field="IsTrackable" Title="Completion" Groupable="false">
                <CellTemplate>
                    @if (context.Item.IsTrackable)
                    {
                        <MudProgressLinear Color="@(context.Item.CompletionCount >= context.Item.RequiredCount ? Color.Success : Color.Primary)"  Min="@(context.Item.TitleCategory=="Skill"?PhoenixLetterGrade.AA.GetMinimumScore():0)" Max="context.Item.RequiredCount" Value="context.Item.CompletionCount">
                            @if (context.Item.CompletionCount < context.Item.RequiredCount)
                            {
                                @if (context.Item.TitleCategory == "Skill")
                                {
                                    @if (context.Item.CompletionCount > 0)
                                    {
                                        <MudText Typo="Typo.subtitle1">
                                            @(PhoenixScore.From(context.Item.CompletionCount).LetterGrade.GetName())
                                        </MudText>
                                    }
                                }
                                else
                                {
                                    <MudText Typo="Typo.subtitle1">
                                        @context.Item.CompletionCount / @context.Item.RequiredCount
                                    </MudText>
                                }
                            }
                        </MudProgressLinear>
                        @if (context.Item.CompletionCount >= context.Item.RequiredCount && context.Item.HasParagonLevel)
                        {
                            @if (context.Item.ParagonLevel!=ParagonLevel.PG)
                            {
                                <br/>
                                <MudProgressLinear Color="Color.Primary" Min="0" Max="context.Item.NextParagonRequirement" Value="context.Item.NextParagonProgress">
                                    @context.Item.NextParagonProgress/@context.Item.NextParagonRequirement @(context.Item.ParagonLevel==ParagonLevel.None?L["Passes"]:(context.Item.ParagonLevel+1).GetName())
                                </MudProgressLinear>

                            } else if (context.Item.ParagonLevel == ParagonLevel.PG)
                            {
                                <br/>
                                <MudProgressLinear Color="Color.Success" Min="0" Max="1" Value="1">
                                    @context.Item.NextParagonRequirement/@context.Item.NextParagonRequirement PG
                                </MudProgressLinear>
                            }
                            <MudText>Paragon Level: @(context.Item.ParagonLevel.GetName())</MudText>
                        }
                    } else
                    {
                        <MudProgressLinear Min="0" Max="100" Value=@(context.Item.IsCompleted?100:0) Color=@(context.Item.IsCompleted?Color.Success:Color.Primary)></MudProgressLinear>
                    }

                </CellTemplate>
            </TemplateColumn>

            <TemplateColumn T="TitleProgressDto" Field="IsTrackable" Title="Breakdown" Groupable="false">
                <CellTemplate>
                    @if (!string.IsNullOrWhiteSpace(context.Item.AdditionalNote))
                    {
                        <br/>
                        <MudText>@context.Item.AdditionalNote</MudText>
                    }
                    @if (_currentMix == MixEnum.Phoenix && context.Item.CompletionCount < context.Item.RequiredCount && context.Item.DifficultyLevel != null)
                    {
                        <br/>
                        <MudText>@(_difficultyCounts[context.Item.DifficultyLevel.Value]-_completedCounts[context.Item.DifficultyLevel.Value]) Remaining Charts In Folder</MudText>
                    }
                </CellTemplate>
            </TemplateColumn>
        } else if (_titleProgress.Any(p => !string.IsNullOrWhiteSpace(p.AdditionalNote)))
        {
            <PropertyColumn Property="t=>t.AdditionalNote" Title="Notes" Groupable="false"></PropertyColumn>
        }
    </Columns>        
    <ChildRowContent>
        @if (_showingTitle == context.Item.TitleName && _showingTitle!=null)
        {
            <td colspan="@(CurrentUser.IsLoggedIn?6:5)">
                @if (_currentTitleUsers.Count() < _titleCounts[_showingTitle.Value])
                {
                    <MudText Typo="Typo.body1">Not Showing @(_titleCounts[_showingTitle.Value]-_currentTitleUsers.Count()) Private Players</MudText>
                    <br/><br/>
                }
                <MudGrid>
                    @foreach (var user in _currentTitleUsers.OrderByDescending(u => u.titleAchievedRecord.ParagonLevel).ThenBy(u=>u.user.Name))
                    {
                        <MudItem xs="12">
                        @if (user.titleAchievedRecord.ParagonLevel != ParagonLevel.None)
                        {
                            
                                <ParagonLevelImage Level="@user.titleAchievedRecord.ParagonLevel"></ParagonLevelImage>
                        }

                        <MudImage Src="@user.user.ProfileImage.ToString()" Height="25" ObjectFit="ObjectFit.ScaleDown"></MudImage>

                        <UserLabel User="user.user"></UserLabel>

                        </MudItem>
                    }
                </MudGrid>
            </td>
        }
    </ChildRowContent>
</MudDataGrid>
<br/>
@inject IMediator Mediator
@inject ICurrentUserAccessor CurrentUser;
@inject IUiSettingsAccessor UiSettings;
@inject IUserRepository Users;
@inject ITitleRepository TitleRepo;
@code {
    private MudDataGrid<TitleProgressDto>? _dataGrid;
    private IEnumerable<TitleProgressDto> _titleProgress = Array.Empty<TitleProgressDto>();
    private IDictionary<int, int> _difficultyCounts = new Dictionary<int, int>();
    private IDictionary<int, int> _completedCounts = new Dictionary<int, int>();
    private MixEnum _currentMix;
    private bool _isLoading = true;
    private int _userCount = 1;
    private IDictionary<Name, int> _titleCounts = new Dictionary<Name, int>();
    private IEnumerable<(User user, TitleAchievedRecord titleAchievedRecord)> _currentTitleUsers = Array.Empty<(User user, TitleAchievedRecord titleAchievedRecord)>();
    private Name? _showingTitle = null;
    private async Task ShowTitledUsers(Name title)
    {
        if (_showingTitle == title)
        {
            _showingTitle = null;
            return;
        }
        var titles = (await TitleRepo.GetUsersWithTitle(title, CancellationToken.None)).ToArray();
        var users = (await Users.GetUsers(titles.Select(t=>t.UserId), CancellationToken.None)).ToDictionary(u=>u.Id);
        _currentTitleUsers = titles.Where(t=>users[t.UserId].IsPublic)
            .Select(t=>(users[t.UserId],t)).ToArray();
        _showingTitle = title;
    }
    private async Task LoadTitles()
    {

        _isLoading = true;
        _titleProgress = (await Mediator.Send(new GetTitleProgressQuery(_currentMix))).Select(TitleProgressDto.From).ToArray();
        _isLoading = false;
        if (_currentMix == MixEnum.Phoenix)
        {
            
            var charts = (await Mediator.Send(new GetChartsQuery(_currentMix))).ToDictionary(c => c.Id);
            _difficultyCounts = charts.Values.GroupBy(c => (int)c.Level).ToDictionary(g => g.Key, g => g.Count());
            _completedCounts = CurrentUser.IsLoggedIn?(await Mediator.Send(new GetPhoenixRecordsQuery(CurrentUser.User.Id)))
                .Where(r => !r.IsBroken)
                .GroupBy(r => (int)charts[r.ChartId].Level)
                .ToDictionary(g => g.Key, g => g.Count()) : new Dictionary<int, int>();
            foreach (var key in _difficultyCounts.Keys.Where(k => !_completedCounts.ContainsKey(k)))
            {
                _completedCounts[key] = 0;
            }
        }
        if (_dataGrid != null)
        {

            _dataGrid.Items = _titleProgress;
            _dataGrid?.GroupItems();
        }
        _userCount = await TitleRepo.CountTitledUsers(CancellationToken.None);
        _titleCounts = (await TitleRepo.GetTitleAggregations(CancellationToken.None)).ToDictionary(t => t.Title, t => t.Count);
    }

    protected override async Task OnInitializedAsync()
    {
        _currentMix = await UiSettings.GetSelectedMix();
        await LoadTitles();
    }
}