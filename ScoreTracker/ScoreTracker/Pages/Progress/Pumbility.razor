@using MediatR
@using ScoreTracker.Application.Handlers
@using ScoreTracker.Application.Queries
@using ScoreTracker.Data.Migrations
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.SecondaryPorts
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Domain.Models
@using ScoreTracker.Domain.Records
@using ScoreTracker.PersonalProgress.Queries
@using ScoreTracker.Web.Components
@using ScoreTracker.Web.Services
@using ScoreTracker.Web.Services.Contracts
@using ChartType = ScoreTracker.Domain.Enums.ChartType
@page "/Pumbility"

<MudText Typo="Typo.h6">PUMBILITY</MudText>

<MudGrid>

    @foreach (var group in _tierList.OrderBy(kv => GetTierListOrder(kv.Key)))
    {
        <MudItem xs="12">
            <MudText Typo="Typo.h6">@GetTierListName(group.Key)</MudText>
        </MudItem>


        foreach (var chart in group.Value.Select(c => _charts[c]))
        {

            <MudItem xs="6" sm="3" md="2">

                <MudCard Class="chart-card">
                    <MudCardHeader Style=@($"background-image:url(\"{chart.Song.ImagePath}\");")>

                        <DifficultyBubble Chart="chart"></DifficultyBubble>
                    </MudCardHeader>
                    <MudCardContent>
                        <ScoreBreakdown Score="_scores[chart.Id].Score!.Value" IsBroken="_scores[chart.Id].IsBroken" Plate="_scores[chart.Id].Plate" Text=@(_ratings[chart.Id].ToString("N0")+" - "+(DateTimeOffset.Now-_scores[chart.Id].RecordedDate).TotalDays.ToString("N0")+" "+@L["Days Old"])></ScoreBreakdown>
                    </MudCardContent>
                    <MudCardActions>
                        <MudSpacer></MudSpacer>
                        <MudIconButton Icon="@Icons.Custom.Brands.YouTube" OnClick="@(() => VideoDisplayer.ShowVideo(chart.Id))"></MudIconButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        
        }
    }
    <MudItem xs="12">
        <MudText Typo="Typo.h6">PUMBILITY Gain Calculator</MudText>
    </MudItem>
    <MudItem xs="4" sm="3">
        <MudNumericField T="int" Min="1" Max="28" Value="_newPassLevel" ValueChanged="s=>CalculateNewScore(s,_newPassLetterGrade,_oldPassLetterGrade)" Label=@L["Difficulty Level"]></MudNumericField>
    </MudItem>
    <MudItem xs="4" sm="3">
        <MudSelect T="PhoenixLetterGrade?" Clearable="true" Label=@L["Old Letter Grade"] Value="_oldPassLetterGrade" ValueChanged="s => CalculateNewScore(_newPassLevel,_newPassLetterGrade, s)">
            @foreach (var letterGrade in Enum.GetValues<PhoenixLetterGrade>())
            {
                <MudSelectItem T="PhoenixLetterGrade?" Value="letterGrade">
                    <LetterGradeIcon Grade="letterGrade"></LetterGradeIcon>
                </MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="4" sm="3">
        <MudSelect T="PhoenixLetterGrade" Label=@L["New Letter Grade"] Value="_newPassLetterGrade" ValueChanged="s => CalculateNewScore(_newPassLevel, s,_oldPassLetterGrade)">
            @foreach (var letterGrade in Enum.GetValues<PhoenixLetterGrade>())
            {
                <MudSelectItem T="PhoenixLetterGrade" Value="letterGrade">
                    <LetterGradeIcon Grade="letterGrade"></LetterGradeIcon>
                </MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="12" sm="3">+@_projectedNewPassRating PUMBILITY</MudItem>
    <MudItem xs="12">
        <MudText Typo="Typo.h6">Projected PUMBILITY Gains (BETA):</MudText>
        <MudText Typo="Typo.subtitle1">Requires 20% of folder cleared for score projections.</MudText>
    </MudItem>
    @if (!_projectedGains.Any() && !_finishedProjecting)
    {
        <MudItem xs="12">
            <MudProgressLinear Indeterminate="true" Color="Color.Primary">Computing</MudProgressLinear>
        </MudItem>
        <br/>
        <br/>
    }
    @if (_finishedProjecting && !_projectedGains.Any())
    {
        <MudItem xs="12">
            <MudText>You are seeing this because you are just too good for your level range. All of your scores are projected to be your best potential PUMBILITY.</MudText>
        </MudItem>
    }
    @foreach (var kv in _insufficientData.OrderBy(kv=>kv.Key.Item2).ThenBy(kv=>kv.Key.Item1))
    {
        <MudItem xs="12">
            <MudImage tabindex="0" Src=@($"https://piuimages.arroweclip.se/difficulty/Phoenix/{kv.Key.Item1.GetShortHand().ToLower()}{kv.Key.Item2}.png") Height="20" ObjectFit="ObjectFit.ScaleDown"></MudImage>
            <LetterGradeIcon Grade="PhoenixLetterGrade.AA"></LetterGradeIcon>
            <MudIcon Icon="@Icons.Material.Filled.ArrowRightAlt"></MudIcon>
            +@kv.Value.ToString("N0") PUMBILITY
        </MudItem>
    }
    @foreach (var gain in _projectedGains.OrderByDescending(kv=>_allScores.TryGetValue(kv.Key,out var existing)&&existing is { Score: not null,IsBroken: false }).ThenByDescending(kv => kv.Value).ThenBy(kv=>_chartDifficulty.TryGetValue(kv.Key,out var diff)?diff:TierListCategory.Unrecorded))
    {
        var chart = _charts[gain.Key];
        <MudItem xs="6" sm="3" md="2">

            <MudCard Class="chart-card">
                <MudCardHeader Style=@($"background-image:url(\"{chart.Song.ImagePath}\");")>

                    <DifficultyBubble Chart="chart"></DifficultyBubble>
                </MudCardHeader>
                <MudCardContent>
                    @if (_allScores.TryGetValue(chart.Id, out var record) &&record.Score != null)
                    {
                        <MudText>
                            @((DateTimeOffset.Now - record.RecordedDate).TotalDays.ToString("N0") + " " + @L["Days Old"])
                        </MudText>
                        <MudTooltip Text="@record.Score!.Value.ToString()">
                            <LetterGradeIcon Grade="record.Score!.Value.LetterGrade" IsBroken="record.IsBroken"></LetterGradeIcon>
                        </MudTooltip>
                        <MudIcon Icon="@Icons.Material.Filled.ArrowRightAlt"></MudIcon>
                        
                    }
                    <MudTooltip Text="@_expectedScore[chart.Id].ToString()">
                        <LetterGradeIcon Grade="_expectedScore[chart.Id].LetterGrade"></LetterGradeIcon>
                    </MudTooltip>
                    @if (_chartDifficulty.TryGetValue(chart.Id, out var difficulty)&&(!_allScores.TryGetValue(chart.Id, out var record2) || record2.IsBroken || record2.Score == null))
                    {
                        <MudText Style=@($"color:{TierListColor(difficulty)}")>@difficulty</MudText>
                    }
                    <MudText>+@_projectedGains[chart.Id].ToString("N0") PUMBILITY</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudSpacer></MudSpacer>
                    <MudIconButton Icon="@Icons.Custom.Brands.YouTube" OnClick="@(() => VideoDisplayer.ShowVideo(chart.Id))"></MudIconButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    }
</MudGrid>


@inject IMediator Mediator
@inject NavigationManager NavManager
@inject ICurrentUserAccessor CurrentUser;
@inject ChartVideoDisplayer VideoDisplayer;
@inject IPlayerStatsRepository PlayerStats;
@inject IPhoenixRecordRepository PhoenixRecords;
@code {

    private IDictionary<Guid, Chart> _charts = new Dictionary<Guid, Chart>();
    private IDictionary<Guid, RecordedPhoenixScore> _scores = new Dictionary<Guid, RecordedPhoenixScore>();
    private IDictionary<Guid, int> _ratings = new Dictionary<Guid, int>();
    private IDictionary<TierListCategory, IEnumerable<Guid>> _tierList = new Dictionary<TierListCategory, IEnumerable<Guid>>();
    private IDictionary<Guid, TierListCategory> _chartDifficulty = new Dictionary<Guid, TierListCategory>();

    private string TierListColor(TierListCategory category) => category switch{
        TierListCategory.Overrated=>Colors.Cyan.Darken1,
        TierListCategory.VeryEasy=>Colors.Green.Darken1,
        TierListCategory.Easy=>Colors.LightGreen.Darken1,
        TierListCategory.Medium=>Colors.Yellow.Darken1,
        TierListCategory.Hard=>Colors.Orange.Darken1,
        TierListCategory.VeryHard=>Colors.Red.Darken1,
        TierListCategory.Underrated=>Colors.Purple.Darken1,
        TierListCategory.Unrecorded=>Colors.Gray.Darken1,
    };
    private int GetTierListOrder(TierListCategory category) => category switch{
        TierListCategory.Overrated => 1,
        TierListCategory.VeryEasy => 2,
        TierListCategory.Easy => 3,
        TierListCategory.Medium => 4,
        TierListCategory.Hard => 5,
        TierListCategory.VeryHard => 6,
        TierListCategory.Underrated => 7,
        TierListCategory.Unrecorded => 8
    };
    private string GetTierListName(TierListCategory category) => category switch {
        TierListCategory.Overrated=>"Extremely High Rating",
        TierListCategory.VeryEasy=>"Very High Rating",
        TierListCategory.Easy=>"High Rating",
        TierListCategory.Medium=>"Standard Rating",
        TierListCategory.Hard=>"Low Rating",
        TierListCategory.VeryHard=>"Very Low Rating",
        TierListCategory.Underrated=>"Extremely Low Rating",
        TierListCategory.Unrecorded => "Runners Up (51-100)",_ => throw new ArgumentOutOfRangeException(nameof(category), category, null)};

    private IDictionary<Guid, PhoenixScore> _expectedScore = new Dictionary<Guid, PhoenixScore>();
    private IDictionary<Guid, int> _projectedGains = new Dictionary<Guid, int>();
    private IDictionary<(ChartType,DifficultyLevel), int> _insufficientData = new Dictionary<(ChartType, DifficultyLevel), int>();
    private DifficultyLevel _newPassLevel = 18;
    private PhoenixLetterGrade _newPassLetterGrade = PhoenixLetterGrade.AA;
    private PhoenixLetterGrade? _oldPassLetterGrade = null;
    private int _projectedNewPassRating = 0;
    private void CalculateNewScore(DifficultyLevel newLevel, PhoenixLetterGrade newLetterGrade, PhoenixLetterGrade? oldLetter)
    {
        _newPassLevel = newLevel;
        _newPassLetterGrade = newLetterGrade;
        _oldPassLetterGrade = oldLetter;
        var lowestScore = _ratings.OrderByDescending(kv => kv.Value).Take(50).Last().Value;
        var oldRating = lowestScore;
        if (_oldPassLetterGrade != null)
        {
            oldRating = ScoringConfiguration.PumbilityScoring(false).GetScore(_newPassLevel, _oldPassLetterGrade.Value.GetMinimumScore());
            if (oldRating < lowestScore)
            {
                oldRating = lowestScore;
            }
        }
        var rating = ScoringConfiguration.PumbilityScoring(false).GetScore(_newPassLevel, newLetterGrade.GetMinimumScore());
        _projectedNewPassRating = rating - oldRating;
        if (_projectedNewPassRating <= 0)
        {
            _projectedNewPassRating = 0;
        }
    }
    private bool _finishedProjecting = false;
    private async Task ProjectScores()
    {
        _expectedScore = new Dictionary<Guid, PhoenixScore>();
        var levelRange = _tierList.Where(kv => kv.Key != TierListCategory.Unrecorded).SelectMany(t => t.Value).Select(t => _charts[t].Level)
            .Distinct().ToArray();
        var lowestLevel = levelRange.Min();
        var highestLevel = levelRange.Max();

        var stats = await PlayerStats.GetStats(CurrentUser.User.Id, CancellationToken.None);

        var singlesLevel = stats.SinglesCompetitiveLevel <= 10 ? 10.0 : stats.SinglesCompetitiveLevel;
        var doublesLevel = stats.DoublesCompetitiveLevel <= 10 ? 10.0 : stats.DoublesCompetitiveLevel;

        var lowestScore = _ratings.OrderByDescending(kv => kv.Value).Take(50).Min(kv => kv.Value);
        var singlesPlayers = (await PlayerStats.GetPlayersByCompetitiveRange(ChartType.Single, singlesLevel, 1, CancellationToken.None)).ToArray();
        var doublesPlayers = (await PlayerStats.GetPlayersByCompetitiveRange(ChartType.Double, doublesLevel, 1, CancellationToken.None)).ToArray();
        var scoring = ScoringConfiguration.PumbilityScoring(false);

        _chartDifficulty = (await Mediator.Send(new GetTierListQuery("Pass Count"))).ToDictionary(s => s.ChartId, e => e.Category);
        foreach (var chartType in new[] { ChartType.Single, ChartType.Double })
        {
            var playerScores = (await PhoenixRecords.GetRecordedScores(chartType == ChartType.Single ? singlesPlayers : doublesPlayers, chartType, lowestLevel, highestLevel, CancellationToken.None))
                .Where(s => s is { IsBroken: false,Score: not null })
                .GroupBy(r => _charts[r.ChartId].Level)
                .ToDictionary(g => g.Key, g => g.ToArray());


            foreach (var levelGroup in playerScores)
            {
                var chartGroup = levelGroup.Value.GroupBy(s => s.ChartId).ToDictionary(g => g.Key, g => g.Select(c=>c.Score!.Value).OrderByDescending(c => c).ToArray());

                var percentile =
                    chartGroup.Any(c => _allScores.TryGetValue(c.Key, out var score) && score is { IsBroken: false, Score: not null })?

                    chartGroup.Where(c => _allScores.TryGetValue(c.Key, out var score) && score is { IsBroken: false, Score: not null })
                    .Average(c => Array.IndexOf(c.Value, _allScores[c.Key].Score!.Value)/(double)c.Value.Count())*.95:.5;


                var chartAverages = chartGroup
                    .Where(kv=>kv.Value.Count()>3)
                    .ToDictionary(g=>g.Key,g=>g.Value.Average(c=>(int)c));


                var myScores = _allScores.Where(kv => kv.Value.Score != null && chartAverages.ContainsKey(kv.Key)).ToDictionary(kv => kv.Key, kv => kv.Value.Score!.Value);

                if (myScores.Count()<(int)Math.Floor(.2*chartAverages.Count()))
                {
                    var diff = scoring.GetScore(chartType, levelGroup.Key, PhoenixLetterGrade.AA.GetMinimumScore()) - lowestScore;
                    if (myScores.Any() && diff>0)
                    {
                        _insufficientData[(chartType,levelGroup.Key)] = diff;
                    }
                    continue;
                }

                foreach (var chartAverage in chartAverages)
                {
                    var target = percentile * chartGroup[chartAverage.Key].Count();
                    var highIndex = Math.Floor(target);
                    var lowIndex = Math.Ceiling(target);
                    if (lowIndex > chartGroup[chartAverage.Key].Count()-1)
                    {

                        lowIndex = chartGroup[chartAverage.Key].Count()-1;
                    }
                    if (highIndex < 0)
                    {
                        highIndex = 0;
                    }
                    var highScore = chartGroup[chartAverage.Key][(int)highIndex];
                    var lowScore = chartGroup[chartAverage.Key][(int)lowIndex];

                    var estimated = lowScore+(highScore-lowScore)*(lowIndex-target);
                    _expectedScore[chartAverage.Key] = (int)estimated;

                }



            }
        }

        foreach (var kv in _expectedScore)
        {
            var expectedPumbility = scoring.GetScore(_charts[kv.Key], kv.Value, PhoenixPlate.ExtremeGame, false);
            var expectedGains = expectedPumbility - lowestScore;
            if (expectedGains <= 0)
            {
                continue;
            }
            if (_ratings.TryGetValue(kv.Key, out var rating))
            {
                expectedGains = expectedPumbility - rating;
                if (expectedGains <= 0)
                {
                    continue;
                }
            }
            _projectedGains[kv.Key] = expectedGains;
        }
        _finishedProjecting = true;
    }

    private IDictionary<Guid, RecordedPhoenixScore> _allScores = new Dictionary<Guid, RecordedPhoenixScore>();
    protected override async Task OnInitializedAsync()
    {
        if (!CurrentUser.IsLoggedIn)
        {
            NavManager.NavigateTo("/");
            return;
        }
        var scoring = ScoringConfiguration.PumbilityScoring(false);
        _charts = (await Mediator.Send(new GetChartsQuery(MixEnum.Phoenix))).ToDictionary(c => c.Id);
        _allScores = (await Mediator.Send(new GetPhoenixRecordsQuery(CurrentUser.User.Id))).Where(r=>r.Score!=null).ToDictionary(s => s.ChartId);
        _scores = (await Mediator.Send(new GetTop50ForPlayerQuery(CurrentUser.User.Id, null, 100))).ToDictionary(s => s.ChartId);
        _ratings = _scores.ToDictionary(kv => kv.Key, kv => scoring.GetScore(_charts[kv.Key], kv.Value.Score!.Value, kv.Value.Plate ?? PhoenixPlate.RoughGame, kv.Value.IsBroken));
        var top50 = _scores.Values.OrderByDescending(s => _ratings[s.ChartId]).Take(50);

        _tierList = TierListSaga.ProcessIntoTierList("PUMBILITY", top50.ToDictionary(s => s.ChartId, s => _ratings[s.ChartId])).GroupBy(t => t.Category)

            .ToDictionary(g => g.Key, g => g.OrderByDescending(e => e.Order).Select(e => e.ChartId).ToArray().AsEnumerable());


        await ProjectScores();
        
    }

}
