@page "/UploadScores"
@using ScoreTracker.Domain.SecondaryPorts
@using ScoreTracker.Domain.Models
@using MediatR
@using ScoreTracker.Application.Commands
@using ScoreTracker.Domain.ValueTypes
@using CsvHelper
@using System.Globalization
@using ScoreTracker.Domain.Exceptions
@using ScoreTracker.Web.Dtos

<PageTitle>Upload Scores</PageTitle>

<MudCard >
    <MudCardHeader>Upload Scores</MudCardHeader>
    <MudCardContent>
        @switch (_currentStep)
        {
            case Step.Information:
                <p>
                    Some players already maintain scores via Spreadsheets.
                    <br/><br/>
                    In some of those cases, it may be faster to upload a Spreadsheet instead of manually inputting thousands of grades.
                    <br/><br/>
                    After the upload, if there are some rows/charts/attempts that did not upload correctly, you will be given the option to download a list of the failed rows and the reason they failed.
                </p>
                break;
            case Step.Uploading:
                <p>
                    If you leave this page, the upload will stop but you will not lose any scores that have already been recorded from your upload.
                </p>
                <br/>
                <span>@_currentUpload/@_maxUpload Uploaded. @_remainingTime.ToString(@"m\:ss") Remaining. @_failedUploads.Count Failed to record</span>
                <MudProgressLinear Color="@Color.Primary" Size="@Size.Large" Value="@_currentUpload" Min="1" Max="@_maxUpload"/>
                break;
            case Step.Finished when _failedUploads.Any():
                <p>
                    You had a few charts that were not able to be downloaded. You can download a CSV of the failures to make adjustments and try again.
                </p>
                break;
            case Step.Finished when !_failedUploads.Any():
                <p>
                    All charts you uploaded were successfully updated!
                </p>
                break;
            default:
                <p>
                    You somehow ended up in a state between realities. Refresh the page to try again.
                </p>
                break;
        }
    </MudCardContent>
    <MudCardActions>
        @switch (_currentStep)
        {
            case Step.Information:
                <MudButton HtmlTag="label"
                           Variant="@Variant.Filled"
                           Color="@Color.Primary"
                           StartIcon="@Icons.Filled.UploadFile"
                           for="uploadInput">
                    Upload Charts
                </MudButton>
                break;
            case Step.Uploading:
                <MudButton Variant="@Variant.Outlined"
                           Color="@Color.Primary"
                           StartIcon="@Icons.Filled.Cancel"
                           OnClick="@(_ => _currentStep = Step.Information)">Cancel</MudButton>
                break;
            case Step.Finished when _failedUploads.Any():
                <MudButton OnClick="@DownloadFailures"
                           Variant="@Variant.Filled"
                           Color="@Color.Primary"
                           StartIcon="@Icons.Filled.Download">Download @_failedUploads.Count Upload Fails</MudButton>
                break;
            default:
                break;
        }
    </MudCardActions>
</MudCard>
<InputFile id="uploadInput" OnChange="@UploadFile" hidden accept=".csv"/>

@inject NavigationManager NavManager
@inject ICurrentUserAccessor CurrentUser;
@inject IMediator Mediator;
@inject ISnackbar Snackbar;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;
@code
{
    private enum Step
    {
        Information,
        Uploading,
        Finished
    }
    private Step _currentStep = Step.Information;
    private int _maxUpload = 0;
    private int _currentUpload = 0;
    private TimeSpan _remainingTime = TimeSpan.MinValue;
    private List<SpreadsheetScoreErrorDto> _failedUploads = new List<SpreadsheetScoreErrorDto>();

    protected override Task OnInitializedAsync()
    {
        if (CurrentUser.IsLoggedIn) return Task.CompletedTask;

        NavManager.NavigateTo("/Login");
        return Task.CompletedTask;
    }

    private async Task DownloadFailures()
    {
        
        var stream = new MemoryStream();
        await using var writer = new StreamWriter(stream);
        await using var csv = new CsvWriter(writer, CultureInfo.InvariantCulture);
        await csv.WriteRecordsAsync(_failedUploads);
        await writer.FlushAsync();
        await csv.FlushAsync();
        const string fileName = "failedUploads.csv";

        using var streamRef = new DotNetStreamReference(stream: stream);

        var module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/helpers.js");
        await module.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);

    }
    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file.Size > 500000)
        {
            Snackbar.Add("File cannot be larger than .5 MB", Severity.Error);
            return;
        }
        _currentStep = Step.Uploading;
        await using var readStream = file.OpenReadStream(500000);
        using var reader = new StreamReader(readStream);
        using var csv = new CsvReader(reader,CultureInfo.InvariantCulture);
        var result = new List<BestChartAttempt>();
        _failedUploads = new List<SpreadsheetScoreErrorDto>();
        await csv.ReadAsync();
        csv.ReadHeader();

        if (!csv.TryGetField<string>(nameof(SpreadsheetScoreDto.Song), out var _))
        {
            Snackbar.Add("Spreadsheet is missing Song column",Severity.Error);
            return;
        }
        if (!csv.TryGetField<string>(nameof(SpreadsheetScoreDto.Difficulty), out _))
        {
            Snackbar.Add("Spreadsheet is missing Difficulty column",Severity.Error);
            return;
        }
        if (!csv.TryGetField<string>(nameof(SpreadsheetScoreDto.LetterGrade), out _))
        {
            Snackbar.Add("Spreadsheet is missing LetterGrade column", Severity.Error);
            return;
        }

        await foreach (var record in csv.GetRecordsAsync<SpreadsheetScoreDto>())
        {
            if (_currentStep != Step.Uploading)
            {
                return;
            }
            try
            {
                result.Add(record.ToBestAttempt());
            }
            catch (Exception ex)
            {
                _failedUploads.Add(record.ToError("Could not parse row"));
            }
        }
        _maxUpload = result.Count;
        _currentUpload = 0;
        var startTime = DateTimeOffset.Now;
        foreach (var best in result)
        {

            if (_currentStep != Step.Uploading)
            {
                return;
            }

            StateHasChanged();
            _currentUpload++;
            _remainingTime = (DateTimeOffset.Now - startTime) * (((double)_maxUpload - (double)_currentUpload) / (double)_currentUpload);
            try
            {
                await Mediator.Send(new UpdateBestAttemptCommand(best.Chart.Song.Name, best.Chart.Type, best.Chart.Level, best.BestAttempt?.LetterGrade, best.BestAttempt?.IsBroken ?? true));
            }
            catch (ChartNotFoundException)
            {
                _failedUploads.Add(new SpreadsheetScoreErrorDto
                {
                    Difficulty = best.Chart.DifficultyString,
                    LetterGrade = best.BestAttempt?.LetterGrade.ToString() ?? "",
                    Song = best.Chart.Song.Name,
                    Error = "Could not find chart"
                });
            }
            catch (Exception)
            {
                
                _failedUploads.Add(new SpreadsheetScoreErrorDto
                {
                    Difficulty = best.Chart.DifficultyString,
                    LetterGrade = best.BestAttempt?.LetterGrade.ToString() ?? "",
                    Song = best.Chart.Song.Name,
                    Error = "An unknown error occured"
                });
            }
        }
        _currentStep = Step.Finished;

    }
}
