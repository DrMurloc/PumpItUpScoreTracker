@page "/UploadScores"
@using ScoreTracker.Domain.SecondaryPorts
@using ScoreTracker.Domain.Models
@using MediatR
@using ScoreTracker.Application.Commands
@using ScoreTracker.Domain.ValueTypes
@using CsvHelper
@using System.Globalization
@using ScoreTracker.Domain.Exceptions
@using ScoreTracker.Web.Dtos
@using ScoreTracker.Web.Services

<PageTitle>Upload Scores</PageTitle>

<MudCard >
    <MudCardHeader><h2>Upload Scores</h2></MudCardHeader>
    <MudCardContent>
        @switch (_currentStep)
        {
            case Step.Information:
                <p>
                    Some players already maintain scores via Spreadsheets.
                    <br/><br/>
                    In some of those cases, it may be faster to upload a Spreadsheet instead of manually inputting thousands of grades.
                    <br/><br/>
                    After the upload, if there are some rows/charts/attempts that did not upload correctly, you will be given the option to download a list of the failed rows and the reason they failed.
                </p>
                break;
            case Step.Uploading:
                <p>
                    Spreadsheet is uploading and being processed...
                </p>
                <MudProgressLinear Indeterminate="true" Color="@Color.Primary" Size="@Size.Large"></MudProgressLinear>
                break;
            case Step.Confirming:
                @if (_isScoreTableShowing)
                {
                    <MudDataGrid T="BestAttemptDto" Items="_attemptDtos" ReadOnly="true"
                                 Groupable="true" Height="400px" FixedHeader="true" EditMode="@DataGridEditMode.Cell" Breakpoint="Breakpoint.None">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6">Parsed Scores</MudText>
                        </ToolBarContent>
                        <Columns>
                            <Column T="BestAttemptDto" Field="SongName" Title="Song" IsEditable="false">
                            </Column>
                            <Column T="BestAttemptDto" Field="ChartType" Title="Type" IsEditable="false">
                            </Column>
                            <Column T="BestAttemptDto" Field="Level" Title="Level" IsEditable="false">
                            </Column>
                            <Column T="BestAttemptDto" Field="LetterGrade" Title="LetterGrade" IsEditable="false"></Column>
                            <Column T="BestAttemptDto" Field="IsBroken" Title="IsBroken" IsEditable="false"></Column>
                        </Columns>
                    </MudDataGrid>
                }
                else
                {
                    <p>
                        <b>File type:</b> @_fileType was detected.
                        <br/>
                        <b>Scores parsed:</b> @_spreadSheetScores.Count
                        <br/>
                        <b>Parse Failures:</b> @_failedUploads.Count
                        <br/><br/>
                        Continuing will begin to save the uploaded scores over your existing records. You will not be able to undo this. You will be able to stop the saving process, but it will not roll back uploads.
                    </p>
                }
                break;
            case Step.Saving:
                <p>
                    If you leave this page or cancel, the upload will stop but you will not lose any scores that have already been recorded from your upload.
                </p>
                <br/>
                <span>@_currentSaved/@_maxSaving Uploaded. @_remainingTime.ToString(@"m\:ss") Remaining. @_failedUploads.Count Failed to record</span>
                <MudProgressLinear Color="@Color.Primary" Size="@Size.Large" Value="@_currentSaved" Min="1" Max="@_maxSaving"/>
                break;
            case Step.Finished when _failedUploads.Any():
                <p>
                    You had a few charts that were not able to be downloaded. You can download a CSV of the failures to make adjustments and try again.
                </p>
                break;
            case Step.Finished when !_failedUploads.Any():
                <p>
                    All charts you uploaded were successfully updated!
                </p>
                break;
            default:
                <p>
                    You somehow ended up in a state between realities. Refresh the page to try again.
                </p>
                break;
        }
    </MudCardContent>
    <MudCardActions>
        <MudSpacer></MudSpacer>
        @if (_currentStep is Step.Uploading or Step.Confirming or Step.Saving)
        {
            <MudButton Variant="@Variant.Text"
                       Color="@Color.Primary"
                       StartIcon="@Icons.Filled.Cancel"
                       OnClick="@Cancel">Cancel</MudButton>
        }
        @if (_currentStep == Step.Information)
        {
            <MudButton Variant="@Variant.Text"
                       Color="@Color.Primary"
                       StartIcon="@Icons.Filled.Info"
                       OnClick="()=>_isExampleDialogShowing=true">Supported Formats</MudButton>

            <MudButton HtmlTag="label"
                       Variant="@Variant.Filled"
                       Color="@Color.Primary"
                       StartIcon="@Icons.Filled.UploadFile"
                       for="uploadInput">
                Upload Scores
            </MudButton>
        }
        @if (_currentStep == Step.Confirming)
        {
            <MudButton Variant="@Variant.Text"
                       Color="@Color.Primary"
                       StartIcon="@Icons.Filled.ViewList"
                       OnClick="@(_=>_isScoreTableShowing=!_isScoreTableShowing)">@(_isScoreTableShowing?"Hide":"Show") Scores</MudButton>
            <MudButton Variant="@Variant.Filled"
                       Color="@Color.Primary"
                       StartIcon="@Icons.Filled.Save"
                       OnClick="@SaveScores">Save Scores</MudButton>
        }
        @if (_failedUploads.Any() && _currentStep is Step.Confirming or Step.Finished)
        {
            <MudButton OnClick="@DownloadFailures"
                       Variant="@Variant.Outlined"
                       Color="@Color.Primary"
                       StartIcon="@Icons.Filled.FileDownload">Download Failures</MudButton>
        }
        @if (_currentStep == Step.Finished)
        {
            <MudButton OnClick="@(_=>_currentStep=Step.Information)"
                       Variant="@Variant.Text"
                       Color="@Color.Primary"
                       StartIcon="@Icons.Filled.RestartAlt">Restart</MudButton>
        }
    </MudCardActions>
</MudCard>
<InputFile id="uploadInput" OnChange="@UploadFile" hidden accept=".csv,.xlsx"/>

<MudDialog @bind-IsVisible="_isExampleDialogShowing">
    <TitleContent>
        Supported Formats
    </TitleContent>
    <DialogContent>
        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
            <MudTabPanel Text="CSV">
                <MudText>CSV is the most basic upload format. It's typically the suggested format.</MudText>
                <MudText><b>Column Designation:</b> First row determines the headers of a column</MudText>
                <MudText><b>Removing Scores: </b> An empty letter grade will remove then score from your saved scores on the site</MudText>
                <MudButton OnClick="DownloadCSVExample" Variant="Variant.Outlined" Color="Color.Primary">Download Example</MudButton>
            </MudTabPanel>
            <MudTabPanel Text="XLSX">
                <MudText>XLSX is primarily a format for migrating from utilizing spreadsheets as your source of truth. There are a lot of rules, for a quick start check out the templates at the bottom.</MudText>
                <MudText><b>Column Designation:</b> Unlike CSV, XLSX uploads are picky about column Ordering. Song name must be first column for example.</MudText>
                <MudText><b>Difficulty:</b> Difficulty is determined by worksheet name (I.E S9, D12).</MudText>
                <MudText><b>Chart Type:</b> Chart Type (Single, Double, Single Performance etc.) are determined by a combination of worksheet name, and section name (indicated in the first column)</MudText>
                <MudText><b>Letter Grades:</b> There are two styles of format for letter grade determination: TRUE/FALSE and Letter Grade. (Note that in Letter Grade, all non empty letter grades are considered passing)</MudText>
                <MudText><b>Song Type:</b> "Remix", "Performance", "Full Song", "Short Cut" in the song name column indicates that the charts beneath are of that type. Suffixes will be added based on song type (I.E "Remix")</MudText>
                <MudText><b>Removing Scores:</b> Empty Letter grades will remove any score you already have registered on the website</MudText>
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" Href="https://docs.google.com/spreadsheets/d/1ZBkB4x3C0wvgmV20-IcIext-8Z6c5xDpwrDKuv9zra0/edit#gid=953736653" Target="_blank">TRUE/FALSE Template</MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" Href="https://docs.google.com/spreadsheets/d/1Uz4OA4T9tYXRgPfN1rgPmpG79Jinzhdj/edit?usp=sharing&ouid=105232544737327102121&rtpof=true&sd=true" Target="_blank">Letter Grade Template</MudButton>
            </MudTabPanel>
            <MudTabPanel Text="Song Names">
                <MudText>Some adjustments to account for typos or difference in naming conventions have been accounted for. Song Names are Case Insensitive. (Note that some of these look the same because they are whitespace adjustments)</MudText>
                <MudTable T="SongMapping" Items="_mappings" Height="300px" FixedHeader="true" Breakpoint="Breakpoint.None" >
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Song Name Mappings</MudText>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh><MudTableSortLabel T="SongMapping" SortBy="e => e.From">From</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel T="SongMapping" SortBy="e => e.To" InitialDirection="SortDirection.Ascending">To</MudTableSortLabel></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            @context.From
                        </MudTd>
                        <MudTd>@context.To</MudTd>

                    </RowTemplate>

                </MudTable>
            </MudTabPanel>
        </MudTabs>
    </DialogContent>
    <DialogActions>
        <MudSpacer></MudSpacer>
        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => _isExampleDialogShowing = false">Close</MudButton>
    </DialogActions>
</MudDialog>

@inject NavigationManager NavManager
@inject ICurrentUserAccessor CurrentUser;
@inject IMediator Mediator;
@inject ISnackbar Snackbar;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;
@code
{
    private enum Step
    {
        Information,
        Uploading,
        Confirming,
        Saving,
        Finished
    }

    private sealed record SongMapping(string From, string To)
    {

    }

    private IEnumerable<SongMapping> _mappings => ScoreFile.NameMappings.Select(k => new SongMapping(k.Key, k.Value));
    private bool _isScoreTableShowing = false;
    private bool _isExampleDialogShowing = false;
    private Step _currentStep = Step.Information;
    private int _maxSaving = 0;
    private int _currentSaved = 0;
    private string _fileType = "";
    private TimeSpan _remainingTime = TimeSpan.MinValue;

    private List<SpreadsheetScoreErrorDto> _failedUploads = new List<SpreadsheetScoreErrorDto>();
    private List<BestChartAttempt> _spreadSheetScores = new List<BestChartAttempt>();
    private IEnumerable<BestAttemptDto> _attemptDtos => _spreadSheetScores.Select(BestAttemptDto.From);

    private CancellationTokenSource _currentCancellation;
    protected override Task OnInitializedAsync()
    {
        if (CurrentUser.IsLoggedIn) return Task.CompletedTask;

        NavManager.NavigateTo("/Login");
        return Task.CompletedTask;
    }

    private void Cancel()
    {
        _currentStep = Step.Information;
        _currentCancellation?.Cancel();
    }

    private async Task DownloadCSVExample()
    {
        var stream = new MemoryStream();
        await using var writer = new StreamWriter(stream);
        await using var csv = new CsvWriter(writer, CultureInfo.InvariantCulture);
        await csv.WriteRecordsAsync(new SpreadsheetScoreDto[]
        {
            new()
            {
                Difficulty = "S17",
                Song = "Love Scenario",
                IsBroken = "",
                LetterGrade = "SS"
            },
            new()
            {
                Difficulty = "D23",
                Song = "Baroque Virus Remix",
                IsBroken = "true",
                LetterGrade = "A"
            },
            new()
            {
                Difficulty = "SP10",
                Song="Pumptris Quattro",
                IsBroken = "0",
                LetterGrade = "SSS"
            },
            new()
            {
                Difficulty = "CoOp2",
                Song = "Indestructible",
                IsBroken = "",
                LetterGrade = ""
            },
            new()
            {
                Difficulty = "D25",
                Song="Gargoyle Full Song",
                IsBroken = "FALSE",
                LetterGrade = "F"
            }
        });
        await writer.FlushAsync();
        await csv.FlushAsync();
        const string fileName = "scoresExample.csv";

        using var streamRef = new DotNetStreamReference(stream: stream);
        stream.Seek(0, SeekOrigin.Begin);

        var module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/helpers.js");
        await module.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }
    private async Task DownloadFailures()
    {
        
        var stream = new MemoryStream();
        await using var writer = new StreamWriter(stream);
        await using var csv = new CsvWriter(writer, CultureInfo.InvariantCulture);
        await csv.WriteRecordsAsync(_failedUploads);
        await writer.FlushAsync();
        await csv.FlushAsync();
        const string fileName = "failedUploads.csv";

        using var streamRef = new DotNetStreamReference(stream: stream);
        stream.Seek(0, SeekOrigin.Begin);

        var module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/helpers.js");
        await module.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);

    }

    private async Task SaveScores()
    {
        _currentStep = Step.Saving;
        _currentCancellation = new CancellationTokenSource();
        var cancellationToken = _currentCancellation.Token;
        _maxSaving = _spreadSheetScores.Count;
        _currentSaved = 0;
        var startTime = DateTimeOffset.Now;
        foreach (var best in _spreadSheetScores)
        {

            if (_currentCancellation.IsCancellationRequested)
            {
                return;
            }

            StateHasChanged();
            _currentSaved++;
            _remainingTime = (DateTimeOffset.Now - startTime) * (((double)_maxSaving - (double)_currentSaved) / (double)_currentSaved);
            try
            {
                await Mediator.Send(new UpdateBestAttemptCommand(best.Chart.Id, best.BestAttempt?.LetterGrade, best.BestAttempt?.IsBroken ?? true,null), cancellationToken);
            }
            catch (OperationCanceledException)
            {
                return;
            }
            catch (ChartNotFoundException)
            {
                _failedUploads.Add(new SpreadsheetScoreErrorDto
                {
                    Difficulty = best.Chart.DifficultyString,
                    LetterGrade = best.BestAttempt?.LetterGrade.ToString() ?? "",
                    Song = best.Chart.Song.Name,
                    Error = "Could not find chart",
                    IsBroken = (best.BestAttempt?.IsBroken??true).ToString()
                });
            }
            catch (SongNotFoundException)
            {
                _failedUploads.Add(new SpreadsheetScoreErrorDto
                {
                    Difficulty = best.Chart.DifficultyString,
                    LetterGrade = best.BestAttempt?.LetterGrade.ToString()??"",
                    Song=best.Chart.Song.Name,
                    Error="Could not find song",
                    IsBroken = (best.BestAttempt?.IsBroken??true).ToString()
                });
            }
            catch (Exception)
            {
                
                _failedUploads.Add(new SpreadsheetScoreErrorDto
                {
                    Difficulty = best.Chart.DifficultyString,
                    LetterGrade = best.BestAttempt?.LetterGrade.ToString() ?? "",
                    Song = best.Chart.Song.Name,
                    Error = "An unknown error occured",
                    IsBroken = (best.BestAttempt?.IsBroken??true).ToString()
                });
            }
        }
        _currentStep = Step.Finished;
    }
    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file.Size > ScoreFile.MaxByteCount)
        {
            Snackbar.Add("File cannot be larger than 10 MB", Severity.Error);
            return;
        }
        _currentStep = Step.Uploading;
        _currentCancellation = new CancellationTokenSource();

        try
        {
            var result = await ScoreFile.ReadAsync(file, _currentCancellation.Token);
            _spreadSheetScores = result.Scores.ToList();
            _failedUploads = result.Errors.ToList();
            _fileType = result.TypeDescription;
            _currentStep = Step.Confirming;
        }
        catch (ScoreFileParseException ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            _currentStep = Step.Information;
            return;
        }
        catch (OperationCanceledException)
        {
            return;
        }
        catch (Exception ex)
        {
            Snackbar.Add("There was an unknown error while parsing the file", Severity.Error);
            _currentStep = Step.Information;
            return;
        }
    }
}
