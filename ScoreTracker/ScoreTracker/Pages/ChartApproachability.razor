@using MediatR
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.SecondaryPorts
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Domain.Models
@using ScoreTracker.Domain.Records
@using ScoreTracker.Web.Services.Contracts
@using ChartType = ScoreTracker.Domain.Enums.ChartType
@page "/ChartApproachability"

<MudGrid>
    <MudItem xs="12" sm="6">
        
        <MudSelect T="ChartType" Value="_chartType" ValueChanged="c => SetParameters(c, _level)" Label="Chart Type">
            <MudSelectItem T="ChartType" Value="ChartType.Single">Single</MudSelectItem>
            <MudSelectItem T="ChartType" Value="ChartType.Double">Double</MudSelectItem>
        </MudSelect>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudTextField T="int" Value="_level" ValueChanged="i=>i is < 1 or > 28?SetParameters(_chartType,_level):SetParameters(_chartType,i)" Label="Level" InputMode="InputMode.numeric"></MudTextField>
    </MudItem>
</MudGrid>

<MudTable T="Guid" Items="_approachabilityRank.Keys">
    <HeaderContent>
        <MudTh>

            <MudTableSortLabel T="Guid" SortBy="@(e => _charts[e].Song.Name)">Song</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="Guid" SortBy="@(e => _approachabilityRank[e])">Approachability Rank</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="Guid" SortBy="@(e => _difficulty.TryGetValue(e,out var order)?order.Order:null)">Pass Difficulty</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="Guid" SortBy="@(e => _officialScores.TryGetValue(e,out var order)?order.Order:null)">Official Score Difficulty</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="Guid" SortBy="@(e => _scores.TryGetValue(e,out var order)?order.Order:null)">PIU Scores Score Difficulty</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="Guid" SortBy="@(e => _popularity.TryGetValue(e,out var order)?order.Order:null)">Popularity</MudTableSortLabel>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudTooltip Text="@_charts[context].Song.Name">
                
                <MudImage Src="@_charts[context].Song.ImagePath.ToString()" Height="35" Alt="@_charts[context].Song.Name" Elevation="25" ObjectFit="ObjectFit.ScaleDown"/>
                </MudTooltip>
        </MudTd>
        <MudTd>
            @_approachabilityRank[context]
        </MudTd>
        <MudTd>
            @(_difficulty.TryGetValue(context, out var category) ? category.Category : "")
        </MudTd>
        <MudTd>
            @(_officialScores.TryGetValue(context, out var category) ? category.Category : "")
        </MudTd>
        <MudTd>
            @(_scores.TryGetValue(context, out var category) ? category.Category : "")
        </MudTd>
        <MudTd>
            @(_popularity.TryGetValue(context,out var category)?PopularityString(category.Category):"")
        </MudTd>
    </RowTemplate>
</MudTable>
@inject IMediator Mediator
@inject NavigationManager NavManager
@inject ICurrentUserAccessor CurrentUser;
@inject IJSRuntime Javascript;
@inject ISnackbar Snackbar;
@inject IUiSettingsAccessor UiSettings;
@code {

    private IDictionary<Guid, SongTierListEntry> _officialScores = new Dictionary<Guid, SongTierListEntry>();
    private IDictionary<Guid, SongTierListEntry> _scores = new Dictionary<Guid, SongTierListEntry>();
    private IDictionary<Guid, SongTierListEntry> _popularity = new Dictionary<Guid, SongTierListEntry>();
    private IDictionary<Guid, SongTierListEntry> _difficulty = new Dictionary<Guid, SongTierListEntry>();
    private IDictionary<Guid, int> _approachabilityRank = new Dictionary<Guid, int>();

    private ChartType _chartType = ChartType.Single;
    private DifficultyLevel _level = 18;
    private IDictionary<Guid,Chart> _charts = new Dictionary<Guid, Chart>();

    private string PopularityString(TierListCategory category) => category switch {
        TierListCategory.Overrated=>"Ultra Popular",
        TierListCategory.VeryEasy=>"Very Popular",
        TierListCategory.Easy=>"Popular",
        TierListCategory.Medium=>"Average",
        TierListCategory.Hard=>"Unpopular",
        TierListCategory.VeryHard=>"Very Unpopular",
        TierListCategory.Underrated=>"Ultra Unpopular",
            _=>""
        };
    private async Task SetParameters(ChartType chartType, DifficultyLevel level)
    {
        _chartType = chartType;
        _level = level;
        _charts = (await Mediator.Send(new GetChartsQuery(MixEnum.Phoenix, _level, _chartType))).ToDictionary(c=>c.Id);
            


        var popularity = _popularity.Values.Where(p=>_charts.ContainsKey(p.ChartId));
        var difficulty = _difficulty.Values.Where(d=>_charts.ContainsKey(d.ChartId));
        var officialScore =_officialScores.Values.Where(r => _charts.TryGetValue(r.ChartId,out var chart) && chart.Level >= 20);
        var score = _scores.Values.Where(r => _charts.TryGetValue(r.ChartId, out var chart) && chart.Level <20);
        var result= popularity.Concat(difficulty).Concat(score).Concat(officialScore).GroupBy(s => s.ChartId)
            .OrderByDescending(g => g.Sum(s =>
                (s.TierListName == "Popularity" ? .5 : 1.0) *
                s.Category switch

                {
                    TierListCategory.Overrated => 7.0,
                    TierListCategory.Easy => 6.0,
                    TierListCategory.VeryEasy => 5.0,
                    TierListCategory.Medium => 4.0,
                    TierListCategory.Hard => 3.0,
                    TierListCategory.VeryHard => 2.0,
                    TierListCategory.Underrated => 1.0,
                    _ => 0
                    })).Select(g => g.Key);
        _approachabilityRank = result.Select((v, i) => (v,i)).ToDictionary(r => r.v, r => r.i+1);
    }
    protected override async Task OnInitializedAsync()
    {
        _officialScores = (await Mediator.Send(new GetTierListQuery("Official Scores"))).ToDictionary(t => t.ChartId);

        _scores = (await Mediator.Send(new GetTierListQuery("Scores"))).ToDictionary(t => t.ChartId);
        _popularity = (await Mediator.Send(new GetTierListQuery("Popularity"))).ToDictionary(t => t.ChartId);
        _difficulty = (await Mediator.Send(new GetTierListQuery("Difficulty"))).ToDictionary(t => t.ChartId);
        _charts = (await Mediator.Send(new GetChartsQuery(MixEnum.Phoenix))).ToDictionary(c => c.Id);
        await SetParameters(ChartType.Single, 18);
    }

    private sealed record BoxPlotData(ChartType Type, int Level, int Total)
    {
    }
}
