@page "/UploadPhoenixScores"
@using ScoreTracker.Domain.SecondaryPorts
@using ScoreTracker.Domain.Models
@using MediatR
@using CsvHelper
@using System.Globalization
@using ScoreTracker.Application.Commands
@using ScoreTracker.Domain.Events
@using ScoreTracker.Web.Dtos
@using ScoreTracker.Web.Services
@using ScoreTracker.Web.Services.Contracts
@using ScoreTracker.Web.Shared
@implements IDisposable
<PageTitle>@L["Import Phoenix Scores"]</PageTitle>

<MudCard >
    <MudCardHeader><h2>@L["Import Phoenix Scores"]</h2></MudCardHeader>
    <MudCardContent>
        @switch (_currentStep)
        {
            case Step.Information:
                <p>
                    @L["Phoenix Import Info 1"]
                    <br/><br/>
                    
                    @L["Phoenix Import Info 2"]
                    <br/><br/>
                    
                    @L["Phoenix Import Info 3"]
                    <br/><br/>
                
                    @L["Phoenix Import Info 4"]
                    </p>
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudNumericField T="int" Min="1" Label=@L["Starting Page"] @bind-Value="_startPage"></MudNumericField>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudNumericField T="int?" Min="1" Label=@L["Ending Page"] @bind-Value="_endPage" Clearable="true"></MudNumericField>
                    </MudItem>
                </MudGrid>
                break;
            case Step.UsePassword:
                <MudGrid>
                    <MudItem xs="12">
                        <MudText>This will have PIUScores log into your account and import scores for you.</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText>I do not store a record of your username or password, you will have to type them in every time you use this.</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText>To minimize calls to https://piugame.com I will only import new or improved scores. Every user only gets one full import using Username/Password. Use the dev-tools importer if you wish to re-import older scores.</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText>Once started, don't leave this page or else your scores will not finish saving.</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField Label="PIUGame.com Username" Disabled="_isImporting" @bind-Value="_username"></MudTextField>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField InputType="InputType.Password" Disabled="_isImporting" Label="PIUGame.com Password" @bind-Value="_password"></MudTextField>
                    </MudItem>
                    @if (_isImporting)
                    {
                        <MudItem xs="12">
                            <MudText>Importing... (Can take a few minutes)</MudText>
                            <br/>
                            <MudText>@_passwordImportStatus</MudText>
                        </MudItem>
                    }
                </MudGrid>
                break;
            case Step.Uploading:
                <p>
                    @L["Phoenix Import Uploading"]
                </p>
                <MudProgressLinear Indeterminate="true" Color="@Color.Primary" Size="@Size.Large"></MudProgressLinear>
                break;
            case Step.Confirming:
                <p>
                    <b>@L["Scores Parsed"]:</b> @_spreadSheetScores.Count
                    <br/>
                    <b>@L["Parse Failures"]:</b> @_failedUploads.Count
                    <br/><br/>
                    @L["Phoenix Import Confirming"]
                
                    </p>
                break;
            case Step.Saving:
                <p>
                    @L["Phoenix Import Saving"]
                </p>
                <br/>
                <span>
                    @L["Phoenix Import Saving Progress",_currentSaved,_maxSaving,_remainingTime.ToString(@"m\:ss"), _failedUploads.Count]
                </span>
                <MudProgressLinear Color="@Color.Primary" Size="@Size.Large" Value="@_currentSaved" Min="1" Max="@_maxSaving"/>
                break;
            case Step.Finished when _failedUploads.Any():
                <p>
                  @L["Phoenix Import Saving Failures"]
                    </p>
                break;
            case Step.Finished when !_failedUploads.Any():
                <p>
                    @L["Phoenix Import Saving Success"]
                </p>
                break;
            default:
                <p>
                    You somehow ended up in a state between realities. Refresh the page to try again.
                </p>
                break;
        }
    </MudCardContent>
    <MudCardActions>
        <MudSpacer></MudSpacer>
        @if (_currentStep is Step.Uploading or Step.Confirming or Step.Saving)
        {
            <MudButton Variant="@Variant.Text"
                       Color="@Color.Primary"
                       StartIcon="@Icons.Material.Filled.Cancel"
                       OnClick="@Cancel">@L["Cancel"]</MudButton>
        }
        @if (_currentStep == Step.Information)
        {
            <MudButton Variant="Variant.Outlined"
                       Color="@Color.Primary"
                       StartIcon="@Icons.Material.Filled.ContentCopy"
                   OnClick="CopyPIUGameScript">
                @L["Copy Script"]
            </MudButton>
            <MudButton HtmlTag="label"
                       Variant="@Variant.Filled"
                       Color="@Color.Primary"
                       StartIcon="@Icons.Material.Filled.UploadFile"
                       for="uploadInput">
                @L["Upload Scores"]
            </MudButton>
        }
        @if (_currentStep == Step.Confirming)
        {
            <MudButton Variant="@Variant.Filled"
                       Color="@Color.Primary"
                       StartIcon="@Icons.Material.Filled.Save"
                       OnClick="@SaveScores">@L["Save Scores"]</MudButton>
        }
        @if (_failedUploads.Any() && _currentStep is Step.Confirming or Step.Finished)
        {
            <MudButton OnClick="@DownloadFailures"
                       Variant="@Variant.Outlined"
                       Color="@Color.Primary"
                       StartIcon="@Icons.Material.Filled.FileDownload">@L["Download Failures"]</MudButton>
        }
        @if (_currentStep == Step.UsePassword)
        {
            <MudButton Variant="@Variant.Filled"
                       Disabled="_isImporting"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.ImportExport"
                       OnClick="ImportScores">Import</MudButton>
        }
        @if (_currentStep == Step.Finished)
        {
            <MudButton OnClick="@(_=>_currentStep=Step.Information)"
                       Variant="@Variant.Text"
                       Color="@Color.Primary"
                       StartIcon="@Icons.Material.Filled.RestartAlt">@L["Restart"]</MudButton>
        }
    </MudCardActions>
</MudCard>
<InputFile id="uploadInput" OnChange="@UploadFile" hidden accept=".csv,.xlsx"/>

@inject NavigationManager NavManager
@inject ICurrentUserAccessor CurrentUser;
@inject IMediator Mediator;
@inject ISnackbar Snackbar;
@inject IPhoenixScoreFileExtractor Extractor;
@inject IJSRuntime JSRuntime;
@inject ILogger<UploadPhoenixScores> Logger;
@code
{
    private enum Step
    {
        Information,
        Uploading,
        Confirming,
        Saving,
        UsePassword,
        Finished
    }

    private sealed record SongMapping(string From, string To)
    {

    }

    private bool _isScoreTableShowing = false;
    private Step _currentStep = Step.Information;
    private int _maxSaving = 0;
    private int _currentSaved = 0;
    private int _startPage = 1;
    private string _username = "";
    private string _password = "";

    [Parameter] [SupplyParameterFromQuery(Name="UsernamePassword")] public bool UseUsernamePassword { get; set; } = false;
    private async Task ImportScores()
    {
        _isImporting = true;
        _passwordImportStatus = "Starting Import...";
        try
        {
            await Mediator.Send(new ImportOfficialPlayerScoresCommand(_username, _password));
            _passwordImportStatus = "Import Completed!";
        }
        catch (Exception e)
        {
            _passwordImportStatus = "Import Experienced an Error";
            Logger.LogError(e, $"There was an error while importing scores");
            Snackbar.Add("There was an error while trying to import your scores. Double check your username/password and try again.",Severity.Error);
        }
        _isImporting = false;
    }
    private bool _isImporting = false;
    private int? _endPage = null;
    private TimeSpan _remainingTime = TimeSpan.MinValue;

    private List<SpreadsheetScoreErrorDto> _failedUploads = new List<SpreadsheetScoreErrorDto>();
    private List<RecordedPhoenixScore> _spreadSheetScores = new List<RecordedPhoenixScore>();

    private CancellationTokenSource _currentCancellation = new CancellationTokenSource();
    private string _passwordImportStatus = string.Empty;
    protected override Task OnInitializedAsync()
    {
        if (UseUsernamePassword)
        {
            _currentStep = Step.UsePassword;
            MainLayout.ImportStatusUpdated += StatusUpdate;
        }
        if (CurrentUser.IsLoggedIn) return Task.CompletedTask;

        NavManager.NavigateTo("/Login");
        return Task.CompletedTask;
    }

    private void StatusUpdate(object? origin, ImportStatusUpdated e)
    {
        if (e.UserId != CurrentUser.User.Id) return;

        _passwordImportStatus = e.Status;
        InvokeAsync(StateHasChanged);
    }
    private void Cancel()
    {
        _currentStep = Step.Information;
        _currentCancellation?.Cancel();
    }


    private async Task DownloadFailures()
    {

        var stream = new MemoryStream();
        await using var writer = new StreamWriter(stream);
        await using var csv = new CsvWriter(writer, CultureInfo.InvariantCulture);
        await csv.WriteRecordsAsync(_failedUploads);
        await writer.FlushAsync();
        await csv.FlushAsync();
        const string fileName = "failedUploads.csv";

        using var streamRef = new DotNetStreamReference(stream: stream);
        stream.Seek(0, SeekOrigin.Begin);

        var module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/helpers.js");
        await module.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);

    }

    private async Task SaveScores()
    {
        _currentStep = Step.Saving;
        _currentCancellation = new CancellationTokenSource();
        var cancellationToken = _currentCancellation.Token;
        _maxSaving = _spreadSheetScores.Count;
        _currentSaved = 0;
        var startTime = DateTimeOffset.Now;
        foreach (var best in _spreadSheetScores)
        {

            if (_currentCancellation.IsCancellationRequested)
            {
                return;
            }

            StateHasChanged();
            _currentSaved++;
            _remainingTime = (DateTimeOffset.Now - startTime) * (((double)_maxSaving - (double)_currentSaved) / (double)_currentSaved);
            try
            {
                await Mediator.Send(new UpdatePhoenixBestAttemptCommand(best.ChartId,false,best.Score,best.Plate), cancellationToken);
            }
            catch (OperationCanceledException)
            {
                return;
            }
        }
        _currentStep = Step.Finished;
    }
    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file.Size > XXScoreFile.MaxByteCount)
        {
            Snackbar.Add("File cannot be larger than 10 MB", Severity.Error);
            return;
        }
        _currentStep = Step.Uploading;
        _currentCancellation = new CancellationTokenSource();

        try
        {
            var result = await Extractor.GetScores(file, _currentCancellation.Token);
            _spreadSheetScores = result.Scores.ToList();
            _failedUploads = result.Errors.ToList();
            _currentStep = Step.Confirming;
        }
        catch (ScoreFileParseException ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            _currentStep = Step.Information;
            return;
        }
        catch (OperationCanceledException)
        {
            return;
        }
        catch (Exception)
        {
            Snackbar.Add("There was an unknown error while parsing the file", Severity.Error);
            _currentStep = Step.Information;
            return;
        }
    }
    private async Task CopyPIUGameScript()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", _piuGameScript());
        Snackbar.Add("Copied to clipboard!", Severity.Success);
    }

    private string _pageLimitString() => _endPage == null ? "" : $"pageIndex>{_endPage}||";
    private string _piuGameScript() => $@"
var csvString=""data:text/csv;charset=utf-8,"";
    csvString+=""Song,Difficulty,Score,LetterGrade,Plate\r\n"";
    var pageIndex={_startPage};
    while(true) {{

        var nextPageString = await $.get(""https://piugame.com/my_page/my_best_score.php?&&page=""+pageIndex)
        var page=$(nextPageString);
        var foundScores=$(""ul.my_best_scoreList>li>div.in"",page);
        foundScores.each(function(){{
            var songName = $('.song_name',this)[0].children[0].innerText.replaceAll('""','""""').replaceAll('#','Num');
            var chartType = $($('.stepBall_img_wrap .imG img',this)[0]).attr(""src"").substring(40,41);
            var difficultyLevel = $('.stepBall_img_wrap .imG img',this).map((index,i)=> $(i).attr(""src"").substring(46,47)).get().join("""").replaceAll(""."","""");
            var scoreList = $("".etc_con>ul"",this)[0];
            var letter = $(scoreList.children[1].children[0].children[0].children[0]).attr('src').substring(32).replace("".png"","""").replace(""_p"",""+"");
            var score = $(scoreList.children[0].children[0].children[0].children[0])[0].innerText.replaceAll("","","""");
            var plate = $(scoreList.children[2].children[0].children[0].children[0]).attr(""src"").substring(32,34);
            csvString+='""'+songName+'"",'+chartType+difficultyLevel+"",""+score+"",""+letter+"",""+plate+""\r\n"";
        }});
        pageIndex++;
        console.log(""Page ""+pageIndex);
        if({_pageLimitString()}$("".xi.last"",page).length==0){{
            break;
        }}
    }}
    console.log(csvString);
    var encodedUri = encodeURI(csvString);
    window.open(encodedUri);";

    public void Dispose()
    {
        MainLayout.ImportStatusUpdated -= StatusUpdate;
    }
}
