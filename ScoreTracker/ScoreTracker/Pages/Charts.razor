@page "/Charts"
@using MediatR
@using ScoreTracker.Application.Commands
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.SecondaryPorts
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Web.Dtos
@using ChartType = ScoreTracker.Domain.Enums.ChartType;
<PageTitle>Best Attempts</PageTitle>

<MudGrid>
    <MudItem xs="6" sm="4">
        <MudSelect T="int?" AdornmentIcon="@Icons.Filled.Bolt" Label="Difficulty Level" @bind-Value="@_difficultyFilter" Clearable="true" Disabled="_chartTypeFilter==ChartType.CoOp.ToString()">
            @foreach (var level in Enumerable.Range(DifficultyLevel.Min,DifficultyLevel.Max))
            {
                <MudSelectItem T="int?" Value="@level">@level</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="6" sm="4">
        <MudSelect T="string" AdornmentIcon="@Icons.Filled.Category" Label="Chart Type" @bind-Value="_chartTypeFilter" Clearable="true">
            @foreach (var type in Enum.GetValues<ChartType>())
            {
                @if (type == ChartType.CoOp && _difficultyFilter != null)
                {
                    continue;
                }
                <MudSelectItem T="string" Value="@type.ToString()">@type.ToString()</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="6" sm="4">
        <MudSelect T="ScoreState?" AdornmentIcon="@Icons.Filled.Rule" Label="Score State" @bind-Value="_scoreStateFilter" Clearable="true">
            @foreach(var ss in Enum.GetValues<ScoreState>())
            {
                <MudSelectItem T="ScoreState?" Value="@ss">@ss.ToString()</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
</MudGrid>
<br/>
<MudChip Variant="Variant.Outlined" Size="Size.Small">Not Graded: @NotGradedCount</MudChip>
<MudChip Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small">Not Passed: @NotPassedCount</MudChip>
<MudChip Variant="Variant.Outlined" Color="Color.Success" Size="Size.Small">Passed: @PassedCount</MudChip>
<br/>
<MudTable T="BestAttemptDto" Items="@_charts" Filter="FilterChart"  Loading="@_isLoading" Breakpoint="Breakpoint.None">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Charts</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel T="BestAttemptDto" SortBy="e => e.Level">Level</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="BestAttemptDto" SortBy="e => e.SongName" InitialDirection="SortDirection.Ascending">Song</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="BestAttemptDto" SortBy="e => e.LetterGrade">Letter</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="BestAttemptDto" SortBy="e => e.IsBroken">Broken</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudTooltip Text="@context.DifficultyShorthand">
                <MudImage Src="@context.DifficultyBubblePath" Height="35" Alt="@context.DifficultyShorthand" ObjectFit="ObjectFit.ScaleDown"></MudImage>
            </MudTooltip>
        </MudTd>
        <MudTd>
            <MudTooltip Text="@context.SongName">
                <MudImage Src="@context.ImagePath" Height="35" Alt="@context.SongName" Elevation="25" ObjectFit="ObjectFit.ScaleDown"/>
            </MudTooltip>
        </MudTd>
        <MudTd>
            <MudSelect T="string" Value="@context.LetterGrade" ValueChanged="@(newValue => SetLetter(context, newValue))" Clearable="true" Margin="@Margin.Dense">
                @foreach (var letterGrade in Enum.GetValues<LetterGrade>())
                {
                    <MudSelectItem Value="@letterGrade.ToString()">@letterGrade.ToString()</MudSelectItem>
                }
            </MudSelect>
        </MudTd>
        <MudTd>
            <MudCheckBox T="bool" Checked="context.IsBroken" CheckedChanged="@(newValue => SetBroken(context, newValue))" Required Margin="@Margin.Dense"></MudCheckBox>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager></MudTablePager>
    </PagerContent>
</MudTable>

@inject IMediator Mediator
@inject NavigationManager NavManager
@inject ICurrentUserAccessor CurrentUser;
@inject ISnackbar Snackbar;

@code {
    private bool _showFilterDialog;
    private BestAttemptDto[] _charts = Array.Empty<BestAttemptDto>();

    private MudDataGrid<BestAttemptDto>? _dataGrid;

    private bool _isLoading = true;
    private int? _difficultyFilter = null;
    private string? _chartTypeFilter = null;
    private ScoreState? _scoreStateFilter = null;

    private IEnumerable<BestAttemptDto> FileredCharts => _charts.Where(FilterChart);

    private int NotGradedCount => FileredCharts.Count(c => string.IsNullOrWhiteSpace(c.LetterGrade));
    private int NotPassedCount => FileredCharts.Count(c => c.IsBroken);
    private int PassedCount => FileredCharts.Count(c => !string.IsNullOrWhiteSpace(c.LetterGrade) && !c.IsBroken);

    private bool FilterChart(BestAttemptDto chart)
    {
        var result = true;
        if (_difficultyFilter != null)
        {
            result = result && (chart.Level == _difficultyFilter.Value && chart.ChartType != ChartType.CoOp.ToString());
        }
        if (!string.IsNullOrWhiteSpace(_chartTypeFilter))
        {
            result = result && chart.ChartType == _chartTypeFilter;
        }
        if (_scoreStateFilter != null)
        {
            result = _scoreStateFilter.Value switch
            {
                ScoreState.NotPassed => result && chart.IsBroken,
                ScoreState.Passed => result && !string.IsNullOrWhiteSpace(chart.LetterGrade) && !chart.IsBroken,
                ScoreState.Ungraded => result && string.IsNullOrWhiteSpace(chart.LetterGrade),
                _ => result
                };
        }
        return result;
    }

    private static bool IsPassing(BestAttemptDto dto)
    {
        return !string.IsNullOrWhiteSpace(dto.LetterGrade) && !dto.IsBroken;
    }


    private async Task LoadCharts()
    {
        _isLoading = true;
        _charts = (await Mediator.Send(new GetBestChartAttemptsQuery())).Select(BestAttemptDto.From).ToArray();
        _isLoading = false;
    }
    protected override async Task OnInitializedAsync()
    {
        if (!CurrentUser.IsLoggedIn)
        {
            NavManager.NavigateTo("/Login");
            return;
        }
        await LoadCharts();

    }

    private async Task SetBroken(BestAttemptDto dto, bool newBroken)
    {
        dto.IsBroken = newBroken;
        if (string.IsNullOrWhiteSpace(dto.LetterGrade) && !newBroken)
        {
            dto.LetterGrade = LetterGrade.A.ToString();
        }
        await UpdateBest(dto);
    }
    private async Task SetLetter(BestAttemptDto dto, string newLetterGrade)
    {
        dto.LetterGrade = newLetterGrade;
        if (string.IsNullOrWhiteSpace(newLetterGrade) && !dto.IsBroken)
        {
            dto.IsBroken = true;
        }
        await UpdateBest(dto);
    }
    private async Task UpdateBest(BestAttemptDto dto)
    {
        LetterGrade? letterGrade = Enum.TryParse<LetterGrade>(dto.LetterGrade, out var grade) ? grade : null;
        var chartType = Enum.Parse<ChartType>(dto.ChartType);

        try
        {
            await Mediator.Send(new UpdateBestAttemptCommand(dto.SongName, chartType, dto.Level, letterGrade, dto.IsBroken, dto.Score));
            
            var chartName = $"{dto.SongName} {DifficultyLevel.ToShorthand(chartType,dto.Level)}";

            Snackbar.Add(letterGrade == null ? $"Removed score for {chartName}" : $"Recorded {(dto.IsBroken ? "Broken":"")} {letterGrade} for {chartName}", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add("There was an error while recording the score", Severity.Error);
        }

        
    }

    private enum ScoreState
    {
        Ungraded,
        NotPassed,
        Passed
    }
}
