@page "/{RequestedUserId:guid}/Charts"
@page "/Charts"
@using MediatR
@using ScoreTracker.Application.Commands
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.SecondaryPorts
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Web.Dtos
@using ChartType = ScoreTracker.Domain.Enums.ChartType;
<PageTitle>Best Attempts</PageTitle>

<MudGrid>
    <MudItem xs="6" sm="4">
        <MudSelect T="int?" AdornmentIcon="@Icons.Filled.Bolt" Label="Difficulty Level" @bind-Value="@_difficultyFilter" Clearable="true" Disabled="_chartTypeFilter==ChartType.CoOp.ToString()">
            @foreach (var level in Enumerable.Range(DifficultyLevel.Min,DifficultyLevel.Max))
            {
                <MudSelectItem T="int?" Value="@level">@level</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="6" sm="4">
        <MudSelect T="string" AdornmentIcon="@Icons.Filled.Category" Label="Chart Type" @bind-Value="_chartTypeFilter" Clearable="true">
            @foreach (var type in Enum.GetValues<ChartType>())
            {
                @if (type == ChartType.CoOp && _difficultyFilter != null)
                {
                    continue;
                }
                <MudSelectItem T="string" Value="@type.ToString()">@type.ToString()</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="6" sm="4">
        <MudSelect T="ScoreState?" AdornmentIcon="@Icons.Filled.Rule" Label="Score State" @bind-Value="_scoreStateFilter" Clearable="true">
            @foreach(var ss in Enum.GetValues<ScoreState>())
            {
                <MudSelectItem T="ScoreState?" Value="@ss">@ss.ToString()</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
</MudGrid>
<br/>
<MudChip Variant="Variant.Outlined" Size="Size.Small">Not Graded: @NotGradedCount</MudChip>
<MudChip Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small">Not Passed: @NotPassedCount</MudChip>
<MudChip Variant="Variant.Outlined" Color="Color.Success" Size="Size.Small">Passed: @PassedCount</MudChip>
<br/>
<MudTable T="BestAttemptDto" Items="@_charts" Filter="FilterChart"  Loading="@_isLoading" Breakpoint="Breakpoint.None">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Charts</MudText>
        <MudSpacer></MudSpacer>
        @if (CurrentUser.IsLoggedIn && CurrentUser.User.IsPublic && CurrentUser.User.Id == RequestedUserId)
        {
            <MudTooltip Text="Share Your Chart List">
                <MudIconButton Icon="@Icons.Filled.Share" OnClick="()=>_showShareDialog=true"></MudIconButton>
            </MudTooltip>
        }
        <MudMenu Icon="@Icons.Material.Filled.MoreVert">
            <MudMenuItem><MudCheckBox @bind-Checked="_isDifficultyShowing" Label="Difficulty"></MudCheckBox></MudMenuItem>
            <MudMenuItem><MudCheckBox @bind-Checked="_isSongShowing" Label="Song"></MudCheckBox></MudMenuItem>
            <MudMenuItem><MudCheckBox @bind-Checked="_isGradeShowing" Label="Letter Grade"></MudCheckBox></MudMenuItem>
            <MudMenuItem><MudCheckBox @bind-Checked="_isBrokenShowing" Label="Broken"></MudCheckBox></MudMenuItem>
            <MudMenuItem><MudCheckBox @bind-Checked="_isVideoShowing" Label="Video"></MudCheckBox></MudMenuItem>
            <MudMenuItem><MudCheckBox @bind-Checked="_isScoreShowing" Label="Score"></MudCheckBox></MudMenuItem>
            <MudMenuItem><MudCheckBox @bind-Checked="_isRecordedOnShowing" Label="Recorded Date"></MudCheckBox></MudMenuItem>
            <MudMenuItem><MudCheckBox @bind-Checked="_isActionsShowing" Label="Actions"></MudCheckBox></MudMenuItem>
        </MudMenu>
    </ToolBarContent>
    <HeaderContent>
        @if (_isDifficultyShowing)
        {
            <MudTh><MudTableSortLabel T="BestAttemptDto" SortBy="e => e.Level">Level</MudTableSortLabel></MudTh>
        }
        @if (_isSongShowing)
        {
            <MudTh><MudTableSortLabel T="BestAttemptDto" SortBy="e => e.SongName" InitialDirection="SortDirection.Ascending">Song</MudTableSortLabel></MudTh>
        }
        @if (_isVideoShowing)
        {
            <MudTh>Video</MudTh>
        }
        @if (_isGradeShowing)
        {
            <MudTh><MudTableSortLabel T="BestAttemptDto" SortBy="e => e.LetterGrade">Letter</MudTableSortLabel></MudTh>
        }
        @if (_isBrokenShowing)
        {
            
            <MudTh><MudTableSortLabel T="BestAttemptDto" SortBy="e => e.IsBroken">Broken</MudTableSortLabel></MudTh>
        }
        @if (_isScoreShowing)
        {
            <MudTh><MudTableSortLabel T="BestAttemptDto" SortBy="e => e.Score">Score</MudTableSortLabel></MudTh>
        }
        @if (_isRecordedOnShowing)
        {
            <MudTh><MudTableSortLabel T="BestAttemptDto" SortBy="e=>e.RecordedOn">Recorded On</MudTableSortLabel></MudTh>
        }
        @if (CurrentUser.IsLoggedIn && _isActionsShowing)
        {
            <MudTh>
                Actions
            </MudTh>
        }
    </HeaderContent>
    <RowTemplate>
        @if (_isDifficultyShowing)
        {
            
            <MudTd>
                <MudTooltip Text="@context.DifficultyShorthand">
                    <MudImage Src="@context.DifficultyBubblePath" Height="35" Alt="@context.DifficultyShorthand" ObjectFit="ObjectFit.ScaleDown"></MudImage>
                </MudTooltip>
            </MudTd>
        }
        @if (_isSongShowing)
        {
            
            <MudTd>
                <MudTooltip Text="@context.SongName">
                    <MudImage Src="@context.ImagePath" Height="35" Alt="@context.SongName" Elevation="25" ObjectFit="ObjectFit.ScaleDown"/>
                </MudTooltip>
            </MudTd>
        }
        @if (_isVideoShowing)
        {
            <MudTd>
                @if (!string.IsNullOrWhiteSpace(context.VideoUrl))
                {
                    <MudTooltip Text="Open Embeded Video">
                        <MudIconButton Icon="@Icons.Custom.Brands.YouTube" OnClick="()=>ShowVideo(context.VideoUrl)"></MudIconButton>
                    </MudTooltip>
                }
                else
                {
                    <MudTooltip Text="Open Youtube Search for Chart">
                        <MudIconButton Icon="@Icons.Filled.Search" Href="@ChartSearch(context)" Target="_blank"></MudIconButton>
                    </MudTooltip>
                }
            </MudTd>
        }

        @if (_isGradeShowing)
        {
            
            <MudTd>
                @if (CanEdit)
                {
                    
                    <MudSelect T="string" Value="@context.LetterGrade" ValueChanged="@(newValue => SetLetter(context, newValue))" Clearable="true" Margin="@Margin.Dense">
                        @foreach (var letterGrade in Enum.GetValues<LetterGrade>())
                        {
                            <MudSelectItem Value="@letterGrade.ToString()">@letterGrade.ToString()</MudSelectItem>
                        }
                    </MudSelect>
                }
                else
                {
                    <MudText>@context.LetterGrade</MudText>
                }
            </MudTd>
        }
        @if (_isBrokenShowing)
        {
            <MudTd>
                @if (CanEdit)
                {
                    <MudCheckBox T="bool" Checked="context.IsBroken" CheckedChanged="@(newValue => SetBroken(context, newValue))" Required Margin="@Margin.Dense"></MudCheckBox>
                }
                else
                {
                    <MudText>@(context.IsBroken?"Broken":"Passed")</MudText>
                }
            </MudTd>
        }
        @if (_isScoreShowing)
        {
            <MudTd>
                @if (CanEdit)
                {
                    <MudNumericField T="int?" Label="Score" Value="context.Score" ValueChanged="@(newValue => SetScore(context, newValue))" Min="Score.Min" Max="Score.Max" Variant="Variant.Text" Clearable="true"></MudNumericField>
                }
                else
                {
                    <MudText>@context.Score</MudText>
                }
                
            </MudTd>
        }
        @if (_isRecordedOnShowing)
        {
            <MudTd>
                <MudTooltip Text="@context.RecordedOn?.ToString("MMM dd yyyy")">@context.RecordedOn?.ToString("MM/dd/yyyy")</MudTooltip>
            </MudTd>
        }
        @if (CurrentUser.IsLoggedIn && _isActionsShowing)
        {
            <MudTh>
                <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                    @if (_favoriteCharts.Contains(context.ChartId))
                    {
                        <MudMenuItem>
                            <MudTooltip Text="Remove from Favorites">
                                <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Secondary" OnClick="()=>RemoveFromFavorites(context.ChartId)"></MudIconButton>
                            </MudTooltip>
                        </MudMenuItem>
                    }
                    else
                    {
                        <MudMenuItem>
                            <MudTooltip Text="Add to Favorites">
                                <MudIconButton Icon="@Icons.Material.Outlined.Favorite" OnClick="()=>AddToFavorites(context.ChartId)"></MudIconButton>
                            </MudTooltip>
                        </MudMenuItem>
                    }
                    @if(_todoCharts.Contains(context.ChartId))
                    {
                    <MudMenuItem>
                        <MudTooltip Text="Remove from To Do List">
                            <MudIconButton Icon="@Icons.Material.Filled.ListAlt" Color="Color.Secondary" OnClick="()=>RemoveFromToDo(context.ChartId)"></MudIconButton>
                        </MudTooltip>
                    </MudMenuItem>
                    }
                    else
                    {
                    <MudMenuItem>
                        <MudTooltip Text="Add to To Do List">
                            <MudIconButton Icon="@Icons.Material.Outlined.ListAlt" OnClick="()=>AddToToDo(context.ChartId)"></MudIconButton>
                        </MudTooltip>
                    </MudMenuItem>
                    }
                </MudMenu>
            </MudTh>
        }
    </RowTemplate>
    <PagerContent>
        <MudTablePager></MudTablePager>
    </PagerContent>
</MudTable>
<MudDialog @bind-IsVisible="_showVideoDialog">
    <DialogContent>
        <iframe
            class="video"
            id="chartVideoFrame"
            src="@(_currentVideo + "?autoplay=1")"
            allow="autoplay; encrypted-media"
            allowfullscreen></iframe>
    </DialogContent>

    <DialogActions>
        <MudSpacer></MudSpacer>
        <MudTooltip Text="Report Low Quality, Broken, or Incorrect Video">
            <MudButton Href="mailto:sharkingbird@gmail.com" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Filled.Report">Report Video</MudButton>
        </MudTooltip>
        <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Filled.Close" OnClick="()=>_showVideoDialog=false">Close</MudButton>
    </DialogActions>
</MudDialog>
<MudDialog @bind-IsVisible="_showShareDialog">
    <DialogContent>
        <MudText>Use this link to share your chart list to other players.</MudText>
        <br/>
        <MudTextField Value="@ShareUrl" Label="Share Url" Variant="Variant.Outlined" Margin="Margin.Dense" ReadOnly="true"/>
    </DialogContent>
    <DialogActions>
        <MudSpacer></MudSpacer>
        <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Filled.ContentCopy" OnClick="CopyShareLink">Copy To Clipboard</MudButton>
        <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Filled.Close" OnClick="()=>_showShareDialog=false">Close</MudButton>
    </DialogActions>
</MudDialog>
<link href="/css/charts.css" rel="stylesheet"/>

@inject IMediator Mediator
@inject NavigationManager NavManager
@inject ICurrentUserAccessor CurrentUser;
@inject ISnackbar Snackbar;
@inject IJSRuntime Javascript;
@code {
    private bool _showShareDialog;
    private string _currentVideo = "";
    private bool _showVideoDialog;
    [Parameter]
    public Guid? RequestedUserId { get; set; }

    private bool CanEdit => CurrentUser.IsLoggedIn && CurrentUser.User.Id == RequestedUserId;
    private string ShareUrl => CurrentUser.IsLoggedIn ? $"{NavManager.BaseUri}{CurrentUser.User.Id}/Charts" : string.Empty;
    private bool _showFilterDialog;
    private BestAttemptDto[] _charts = Array.Empty<BestAttemptDto>();

    private MudDataGrid<BestAttemptDto>? _dataGrid;

    private bool _isDifficultyShowing = true;
    private bool _isSongShowing = true;
    private bool _isGradeShowing = true;
    private bool _isBrokenShowing = true;
    private bool _isScoreShowing = false;
    private bool _isRecordedOnShowing = false;
    private bool _isActionsShowing = true;
    private bool _isVideoShowing = true;
    private bool _isLoading = true;
    private int? _difficultyFilter = null;
    private string? _chartTypeFilter = null;
    private ScoreState? _scoreStateFilter = null;
    private IEnumerable<BestAttemptDto> FileredCharts => _charts.Where(FilterChart);
    private ISet<Guid> _favoriteCharts = new HashSet<Guid>();
    private ISet<Guid> _todoCharts = new HashSet<Guid>();
    private int NotGradedCount => FileredCharts.Count(c => string.IsNullOrWhiteSpace(c.LetterGrade));
    private int NotPassedCount => FileredCharts.Count(c => c.IsBroken);
    private int PassedCount => FileredCharts.Count(c => !string.IsNullOrWhiteSpace(c.LetterGrade) && !c.IsBroken);

    private bool FilterChart(BestAttemptDto chart)
    {
        var result = true;
        if (_difficultyFilter != null)
        {
            result = result && (chart.Level == _difficultyFilter.Value && chart.ChartType != ChartType.CoOp.ToString());
        }
        if (!string.IsNullOrWhiteSpace(_chartTypeFilter))
        {
            result = result && chart.ChartType == _chartTypeFilter;
        }
        if (_scoreStateFilter != null)
        {
            result = _scoreStateFilter.Value switch
            {
                ScoreState.NotPassed => result && chart.IsBroken,
                ScoreState.Passed => result && !string.IsNullOrWhiteSpace(chart.LetterGrade) && !chart.IsBroken,
                ScoreState.Ungraded => result && string.IsNullOrWhiteSpace(chart.LetterGrade),
                _ => result
                };
        }
        return result;
    }

    private async Task RemoveFromToDo(Guid chartId)
    {
        await Mediator.Send(new RemoveChartFromListCommand(ChartListType.ToDo, chartId));
        _todoCharts.Remove(chartId);
        
        Snackbar.Add("Chart removed from To Do list", Severity.Success);
    }
    private async Task AddToToDo(Guid chartId)
    {
        await Mediator.Send(new SaveChartToListCommand(ChartListType.ToDo, chartId));
        if (!_todoCharts.Contains(chartId))
        {
            _todoCharts.Add(chartId);
        }
        Snackbar.Add("Chart added to To Do list", Severity.Success);
    }
    private async Task RemoveFromFavorites(Guid chartId)
    {
        await Mediator.Send(new RemoveChartFromListCommand(ChartListType.Favorite, chartId));
        _favoriteCharts.Remove(chartId);
        Snackbar.Add("Chart removed from Favorites", Severity.Success);
    }
    private async Task AddToFavorites(Guid chartId)
    {
        await Mediator.Send(new SaveChartToListCommand(ChartListType.Favorite, chartId));
        if (!_favoriteCharts.Contains(chartId))
        {
            _favoriteCharts.Add(chartId);
        }
        Snackbar.Add("Chart added to Favorites", Severity.Success);
    }
    private string ChartSearch(BestAttemptDto dto)
    {
        var searchString = "Pump It Up "+dto.SongName+" "+dto.DifficultyShorthand;
        return $"https://www.youtube.com/results?search_query={searchString.Replace("%","Percent ").Replace(" ", "+")}";
    }
    private void ShowVideo(string url)
    {
        _currentVideo = url;
        _showVideoDialog = true;
    }
    private async Task CopyShareLink()
    {
        await Javascript.InvokeVoidAsync("navigator.clipboard.writeText", ShareUrl);
        Snackbar.Add("Copied to clipboard!", Severity.Success);
    }

    private async Task LoadCharts(Guid userId)
    {
        _isLoading = true;
        _charts = (await Mediator.Send(new GetBestChartAttemptsQuery(userId))).Select(BestAttemptDto.From).ToArray();
        var videos = (await Mediator.Send(new GetChartVideosQuery())).ToDictionary(cv => cv.ChartId);
        foreach (var chart in _charts.Where(c=>videos.ContainsKey(c.ChartId)))
        {
            chart.VideoUrl = videos[chart.ChartId].VideoUrl.ToString();
        }
        _isLoading = false;
    }
    protected override async Task OnInitializedAsync()
    {
        if (RequestedUserId == null)
        {
            if (!CurrentUser.IsLoggedIn)
            {
                NavManager.NavigateTo("/Login");
                return;
            }
            RequestedUserId = CurrentUser.User.Id;
        }
        await LoadCharts(RequestedUserId.Value);
        if (CurrentUser.IsLoggedIn)
        {
            var chartSaves = (await Mediator.Send(new GetSavedChartsQuery())).ToArray();
            _favoriteCharts = chartSaves.Where(cs => cs.ListType is ChartListType.Favorite).Select(cs => cs.ChartId).Distinct().ToHashSet();
            
            _todoCharts = chartSaves.Where(cs => cs.ListType is ChartListType.ToDo).Select(cs => cs.ChartId).Distinct().ToHashSet();

        }
    }

    private async Task SetScore(BestAttemptDto dto, int? newScore)
    {
        dto.Score = newScore;
        if (string.IsNullOrWhiteSpace(dto.LetterGrade) && newScore != null)
        {
            dto.LetterGrade = LetterGrade.A.ToString();
        }
        await UpdateBest(dto);
    }
    private async Task SetBroken(BestAttemptDto dto, bool newBroken)
    {
        dto.IsBroken = newBroken;
        if (string.IsNullOrWhiteSpace(dto.LetterGrade) && !newBroken)
        {
            dto.LetterGrade = LetterGrade.A.ToString();
        }
        await UpdateBest(dto);
    }
    private async Task SetLetter(BestAttemptDto dto, string newLetterGrade)
    {
        dto.LetterGrade = newLetterGrade;
        if (string.IsNullOrWhiteSpace(newLetterGrade) && !dto.IsBroken)
        {
            dto.IsBroken = true;
        }
        await UpdateBest(dto);
    }
    private async Task UpdateBest(BestAttemptDto dto)
    {
        LetterGrade? letterGrade = Enum.TryParse<LetterGrade>(dto.LetterGrade, out var grade) ? grade : null;
        var chartType = Enum.Parse<ChartType>(dto.ChartType);

        try
        {
            await Mediator.Send(new UpdateBestAttemptCommand(dto.SongName, chartType, dto.Level, letterGrade, dto.IsBroken, dto.Score));

            dto.RecordedOn = letterGrade == null ? null : DateTimeOffset.Now;

            var chartName = $"{dto.SongName} {DifficultyLevel.ToShorthand(chartType,dto.Level)}";

            Snackbar.Add(letterGrade == null ? $"Removed score for {chartName}" : $"Recorded {(dto.IsBroken ? "Broken":"")} {letterGrade} for {chartName}", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add("There was an error while recording the score", Severity.Error);
        }

        
    }

    private enum ScoreState
    {
        Ungraded,
        NotPassed,
        Passed
    }
}
