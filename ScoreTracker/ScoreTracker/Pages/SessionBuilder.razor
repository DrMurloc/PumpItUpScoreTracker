@page "/SessionBuilder"
@using ScoreTracker.Domain.Models
@using ScoreTracker.Domain.ValueTypes
@using ChartType = ScoreTracker.Domain.Enums.ChartType
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Data.Persistence.Entities
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.SecondaryPorts
@using MediatR

<PageTitle>Session Builder</PageTitle>
<MudGrid>
    <MudItem xs="6">
        <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="()=>Configuration=new StaminaSessionConfiguration()">Reset to Default</MudButton>
    </MudItem>
    <MudItem xs="6">
        <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="()=>Configuration=BuildMarchOfMurlocs()">Set to March of Murlocs</MudButton>
    </MudItem>
    <MudItem xs="12">
        <MudSelect T="Guid?" Value="_currentUser" Clearable="true" ValueChanged="SetUser">
            @foreach (var user in _users)
            {
                <MudSelectItem T="Guid?" Value="user.Id">@user.Name.ToString() (@user.Id)</MudSelectItem>
            }
        </MudSelect>
        </MudItem>
</MudGrid>
<br/>
<br/>
<MudExpansionPanels>
    <MudExpansionPanel Text="Levels">
        <MudGrid>
            @foreach (var level in DifficultyLevel.All)
            {
                <MudItem xs="6">
                    <MudNumericField T="int" Min="0" Max="1000000" Label="@level.ToString()" @bind-Value="Configuration.LevelRatings[level]"></MudNumericField>
                </MudItem>
            }
        </MudGrid>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Chart Types">
        <MudGrid>
            @foreach (var chartType in Enum.GetValues<ChartType>())
            {
                <MudItem xs="6">
                    <MudNumericField T="double" Min="0" Max="100" Label="@chartType.ToString()" @bind-Value="Configuration.ChartTypeModifiers[chartType]"></MudNumericField>
                </MudItem>
            }
        </MudGrid>
    </MudExpansionPanel>
    
    <MudExpansionPanel Text="Song Types">
        <MudGrid>
            @foreach (var songType in Enum.GetValues<SongType>())
            {
                <MudItem xs="6">
                    <MudNumericField T="double" Min="0" Max="100" Label="@songType.ToString()" @bind-Value="Configuration.SongTypeModifiers[songType]"></MudNumericField>
                </MudItem>
            }
        </MudGrid>
    </MudExpansionPanel>

    <MudExpansionPanel Text="Letter Grades">
        <MudGrid>
            @foreach (var letterGrade in Enum.GetValues<PhoenixLetterGrade>())
            {
                <MudItem xs="6">
                    <MudNumericField T="double" Min="0" Max="100" Label="@letterGrade.GetName()" @bind-Value="Configuration.LetterGradeModifiers[letterGrade]"></MudNumericField>
                </MudItem>
            }
        </MudGrid>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Plates">
        <MudGrid>
            @foreach (var plate in Enum.GetValues<PhoenixPlate>())
            {
                <MudItem xs="6">
                    <MudNumericField T="double" Min="0" Max="100" Label="@plate.GetName()" @bind-Value="Configuration.PlateModifiers[plate]"></MudNumericField>
                </MudItem>
            }
        </MudGrid>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Extra Settings">
        <MudGrid>
            <MudItem xs="6">
                <MudSwitch T="bool" Label="Adjust Scores to Song Duration" @bind-Checked="Configuration.AdjustToTime" Color="Color.Primary"></MudSwitch>
            </MudItem>
            <MudItem xs="6">
                <MudSwitch T="bool" Label="Allow Repeats" @bind-Checked="Configuration.AllowRepeats" Color="Color.Primary"></MudSwitch>
            </MudItem>
            <MudItem xs="6">
                <MudNumericField T="int" Label="Session Duration (Minutes)" Value="(int)Configuration.MaxTime.TotalMinutes" ValueChanged="m=>Configuration.MaxTime=TimeSpan.FromMinutes(m)"></MudNumericField>
            </MudItem>
        </MudGrid>
    </MudExpansionPanel>
</MudExpansionPanels>
<br/>
<br/>
<MudSwitch Label="Hide Record-less Charts" @bind-Checked="_hideUnRecordedCharts" Color="Color.Primary"></MudSwitch>
<MudDataGrid T="ChartSessionEffectiveness" Items="@Scores">
    <Columns>
        <TemplateColumn T="ChartSessionEffectiveness" Title="Difficulty" Sortable="true" SortBy="x=>x.Level">
            <CellTemplate>
                <MudImage Src="@context.Item.DifficultyBubblePath" Height="35" ObjectFit="ObjectFit.ScaleDown"></MudImage>
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn T="ChartSessionEffectiveness" Title="Song" Sortable="true" SortBy="x=>x.SongName">
            <CellTemplate>
                <MudTooltip Text="@context.Item.SongName">
                    <MudImage Src="@context.Item.SongImage" Height="35" Alt="@context.Item.SongName" Elevation="25" ObjectFit="ObjectFit.ScaleDown" />
                </MudTooltip>
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.Seconds" Title="Seconds" Sortable="true" />
        <PropertyColumn Property="x => x.PointsWithoutScore" Title="Points Pre-Score" Sortable="true" />
        <PropertyColumn Property="x => x.PointsPerSecondPReScore" Title="Points Per Second Pre-Score" Sortable="true" />
        <PropertyColumn Property="x => x.Points" Title="Your Points" Sortable="true"/>
        <PropertyColumn Property="x => x.PointsPerSecond" Title="Your Points per Second" Sortable="true"/>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="ChartSessionEffectiveness" />
    </PagerContent>
</MudDataGrid>
@inject IMediator Mediator
@inject ICurrentUserAccessor CurrentUser;

@code
{
    private StaminaSessionConfiguration BuildMarchOfMurlocs()
    {
        var configuration = new StaminaSessionConfiguration();
        configuration.LetterGradeModifiers[PhoenixLetterGrade.APlus] = .8;
        configuration.LetterGradeModifiers[PhoenixLetterGrade.A] = .6;
        configuration.LetterGradeModifiers[PhoenixLetterGrade.B] = 0;
        configuration.LetterGradeModifiers[PhoenixLetterGrade.C] = 0;
        configuration.LetterGradeModifiers[PhoenixLetterGrade.D] = 0;
        configuration.LetterGradeModifiers[PhoenixLetterGrade.F] = 0;
        configuration.ChartTypeModifiers[ChartType.Single] = 0;
        return configuration;
    }

    private bool _hideUnRecordedCharts = false;
    private StaminaSessionConfiguration Configuration = new StaminaSessionConfiguration();
    private IDictionary<Guid, Chart> _charts = new Dictionary<Guid, Chart>();
    private IDictionary<Guid, RecordedPhoenixScore> _records = new Dictionary<Guid, RecordedPhoenixScore>();
    private User[] _users = Array.Empty<User>();
    private Guid _currentUser = Guid.Empty;

    private IEnumerable<ChartSessionEffectiveness> Scores => _charts.Values.Where(c=>!_hideUnRecordedCharts||_records.ContainsKey(c.Id))
        .Select(c => new ChartSessionEffectiveness
    {
        SongName = c.Song.Name,
        SongImage = c.Song.ImagePath.ToString(),
        DifficultyBubblePath = $"https://piuimages.arroweclip.se/difficulty/{c.DifficultyString.ToLower()}.png",
        Seconds = (int)c.Song.Duration.TotalSeconds,
        PointsWithoutScore = (int)Configuration.GetScorelessScore(c),
        Points = _records.ContainsKey(c.Id) ? Configuration.GetScore(c, _records[c.Id].Score!.Value, _records[c.Id].Plate!.Value) : 0,
        Level = c.Level
    });

    private async Task SetUser(Guid? userId)
    {
        _currentUser = userId ?? (CurrentUser.IsLoggedIn ? CurrentUser.User.Id : _users.First(u => u.Name == "DrMurloc").Id);

        _records = (await Mediator.Send(new GetPhoenixRecordsQuery(_currentUser)))
            .Where(r => r is { Score: not null, Plate: not null }).ToDictionary(c=>c.ChartId);
    }
    protected override async Task OnInitializedAsync()
    {
        _users = (await Mediator.Send(new SearchForUsersQuery("", 1, 1000))).Results.OrderBy(u => u.Name.ToString()).ToArray();

        _charts = (await Mediator.Send(new GetChartsQuery(MixEnum.Phoenix))).ToDictionary(c => c.Id);

        await SetUser(CurrentUser.IsLoggedIn ? CurrentUser.User.Id : _users.First(u => u.Name=="DrMurloc").Id);
    }



        
    private sealed class ChartSessionEffectiveness
    {
        public string SongImage { get; set; }
        public string SongName { get; set; }
        public string DifficultyBubblePath { get; set; } 
        public int Level { get; set; }
        public int Seconds { get; set; }
        public int PointsWithoutScore { get; set; }
        public int Points { get; set; }
        public double PointsPerSecond => (double)Points / (double)Seconds;
        public double PointsPerSecondPReScore => (double)PointsWithoutScore / (double)Seconds;
    }
}
