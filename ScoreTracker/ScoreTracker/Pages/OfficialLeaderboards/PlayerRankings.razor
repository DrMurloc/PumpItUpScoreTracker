@page "/PlayerRankings"
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.Models
@using ScoreTracker.Domain.SecondaryPorts
@using ChartType = ScoreTracker.Domain.Enums.ChartType
@using ScoreTracker.Domain.Records
@using ScoreTracker.Domain.Services.Contracts
@using ScoreTracker.Domain.ValueTypes
@using MediatR
@using ScoreTracker.Application.Queries
@using ScoreTracker.Web.Components
@using ScoreTracker.Web.Pages.OfficialLeaderboards
<PageTitle>Official Leaderboard Search</PageTitle>
<MudText>Users ranked based on their top 50 best charts on the Official Leaderboards. You must be in the top 100 of a 20+ chart to show up on this list.</MudText>
<br/>
<MudText>Note this uses a slightly different rating calculation, it provides partial points between letter grades (I.E halfway between an AA and a AA+ will give 1.025x instead of 1x rating)</MudText>
<br />
<MudText>@L["Last Updated"] - @LeaderboardSearch._lastUpdated.ToLocalTime().ToString()</MudText>
<br />
<MudGrid>
    <MudItem xs="4">
        <MudSelect T="string" Value="_currentType" ValueChanged="SetType" Label="Chart Type">
            @foreach (var key in _records.Keys)
            {
                <MudSelectItem T="string" Value="key">@key</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="8">

        <MudAutocomplete T="string" AdornmentIcon="@Icons.Material.Filled.Search"
                         ResetValueOnEmptyText="true"
                         CoerceText="true"
                         Clearable="true"
                         Label=@L["Username"]
                                                                                                       @bind-Value="_selectedUsername"
                         SearchFunc="(s,c) => Task.FromResult(_usernames.Where(u => u?.Contains(s, StringComparison.OrdinalIgnoreCase)??true))"></MudAutocomplete>
    </MudItem>
</MudGrid>
<br/>
<MudTable T="TableEntry" Items="Records" Breakpoint="Breakpoint.None">
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel T="TableEntry" SortBy="@(e=>e.Place)">Place</MudTableSortLabel>
        </MudTh>
        <MudTh>
            Avatar
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="TableEntry" SortBy="@(e=>e.Record.Username)">Username</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="TableEntry" SortBy="@(e=>e.Record.TotalRating)">Pumbility</MudTableSortLabel>
        </MudTh>
        @if (_currentType == "All")
        {
            <MudTh>
                <MudTableSortLabel T="TableEntry" SortBy="@(e=>e.Record.SinglesCount)">Singles Charts</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel T="TableEntry" SortBy="@(e=>e.Record.SinglesCount)">Doubles Charts</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel T="TableEntry" SortBy="@(e=>e.Record.CompetitiveLevel)">Competitive Level</MudTableSortLabel>
            </MudTh>
        }
        @if (_currentType == "Singles")
        {
            <MudTh>
                <MudTableSortLabel T="TableEntry" SortBy="@(e=>e.Record.SinglesCount)">Charts</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel T="TableEntry" SortBy="@(e=>e.Record.SinglesCompetitiveLevel)">Competitive Level</MudTableSortLabel>
            </MudTh>
        }
        @if (_currentType == "Doubles")
        {
            <MudTh>
                <MudTableSortLabel T="TableEntry" SortBy="@(e=>e.Record.SinglesCount)">Charts</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel T="TableEntry" SortBy="@(e=>e.Record.DoublesCompetitiveLevel)">Competitive Level</MudTableSortLabel>
            </MudTh>
        }
        <MudTh>
            <MudTableSortLabel T="TableEntry" SortBy="@(e=>e.Record.AverageScore)">Average Score</MudTableSortLabel>
        </MudTh>
        </HeaderContent>
    <RowTemplate>
        <MudTd>
            @context.Place
        </MudTd>
        <MudTd>
            
            <MudImage Src="@_userAvatars[context.Record.Username].ToString()" Height="35" ObjectFit="ObjectFit.ScaleDown"></MudImage>
        </MudTd>
        <MudTd>
                @context.Record.Username
        </MudTd>
        <MudTd>
            <MudButton Variant="Variant.Text" OnClick="()=>ShowUserData(context.Record.Username)" StartIcon="@Icons.Material.Filled.Visibility">
                @context.Record.TotalRating
            </MudButton>
        </MudTd>
        @if (_currentType == "All")
        {
            
            <MudTd>
                @context.Record.SinglesCount
            </MudTd>
            <MudTd>
                @context.Record.DoublesCount
            </MudTd>
            <MudTd>
                @context.Record.CompetitiveLevel.ToString("0.000")
            </MudTd>
        }
        @if (_currentType == "Singles")
        {
            <MudTd>
                @context.Record.SinglesCount
            </MudTd>
            <MudTd>
                @context.Record.SinglesCompetitiveLevel.ToString("0.000")
            </MudTd>
        }
        @if (_currentType == "Doubles")
        {
            <MudTd>
                @context.Record.DoublesCount
            </MudTd>
            <MudTd>
                @context.Record.DoublesCompetitiveLevel.ToString("0.000")
            </MudTd>
        }
        <MudTd>
            @context.Record.AverageScore (@context.Record.AverageScore.LetterGrade.GetName())
        </MudTd>
    </RowTemplate>
    <ChildRowContent>
        @if (!string.IsNullOrWhiteSpace(_showingUsername)&&_showingUsername == context.Record.Username)
        {
            <td colspan="@Colspan">
                <MudGrid>
                    @foreach (var entry in _scores)
                    {

                        <MudItem xs="4" sm="3" md="2">
                            <MudCard>
                                <MudCardMedia Height="150" Image="@entry.Chart.Song.ImagePath.ToString()"/>
                                <MudCardContent>
                                    <DifficultyBubble Chart="entry.Chart"></DifficultyBubble>
                                    <MudTooltip Text=@($"{entry.Rating} Rating")>
                                        <MudText>
                                            @entry.Score (@entry.Score.LetterGrade.GetName())
                                        </MudText>
                                    </MudTooltip>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            </td>
        }
    </ChildRowContent>
    <PagerContent>
        <MudTablePager></MudTablePager>
    </PagerContent>
    </MudTable>

@if (_counts.Any())
{
    
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h4">Avatar Leaderboard</MudText>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.h5">Default Avatar</MudText>
            <MudText Typo="Typo.subtitle1">@_defaultCount Uses</MudText>
        </MudItem>
        <MudItem xs="3" sm="2" md="1">
            <MudTooltip Text="@($"{_counts[DefaultPath]} Uses")">
                <MudImage Src="@DefaultPath.ToString()" Height="65" ObjectFit="ObjectFit.ScaleDown"></MudImage>
            </MudTooltip>
        </MudItem>
        @foreach (var category in Enum.GetValues<TierListCategory>().Where(e=>_avatarTierList.ContainsKey(e)))
        {
            <MudItem xs="12">
                <MudText Typo="Typo.h5">@GetTierListName(category)</MudText>
                <MudText Typo="Typo.subtitle1">@_descriptions[category]</MudText>
            </MudItem>
            @foreach (var url in _avatarTierList[category].Reverse())
            {
                <MudItem xs="3" sm="2" md="1">
                    <MudTooltip Text=@($"{_counts[url]} Uses")>
                    
                        <MudImage Src="@url.ToString()" Height="65" ObjectFit="ObjectFit.ScaleDown"></MudImage>
                    </MudTooltip>
                </MudItem>
            }
        }
    </MudGrid>
}
@inject IOfficialLeaderboardRepository Leaderboards;
@inject IWorldRankingService WorldRankings;
@inject IMediator Mediator;
@inject IChartRepository Charts;
@code {
    private int Colspan => _currentType == "All" ? 7 : 6;
    private string _selectedUsername = string.Empty;
    private string[] _usernames = Array.Empty<string>();
    private IEnumerable<TableEntry> Records => _records[_currentType].Where(r => string.IsNullOrWhiteSpace(_selectedUsername) || r.Record.Username == (Name)_selectedUsername);
    private IDictionary<string, TableEntry[]> _records = new Dictionary<string, TableEntry[]>()
    {
        { "All", Array.Empty<TableEntry>() }
    };

    private string _currentType = "All";
    private string _showingUsername = string.Empty;
    private ScoreEntry[] _scores = Array.Empty<ScoreEntry>();
    private IDictionary<Guid, Chart> _charts = new Dictionary<Guid, Chart>();
    private IDictionary<string, Uri> _userAvatars = new Dictionary<string, Uri>();
    private async Task SetType(string type)
    {
        _currentType = type;
        if (!string.IsNullOrWhiteSpace(_showingUsername))
        {
            var username = _showingUsername;
            _showingUsername = string.Empty;
            await ShowUserData(username);
        }
    }
    private async Task ShowUserData(string username)
    {
        if (_showingUsername == username)
        {
            _showingUsername = string.Empty;
            return;
        }
        var scoringConfig = ScoringConfiguration.PumbilityScoring(false);
        _scores = (await WorldRankings.GetTop50(username, _currentType, CancellationToken.None))
            .Select(r => new ScoreEntry(_charts[r.ChartId], r.Score!.Value, (int)scoringConfig.GetScore(_charts[r.ChartId].Level, r.Score!.Value)))
            .ToArray();
        _showingUsername = username;

    }

    private string GetTierListName(TierListCategory category) => category switch {
        TierListCategory.Overrated=>"Ultra Popular",
        TierListCategory.VeryEasy=>"Very Popular",
        TierListCategory.Easy=>"Popular",
        TierListCategory.Medium=>"Mid",
        TierListCategory.Hard=>"Unpopular",
        TierListCategory.VeryHard=>"Very Unpopular",
        TierListCategory.Underrated=>"Ultra Unpopular"

        };

    private static readonly Uri DefaultPath = new Uri("https://piuimages.arroweclip.se/avatars/4f617606e7751b2dc2559d80f09c40bf.png", UriKind.Absolute);
    private IDictionary<TierListCategory, string> _descriptions = Enum.GetValues<TierListCategory>().ToDictionary(e => e, e => "");
    private IDictionary<TierListCategory, IEnumerable<Uri>> _avatarTierList = new Dictionary<TierListCategory, IEnumerable<Uri>>();
    private int _defaultCount = 0;
    private IDictionary<Uri, int> _counts = new Dictionary<Uri, int>();
    protected override async Task OnInitializedAsync()
    {
        _userAvatars = (await Leaderboards.GetUserAvatars(CancellationToken.None)).ToDictionary(au => au.Username, au => au.AvatarPath, StringComparer.OrdinalIgnoreCase);

        var records = (await Leaderboards.GetAllWorldRankings(CancellationToken.None)).ToArray();
        _usernames = records.Select(r => r.Username.ToString()).Distinct().ToArray();
        _records = records.GroupBy(l => l.Type)
            .ToDictionary(l => l.Key, g => g.OrderByDescending(e => e.TotalRating).Select((e, i) => new TableEntry(i + 1, e)).ToArray());

        _charts = (await Mediator.Send(new GetChartsQuery(MixEnum.Phoenix))).ToDictionary(c => c.Id);
        _userAvatars = (await Leaderboards.GetUserAvatars(CancellationToken.None)).ToDictionary(au => au.Username, au => au.AvatarPath, StringComparer.OrdinalIgnoreCase);
        var avatars = await Leaderboards.GetUserAvatars(CancellationToken.None);
        _counts = avatars
            .GroupBy(a => a.AvatarPath).ToDictionary(g => g.Key, g => g.Count());
        
        var standardDeviationCompare =
            StdDev(_counts
                .Where(a=>a.Key!=DefaultPath).Select(s => (double) s.Value), true);
        var averageCompare = _counts.Where(a => a.Key != DefaultPath).Average(s => s.Value);
        var mediumMinCompare = averageCompare - standardDeviationCompare / 2;
        var easyMinCompare = averageCompare + standardDeviationCompare / 2;
        var veryEasyMinCompare = averageCompare + standardDeviationCompare;
        var oneLevelOverratedCompare = averageCompare + standardDeviationCompare * 1.5;
        var hardMinCompare = averageCompare - standardDeviationCompare;
        var veryHardMinCompare = averageCompare - standardDeviationCompare * 1.5;
        _avatarTierList = _counts.Where(kv => kv.Key != DefaultPath).Select(s => (s.Key, s.Value, s.Value > oneLevelOverratedCompare ? TierListCategory.Overrated
            : s.Value > veryEasyMinCompare ? TierListCategory.VeryEasy :
                s.Value > easyMinCompare ? TierListCategory.Easy :
                    s.Value > mediumMinCompare ? TierListCategory.Medium :
                        s.Value > hardMinCompare ? TierListCategory.Hard :
                            s.Value > veryHardMinCompare ? TierListCategory.VeryHard :
                                TierListCategory.Underrated, -1 * (int)s.Value * 100))
            .GroupBy(i => i.Item3)
            .ToDictionary(g => g.Key, g => g.OrderByDescending(i => i.Item4).Select(i => i.Key).ToArray().AsEnumerable());
        _defaultCount = _counts[DefaultPath];
        foreach (var category in _avatarTierList.Keys)
        {
            var min = _avatarTierList[category].Min(c => _counts[c]);
            var max = _avatarTierList[category].Max(c => _counts[c]);
            _descriptions[category] = $"{min} - {max} Uses";
        }
    }

    private sealed record TableEntry(int Place, WorldRankingRecord Record);

    private sealed record ScoreEntry(Chart Chart, PhoenixScore Score, int Rating);
    
    public static double StdDev(IEnumerable<double> values,
        bool as_sample)
    {
    // Get the mean.
        double mean = values.Sum() / values.Count();

    // Get the sum of the squares of the differences
    // between the values and the mean.
        var squares_query =
            from double value in values
            select (value - mean) * (value - mean);
        double sum_of_squares = squares_query.Sum();

        if (as_sample)
        {
            return Math.Sqrt(sum_of_squares / (values.Count() - 1));
        }
        else
        {
            return Math.Sqrt(sum_of_squares / values.Count());
        }
    }
}
