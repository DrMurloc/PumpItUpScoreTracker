@page "/Tournaments"
@using ScoreTracker.Domain.SecondaryPorts
@using MediatR
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.Models
@using ScoreTracker.Domain.Records
<PageTitle>Tournaments</PageTitle>

<MudText Typo="Typo.body1" Color="Color.Warning">Note that tournaments are currently in Beta. Many features here are still super early in development and will lack polish</MudText>

<MudDataGrid T="TournamentRecord" Items="_tournaments">
    <Columns>
        <PropertyColumn T="TournamentRecord" TProperty="string" Property="x => x.Name" Title="Tournament" Sortable="false"></PropertyColumn>
        <TemplateColumn T="TournamentRecord" Title="Start Date" Sortable="true" SortBy="x => x.StartDate ?? DateTimeOffset.MinValue">
            <CellTemplate>
                <MudText>@(context.Item.StartDate?.ToString("D")??"")</MudText>
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn T="TournamentRecord" Title="End Date" Sortable="true" SortBy="x => x.EndDate ?? DateTimeOffset.MaxValue">
            <CellTemplate>
                <MudText>@(context.Item.EndDate?.ToString("D")??"")</MudText>
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn T="TournamentRecord" Title="Rules" Sortable="false">
            <CellTemplate>
                <MudIconButton Disabled="_isLoading" Icon="@Icons.Material.Filled.RuleFolder" OnClick="() => ShowRules(context.Item.Id)"></MudIconButton>
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn T="TournamentRecord" Title="Leaderboard" Sortable="false">
            <CellTemplate>
                <MudIconButton Disabled="_isLoading" Icon="@Icons.Material.Filled.Leaderboard" OnClick="() => ShowLeaderboard(context.Item.Id)"></MudIconButton>
            </CellTemplate>
        </TemplateColumn>
        @if (CurrentUser.IsLoggedIn)
        {
            <TemplateColumn T="TournamentRecord" Title="Submit" Sortable="false">
                <CellTemplate>
                    <MudIconButton Disabled="_isLoading" Icon="@Icons.Material.Filled.Upload" OnClick="() => GoToSubmit(context.Item.Id)"></MudIconButton>
                </CellTemplate>
            </TemplateColumn>
        }
    </Columns>
</MudDataGrid>
<MudDialog @bind-IsVisible="_showRules">
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudText Typo="Typo.h4">@_currentConfig.Name</MudText>
            </MudItem>
            <MudItem xs="12">Start Date: @(_currentConfig.StartDate?.ToString(@"D") ?? "Always")</MudItem>
            <MudItem xs="12">End Date: @(_currentConfig.EndDate?.ToString(@"D") ?? "Never")</MudItem>
            <MudItem xs="12">Players have @(_currentConfig.MaxTime.ToString(@"h\:mm")) to play charts. You are allowed to finish the song you are on when your time runs out. Your total score is total combined score of all charts you play.</MudItem>
            <MudItem xs="6" sm="3">
                <MudMenu Label="Base Level Scores" Variant="Variant.Filled">
                    @foreach (var kv in _currentConfig.LevelRatings.OrderBy(l=>(int)l.Key).Where(kv => kv.Value > 0))
                    {
                        <MudMenuItem>@kv.Key - @kv.Value</MudMenuItem>
                    }
                </MudMenu>
            </MudItem>
            <MudItem xs="6" sm="3">
                <MudMenu Label="Song Types" Variant="Variant.Filled">
                    @foreach (var kv in _currentConfig.SongTypeModifiers.Where(kv => kv.Value > 0))
                    {
                        <MudMenuItem>@kv.Key @(Math.Abs(kv.Value - 1) < .001?"":$"- {@kv.Value}X")</MudMenuItem>
                    }
                </MudMenu>
            </MudItem>
            <MudItem xs="6" sm="3">
                <MudMenu Label="Chart Types" Variant="Variant.Filled">
                    @foreach (var kv in _currentConfig.ChartTypeModifiers.Where(kv => kv.Value > 0))
                    {
                        <MudMenuItem>@kv.Key @(Math.Abs(kv.Value - 1) < .001?"":$"- {@kv.Value}X")</MudMenuItem>
                    }
                </MudMenu>
            </MudItem>
            <MudItem xs="6" sm="3">
                <MudMenu Label="Letter Grades" Variant="Variant.Filled">
                    @foreach (var kv in _currentConfig.LetterGradeModifiers.OrderBy(kv=>kv.Key).Where(kv => kv.Value > 0))
                    {
                        <MudMenuItem>@kv.Key.GetName() @(Math.Abs(kv.Value - 1) < .001?"":$"- {@kv.Value}X")</MudMenuItem>
                    }
                </MudMenu>
            </MudItem>
            <MudItem xs="6" sm="3">
                <MudMenu Label="Plates" Variant="Variant.Filled">
                    @foreach (var kv in _currentConfig.PlateModifiers.OrderBy(kv=>kv.Key).Where(kv => kv.Value > 0))
                    {
                        <MudMenuItem>@kv.Key.GetShorthand() @(Math.Abs(kv.Value - 1) < .001 ? "" : $"- {@kv.Value}X")</MudMenuItem>
                    }
                </MudMenu>
            </MudItem>

            @if (Math.Abs(_currentConfig.StageBreakModifier - 1) > .0001)
            {
                <MudItem xs="12">Broken scores get a multiplier of @_currentConfig.StageBreakModifier</MudItem>
            }
            @if (_currentConfig.AdjustToTime)
            {
                <MudItem xs="12">Songs will have score adjusted based on song length (treating 2 minutes as baseline)</MudItem>
            }
            <MudItem xs="12">
                Repeated charts @(_currentConfig.AllowRepeats ? "are" : "are not") allowed.
            </MudItem>

        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudSpacer></MudSpacer>
        <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Close" OnClick="() => _showRules = false">Close</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="_showLeaderboard">
    <DialogContent>
        <MudDataGrid T="LeaderboardRecord" Items="_leaderboard">
            <Columns>
                <PropertyColumn T="LeaderboardRecord" TProperty="int" Property="l=>l.Place" Sortable="true"></PropertyColumn>
                <PropertyColumn T="LeaderboardRecord" TProperty="string" Property="l=>l.UserName" Sortable="true"></PropertyColumn>
                <PropertyColumn T="LeaderboardRecord" TProperty="int" Property="l=>l.TotalScore" Sortable="true"></PropertyColumn>
            </Columns>
        </MudDataGrid>
    </DialogContent>
    <DialogActions>
        <MudSpacer></MudSpacer>
        <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Close" OnClick="() => _showLeaderboard = false">Close</MudButton>
    </DialogActions>
</MudDialog>
@inject IMediator Mediator
@inject ICurrentUserAccessor CurrentUser;
@inject ITournamentRepository TournamentRepository;
@inject NavigationManager NavManager;
@code
{
    private bool _showRules = false;
    private bool _showLeaderboard = false;
    private bool _isLoading = false;
    private TournamentConfiguration _currentConfig = new TournamentConfiguration();
    private IEnumerable<LeaderboardRecord> _leaderboard = Array.Empty<LeaderboardRecord>();

    private void GoToSubmit(Guid tournamentId)
    {
        NavManager.NavigateTo($"/Tournament/{tournamentId}/Record");
    }
    private async Task ShowLeaderboard(Guid tournamentId)
    {
        _isLoading = true;
        _leaderboard = (await TournamentRepository.GetLeaderboardRecords(tournamentId, CancellationToken.None)).OrderByDescending(l => l.Place).ToArray();
        _isLoading = false;
        _showLeaderboard = true;
    }
    public async Task ShowRules(Guid tournamentId)
    {
        _isLoading = true;
        _currentConfig = await Mediator.Send(new GetTournamentQuery(tournamentId));
        _isLoading = false;
        _showRules = true;
    }
    private IEnumerable<TournamentRecord> _tournaments = Array.Empty<TournamentRecord>();
    protected override async Task OnInitializedAsync()
    {
        _tournaments = (await Mediator.Send(new GetAllTournamentsQuery())).ToArray();
    }
}
