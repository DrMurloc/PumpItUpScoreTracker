@page "/Experiments/SimilarPlayers"
@using ScoreTracker.Domain.Records
@using ScoreTracker.Web.Components
@using ScoreTracker.Web.Dtos
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.SecondaryPorts
@using ChartType = ScoreTracker.Domain.Enums.ChartType
@using ScoreTracker.Application.Queries
@using MediatR
@using ScoreTracker.Application.Handlers
@using ScoreTracker.Domain.Models
@using ScoreTracker.Domain.ValueTypes

<PageTitle>User Matches</PageTitle>
<MudGrid>
    <MudItem xs="12" sm="6">
        <MudSelect T="ChartType" Label="Chart Type" Value="_type" ValueChanged="t=>SetFilters(t,_level)">
            <MudSelectItem T="ChartType" Value="ChartType.Double">Doubles</MudSelectItem>
            <MudSelectItem T="ChartType" Value="ChartType.Single">Singles</MudSelectItem>
        </MudSelect>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudNumericField T="int" Value="_level" ValueChanged="l=>SetFilters(_type,l)" HideSpinButtons="true" Label="Level"></MudNumericField>
    </MudItem>
</MudGrid>
<MudText Typo="Typo.h4">Calculated Tier List</MudText>
@foreach (var category in Enum.GetValues<TierListCategory>().Where(c=>_tierList.ContainsKey(c)))
{
    <br/>
    <MudText Typo="Typo.h5">@category</MudText>
    @foreach (var chart in _tierList[category])
    {
        <MudText Color=@(_myTierList.ContainsKey(chart.Id) && _myTierList[chart.Id].Category != TierListCategory.Unrecorded ? Color.Success : Color.Default)>
            @($"{chart.Song.Name} {chart.DifficultyString} - {_chartWeights[chart.Id]}")
        </MudText>
    }
}
<br/><br/>
<MudText Typo="Typo.h4">Similar Players</MudText>
@foreach (var kv in _userTotals.OrderByDescending(k=>k.Value))
{
    @if (_users[kv.Key].IsPublic)
    {
        <MudCheckBox T="bool" Value="_comparingUsers.Contains(kv.Key)" ValueChanged="v=>ToggleUser(kv.Key,v)" Label=@($"{_users[kv.Key].Name} - {kv.Value}")></MudCheckBox>
    }
    else
    {
        <MudText>@($"Private User - {kv.Value}")</MudText>
    }
}
@if (_users.ContainsKey(CurrentUser.User.Id) && _userTiersLists.ContainsKey(CurrentUser.User.Id))
{

    <MudTable T="Chart" Items="_tierList.Values.SelectMany(c=>c)" Dense="true">
        <HeaderContent>
            <MudTh>Song</MudTh>
            <MudTh>Difficulty</MudTh>
            <MudTh>Final Result</MudTh>
            @foreach (var userId in new[] { CurrentUser.User.Id }.Concat(_comparingUsers))
            {
                <MudTh>@_users[userId].Name</MudTh>
            }
        </HeaderContent>
        <RowTemplate>
            <MudTd>
                <MudTooltip Text="@(context.Song.Name+' '+context.DifficultyString)">
                    <MudImage Src="@context.Song.ImagePath.ToString()" Height="35" Elevation="25" ObjectFit="ObjectFit.ScaleDown" />
                </MudTooltip>
            </MudTd>
            <MudTd>
                <DifficultyBubble Chart="context"></DifficultyBubble>
            </MudTd>
            <MudTd>
                @if (_chartLookup.TryGetValue(context.Id, out var entry))
                {

                    <MudText Style=@($"color:{CategoryColor(entry)}")>
                        @entry.ToString()
                    </MudText>
                }
            </MudTd>
            @foreach (var userId in new[] { CurrentUser.User.Id }.Concat(_comparingUsers))
            {
                <MudTd>
                    @if (_userTiersLists[userId].TryGetValue(context.Id, out var entry))
                    {

                        <MudText Style=@($"color:{CategoryColor(entry.Category)}")>
                            @entry.Category.ToString()
                        </MudText>
                    }
                </MudTd>
            }
        </RowTemplate>
        <PagerContent>
            <MudTablePager></MudTablePager>
        </PagerContent>
    </MudTable>
}
@inject IMediator Mediator;
@inject ICurrentUserAccessor CurrentUser;
@inject NavigationManager NavManager;
@inject ITitleRepository Titles;
@inject ITierListRepository TierLists;
@code
{
    private IDictionary<Guid, int> _userTotals = new Dictionary<Guid, int>();
    private IDictionary<Guid, User> _users = new Dictionary<Guid, User>();
    private IDictionary<Guid, Chart> _charts = new Dictionary<Guid, Chart>();
    private IDictionary<Guid, int> _chartWeights = new Dictionary<Guid, int>();
    private IDictionary<Guid, SongTierListEntry> _myTierList = new Dictionary<Guid, SongTierListEntry>();
    private IDictionary<Guid, IDictionary<Guid, SongTierListEntry>> _userTiersLists = new Dictionary<Guid, IDictionary<Guid, SongTierListEntry>>();

    private void ToggleUser(Guid userId, bool value)
    {
        if (value)
        {
            _comparingUsers.Add(userId);
        }
        else
        {
            _comparingUsers.Remove(userId);
        }
    }
    private string CategoryColor(TierListCategory category) => category switch
    {
        TierListCategory.Overrated=>"#00FFFF",
        TierListCategory.VeryEasy=>"#00FFBB",
        TierListCategory.Easy=>"#00FF55",
        TierListCategory.Medium=>"#00FF00",
        TierListCategory.Hard=>"#55BB00",
        TierListCategory.VeryHard=>"#BB5500",
        TierListCategory.Underrated=>"#FF0000",
        TierListCategory.Unrecorded=>"#888888"
        };
    private ISet<Guid> _comparingUsers = new HashSet<Guid>();
    private int _level = 18;
    private ChartType _type = ChartType.Double;
    private IDictionary<TierListCategory, Chart[]> _tierList = new Dictionary<TierListCategory, Chart[]>();
    private IDictionary<Guid, TierListCategory> _chartLookup = new Dictionary<Guid, TierListCategory>();
    private async Task SetFilters(ChartType type, int level)
    {
        _level = level;
        _type = type;
        await Recalculate();
    }
    private async Task Recalculate()
    {

        _charts = (await Mediator.Send(new GetChartsQuery(MixEnum.Phoenix))).ToDictionary(c => c.Id);

        var myLevel = await Titles.GetCurrentTitleLevel(CurrentUser.User.Id, CancellationToken.None);

        var userIds = (await TierLists.GetUsersOnLevel(myLevel - 1, CancellationToken.None))
            .Concat(await TierLists.GetUsersOnLevel(myLevel, CancellationToken.None))
            .Concat(await TierLists.GetUsersOnLevel(myLevel + 1, CancellationToken.None))
            .Where(u => u != CurrentUser.User.Id);
        var userTiersLists = new Dictionary<Guid, IEnumerable<SongTierListEntry>>();
        _myTierList = (await Mediator.Send(new GetMyRelativeTierListQuery(_type, _level)))
            .ToDictionary(r => r.ChartId);
        _userTiersLists[CurrentUser.User.Id] = _myTierList;
        _chartWeights = new Dictionary<Guid, int>();
        foreach (var userId in userIds)
        {
            userTiersLists[userId] = await Mediator.Send(new GetMyRelativeTierListQuery(_type, _level, userId));
            _userTiersLists[userId] = userTiersLists[userId].ToDictionary(g => g.ChartId);
            var user = await Mediator.Send(new GetUserByIdQuery(userId));
            _users[userId] = user??throw new Exception("Couldn't find user");
        }
        _userTotals = userTiersLists.ToDictionary(kv => kv.Key, kv => kv.Value.Sum(e => _myTierList.ContainsKey(e.ChartId) && _myTierList[e.ChartId].Category != TierListCategory.Unrecorded && e.Category != TierListCategory.Unrecorded ?
            (int)TierListCategory.Unrecorded - (int)Math.Abs(e.Category - _myTierList[e.ChartId].Category)
            : 0));


        foreach (var kv in userTiersLists)
            foreach (var entry in kv.Value.Where(e => e.Category != TierListCategory.Unrecorded))
            {
                if (!_chartWeights.ContainsKey(entry.ChartId))
                {
                    _chartWeights[entry.ChartId] = 0;
                }
                _chartWeights[entry.ChartId] += (TierListCategory.Unrecorded - entry.Category) * _userTotals[kv.Key];
            }
        _tierList = ProcessIntoTierList("Similar Players", _chartWeights).GroupBy(c => c.Category)
            .ToDictionary(g => g.Key, g => g.OrderByDescending(l => l.Order)
                .Select(c => _charts[c.ChartId]).ToArray());

        _chartLookup = _tierList.SelectMany(kv => kv.Value.Select(id => (kv.Key,id))).ToDictionary(kv => kv.id.Id, kv => kv.Key);

    }

    private IEnumerable<SongTierListEntry> ProcessIntoTierList(string tierListName, IDictionary<Guid, int> chartWeights)
    {
        var standardDeviationCompare =
            TierListSaga.StdDev(chartWeights.Select(s => s.Value), false);
        var averageCompare = chartWeights.Average(kv => kv.Value);
        var mediumMinCompare = averageCompare - standardDeviationCompare / 2;
        var easyMinCompare = averageCompare + standardDeviationCompare / 2;
        var veryEasyMinCompare = averageCompare + standardDeviationCompare;
        var oneLevelOverratedCompare = averageCompare + standardDeviationCompare * 1.5;
        var hardMinCompare = averageCompare - standardDeviationCompare;
        var veryHardMinCompare = averageCompare - standardDeviationCompare * 1.5;
        var result = new List<SongTierListEntry>();
        var order = 0;
        foreach (var chart in chartWeights.OrderBy(kv => kv.Value))
        {
            var score = chart.Value;
            var myCategory = TierListCategory.Overrated;
            if (score == 0)
                myCategory = TierListCategory.Unrecorded;
            else if (score < veryHardMinCompare)
                myCategory = TierListCategory.Underrated;
            else if (score < hardMinCompare)
                myCategory = TierListCategory.VeryHard;
            else if (score < mediumMinCompare)
                myCategory = TierListCategory.Hard;
            else if (score < easyMinCompare)
                myCategory = TierListCategory.Medium;
            else if (score < veryEasyMinCompare)
                myCategory = TierListCategory.Easy;
            else if (score < oneLevelOverratedCompare)
                myCategory = TierListCategory.VeryEasy;
            else
                myCategory = TierListCategory.Overrated;
            result.Add(new SongTierListEntry(tierListName, chart.Key, myCategory, order++));
        }
        return result;
    }
    protected override async Task OnInitializedAsync()
    {
        if (!CurrentUser.IsLoggedIn)
        {
            NavManager.NavigateTo("/Login");
            return;
        }
        _users[CurrentUser.User.Id] = CurrentUser.User;
        await Recalculate();
    }
}
