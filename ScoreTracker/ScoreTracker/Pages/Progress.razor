@page "/{RequestedUserId:guid}/Progress"
@page "/Progress"
@using MediatR
@using ScoreTracker.Application.Commands
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.SecondaryPorts
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Web.Dtos
@using System.Collections
@using ScoreTracker.Domain.Models
@using ChartType = MudBlazor.ChartType
<PageTitle>Best Attempts</PageTitle>

<MudPaper>
    <MudToolBar>
        <MudText Typo="Typo.h6">Progress</MudText>
        <MudSpacer></MudSpacer>

        <MudSelect T="SelectedChartsEnum" Label="Chart Type" Value="_selectedCharts" ValueChanged="ChangeSelectedCharts" FullWidth="false" Style="padding-left:30px;">
            <MudSelectItem T="SelectedChartsEnum" Value="SelectedChartsEnum.All"></MudSelectItem>
            <MudSelectItem T="SelectedChartsEnum" Value="SelectedChartsEnum.Singles"></MudSelectItem>
            <MudSelectItem T="SelectedChartsEnum" Value="SelectedChartsEnum.Doubles"></MudSelectItem>
        </MudSelect>
        @if (CurrentUser.IsLoggedIn && CurrentUser.User.IsPublic && CurrentUser.User.Id == RequestedUserId)
        {
            <MudTooltip Text="Share Your Progress Page" Inline="true">
                <MudIconButton Icon="@Icons.Filled.Share" OnClick="() => _showShareDialog = true"></MudIconButton>
            </MudTooltip>
        }
        <br/>
        
    </MudToolBar>
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="Overview">
            <MudDataGrid T="DifficultyOverviewDto" ReadOnly="true" Items="_difficultyOverviews" Height="500px" FixedHeader="true" Striped="true" Loading="@_isLoading">
                <ToolBarContent>
                </ToolBarContent>
                <Columns>
                    <Column T="DifficultyOverviewDto" Field="Difficulty" Title="Difficulty">
                        <FooterTemplate>Total</FooterTemplate>
                    </Column>
                    <Column T="DifficultyOverviewDto" Field="ACount" Title="As" AggregateDefinition="@(new AggregateDefinition<DifficultyOverviewDto> { Type = AggregateType.Sum, DisplayFormat = "{value}" })"></Column>
                    <Column T="DifficultyOverviewDto" Field="SCount" Title="Ss" AggregateDefinition="@(new AggregateDefinition<DifficultyOverviewDto> { Type = AggregateType.Sum, DisplayFormat = "{value}" })"></Column>
                    <Column T="DifficultyOverviewDto" Field="SSCount" Title="SSs" AggregateDefinition="@(new AggregateDefinition<DifficultyOverviewDto> { Type = AggregateType.Sum, DisplayFormat = "{value}" })"></Column>
                    <Column T="DifficultyOverviewDto" Field="SSSCount" Title="SSSs" AggregateDefinition="@(new AggregateDefinition<DifficultyOverviewDto> { Type = AggregateType.Sum, DisplayFormat = "{value}" })"></Column>
                    <Column T="DifficultyOverviewDto" Field="PassedCount" Title="Passed" AggregateDefinition="@(new AggregateDefinition<DifficultyOverviewDto> { Type = AggregateType.Sum, DisplayFormat = "{value}" })"></Column>
                    <Column T="DifficultyOverviewDto" Field="UnpassedCount" Title="Unpassed" AggregateDefinition="@(new AggregateDefinition<DifficultyOverviewDto> { Type = AggregateType.Sum, DisplayFormat = "{value}" })"></Column>
                </Columns>
            </MudDataGrid>
        </MudTabPanel>
        <MudTabPanel Text="Overall Letters">
            <MudChart ChartType="ChartType.Pie" InputData="@_letterCounts.ToArray()" InputLabels="@_letterLabels.ToArray()" Width="40%"/>
        </MudTabPanel>
        <MudTabPanel Text="Overall Passes">
            <MudChart ChartType="ChartType.Pie" InputData="@_passCounts.ToArray()" InputLabels="@_passLabels.ToArray()" Width="40%"/>
        </MudTabPanel>
        <MudTabPanel Text="Difficulty Letters">
            <MudChart ChartType="ChartType.Bar" ChartSeries="@_letterBreakdown" XAxisLabels="@_difficulties" Width="100%" Height="350px"></MudChart>
        </MudTabPanel>
        <MudTabPanel Text="Difficulty Passes">
            <MudChart ChartType="ChartType.Bar" ChartSeries="@_passBreakdown" XAxisLabels="@_difficulties" Width="100%" Height="350px"></MudChart>
        </MudTabPanel>
    </MudTabs>

</MudPaper>

<MudDialog @bind-IsVisible="_showShareDialog">
    <DialogContent>
        <MudText>Use this link to share your chart list to other players.</MudText>
        <br/>
        <MudTextField Value="@ShareUrl" Label="Share Url" Variant="Variant.Outlined" Margin="Margin.Dense" ReadOnly="true"/>
    </DialogContent>
    <DialogActions>
        <MudSpacer></MudSpacer>
        <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Filled.ContentCopy" OnClick="CopyShareLink">Copy To Clipboard</MudButton>
        <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Filled.Close" OnClick="()=>_showShareDialog=false">Close</MudButton>
    </DialogActions>
</MudDialog>

@inject IMediator Mediator
@inject NavigationManager NavManager
@inject ICurrentUserAccessor CurrentUser;
@inject IJSRuntime Javascript;
@inject ISnackbar Snackbar;
@code {
    [Parameter]
    public Guid? RequestedUserId { get; set; }

    private bool _showShareDialog = false;
    private SelectedChartsEnum _selectedCharts = SelectedChartsEnum.All;
    private string ShareUrl => CurrentUser.IsLoggedIn ? $"{NavManager.BaseUri}{CurrentUser.User.Id}/Progress" : string.Empty;

    private bool _isLoading = false;
    private List<ChartSeries> _letterBreakdown = new();
    private List<ChartSeries> _passBreakdown = new();
    private DifficultyOverviewDto[] _difficultyOverviews = Array.Empty<DifficultyOverviewDto>();
    private double[] _letterCounts = Array.Empty<double>();
    private string[] _letterLabels = Array.Empty<string>();

    private double[] _passCounts = Array.Empty<double>();
    private string[] _passLabels = Array.Empty<string>();
    private string[] _difficulties = Enumerable.Range(DifficultyLevel.Min, DifficultyLevel.Max).Select(l=>l.ToString()).ToArray();
    
    private async Task CopyShareLink()
    {
        await Javascript.InvokeVoidAsync("navigator.clipboard.writeText", ShareUrl);
        Snackbar.Add("Copied to clipboard!", Severity.Success);
    }

    private async Task ChangeSelectedCharts(SelectedChartsEnum newType)
    {
        _selectedCharts = newType;
        
        PopulateGraphs();
    }
    private void PopulateGraphs()
    {

        _isLoading = true;
        
        StateHasChanged();
        var difficultyLetters = new Dictionary<DifficultyLevel, IDictionary<LetterGrade, int>>();
        var difficultyUngraded = new Dictionary<DifficultyLevel, int>();
        var difficultyPasses = new Dictionary<DifficultyLevel, IDictionary<bool, int>>();
        foreach (var level in Enumerable.Range(DifficultyLevel.Min, DifficultyLevel.Max))
        {
            difficultyLetters[level] = new Dictionary<LetterGrade, int>();
            foreach (var letter in Enum.GetValues<LetterGrade>())
            {
                difficultyLetters[level][letter] = 0;
            }
            difficultyUngraded[level] = 0;
            difficultyPasses[level] = new Dictionary<bool, int>();
            difficultyPasses[level][true] = 0;
            difficultyPasses[level][false] = 0;
        }

        var difficultyDtos = Enumerable.Range(DifficultyLevel.Min, DifficultyLevel.Max).ToDictionary(l => l, l => new DifficultyOverviewDto
        {
            Difficulty = l
        });

        var scores = _scores;
        if (_selectedCharts == SelectedChartsEnum.Doubles)
        {
            scores = scores.Where(c => c.Chart.Type is Domain.Enums.ChartType.Double or Domain.Enums.ChartType.DoublePerformance).ToArray();
        } else if (_selectedCharts == SelectedChartsEnum.Singles)
        {
            scores = scores.Where(c => c.Chart.Type is Domain.Enums.ChartType.Single or Domain.Enums.ChartType.SinglePerformance).ToArray();
        }
        else
        {
            scores = scores.Where(s => s.Chart.Type != Domain.Enums.ChartType.CoOp).ToArray();
        }
        foreach (var score in scores)
        {
            var level = score.Chart.Level;
            var letter = score.BestAttempt?.LetterGrade;
            var isPass = !(score.BestAttempt?.IsBroken ?? true);
            switch (score.BestAttempt?.LetterGrade)
            {
                case LetterGrade.A:
                    difficultyDtos[score.Chart.Level].ACount++;
                    break;
                case LetterGrade.S:
                    difficultyDtos[score.Chart.Level].SCount++;
                    break;
                case LetterGrade.SS:
                    difficultyDtos[score.Chart.Level].SSCount++;
                    break;
                case LetterGrade.SSS:
                    difficultyDtos[score.Chart.Level].SSSCount++;
                    break;
                case null:
                case LetterGrade.F:
                case LetterGrade.D:
                case LetterGrade.C:
                case LetterGrade.B:
                default:
                    break;
            }
            switch (score.BestAttempt?.IsBroken ?? true)
            {
                case false:
                    difficultyDtos[score.Chart.Level].PassedCount++;
                    break;
                case true:
                    difficultyDtos[score.Chart.Level].UnpassedCount++;
                    break;
            }
            if (letter != null)
            {
                difficultyLetters[level][letter.Value]++;
            }
            else
            {
                difficultyUngraded[level]++;
            }
            difficultyPasses[level][isPass]++;
        }
        _difficultyOverviews = difficultyDtos.Values.OrderByDescending(d=>d.Difficulty).ToArray();
        var letterSeries = new Dictionary<LetterGrade, List<double>>();
        var ungradedSeries = new List<double>();
        var passSeries = new Dictionary<bool, List<double>>();
        foreach (var letter in Enum.GetValues<LetterGrade>())
        {
            letterSeries[letter] = new List<double>();
        }
        passSeries[true] = new List<double>();
        passSeries[false] = new List<double>();
        
        foreach (var difficulty in Enumerable.Range(DifficultyLevel.Min,DifficultyLevel.Max))
        {
            foreach(var letter in difficultyLetters[difficulty].Keys)
            {
                letterSeries[letter].Add(difficultyLetters[difficulty][letter]);
            }
            
            ungradedSeries.Add(difficultyUngraded[difficulty]);
            passSeries[true].Add(difficultyPasses[difficulty][true]);
            passSeries[false].Add(difficultyPasses[difficulty][false]);
        }
        _letterBreakdown = new();
        
        var letterLabels = new List<string>();
        var passLabels = new List<string>();

        var passCounts = new List<double>();
        var letterCounts = new List<double>();

        if (ungradedSeries.Any(v => v >0 ))
        {
            letterLabels.Add("Ungraded");
            letterCounts.Add(ungradedSeries.Sum());
            _letterBreakdown.Add(
                new ChartSeries()
                {
                    Name = "Ungraded", Data = ungradedSeries.ToArray()
                });
        }
        var graphedLetters = new HashSet<LetterGrade>(new[] { LetterGrade.A, LetterGrade.S, LetterGrade.SS, LetterGrade.SSS });
        var lessThanA = new double[DifficultyLevel.Max];
        foreach (var letter in Enum.GetValues<LetterGrade>())
        {
            
            if (!letterSeries[letter].Any(v => v > 0))
                continue;
            letterCounts.Add(letterSeries[letter].Sum());
            letterLabels.Add(letter.ToString());

            if (graphedLetters.Contains(letter))
            {
                _letterBreakdown.Add(new ChartSeries()
                {
                    Name=letter.ToString(),
                    Data=letterSeries[letter].ToArray()
                });
            }
            else
            {
                for (var i = 0; i < letterSeries[letter].Count; i++)
                {
                    lessThanA[i] += letterSeries[letter][i];
                }
            }
        }
        if (lessThanA.Any(c => c > 0))
        {
            _letterBreakdown.Add(new ChartSeries()
            {
                Name="B,C,D,F",
                Data=lessThanA
            });
        }
        passLabels.Add("Unpassed");
        passCounts.Add(passSeries[false].Sum());
        passLabels.Add("Passed");
        passCounts.Add(passSeries[true].Sum());
        _passBreakdown = new List<ChartSeries>()
        {
            new ChartSeries()
            {
                Name = "Pass", Data = passSeries[true].ToArray()
            },
            new ChartSeries()
            {
                Name = "Unpassed", Data = passSeries[false].ToArray()
            }
        };
        _passLabels = passLabels.ToArray();
        _passCounts = passCounts.ToArray();
        _letterLabels = letterLabels.ToArray();
        _letterCounts = letterCounts.ToArray();
        _isLoading = false;

    }

    private IEnumerable<BestChartAttempt> _scores;
    protected override async Task OnInitializedAsync()
    {
        if (RequestedUserId == null)
        {
            if (!CurrentUser.IsLoggedIn)
            {
                NavManager.NavigateTo("/Charts");
                return;
            }
            RequestedUserId = CurrentUser.User.Id;
        }
        _scores = await Mediator.Send(new GetBestChartAttemptsQuery(RequestedUserId.Value));
        PopulateGraphs();
    }
    private enum SelectedChartsEnum{
        All,
        Singles,
        Doubles
    
    }

}
