@page "/Admin"
@using MediatR
@using ScoreTracker.Application.Commands
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.SecondaryPorts
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.Services.Contracts
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Web.Services.Contracts
@using ChartType = ScoreTracker.Domain.Enums.ChartType

<PageTitle>Admin</PageTitle>

<MudButton OnClick="RebuildOfficialLeaderboard">
Do It
</MudButton>
<MudCard>
    <MudButton Disabled="_isReCalculating" OnClick="ReCalculateScores" Color="Color.Primary" Variant="Variant.Filled">ReCalculate Ratings</MudButton>

    @if (_isReCalculating)
    {
        <br />
        <MudProgressLinear Color="Color.Primary" Max="_maxReCalculate" Min="0" Value="@_currentReCalculate"></MudProgressLinear>
    }
</MudCard>
<MudCard>
    <MudCardHeader>Update Chart</MudCardHeader>
    <MudCardContent>
        <MudItem xs="12">
            <MudAutocomplete T="string"
                             @ref="_autocomplete"
                             Value="@_songSearchString"
                             AdornmentIcon="@Icons.Material.Filled.Search"
                             ResetValueOnEmptyText="true"
                             CoerceText="true"
                             Label="Song"
                             SearchFunc="Search"
                             ValueChanged="@SelectSong" MaxItems="100">

            </MudAutocomplete>
        </MudItem>
        @if (Charts.Any())
        {


            <MudItem sm="4" xs="12">
                <MudSelect T="Chart" Label="Chart" Value="_selectedChart" ValueChanged="SelectChart">
                    @foreach (var chart in Charts)
                    {
                        <MudSelectItem Value="chart">@chart.DifficultyString</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        }
        @if (_selectedChart != null)
        {
            <MudItem sm="4" xs="12">
                <MudTextField Label="Video URL" @bind-Value="_videoUrl"></MudTextField>
            </MudItem>
            <MudItem sm="4" xs="12">
                <MudTextField Label="Channel Name" @bind-Value="_videoChannel"></MudTextField>
            </MudItem>
            <MudItem sm="4" xs="12">
                <MudButton Variant="Variant.Filled" Disabled="_isSaving" Color="Color.Primary" OnClick="SaveChart">Save</MudButton>
            </MudItem>
        }
        </MudCardContent>
</MudCard>
<MudCard>
    <MudCardHeader>Create Song</MudCardHeader>
    <MudCardContent>
        <MudGrid>
            <MudItem xs="4">
                <MudTextField T="string" @bind-Value="_songName" Label="Song Name"></MudTextField>
            </MudItem>
            <MudItem xs="4">
                <MudTextField T="string" @bind-Value="_imageUrl" Label="Image Name"></MudTextField>
            </MudItem>
            <MudItem xs="4">
                <MudSelect T="SongType" @bind-Value="_songType" Label="Song Type">
                    @foreach (var type in Enum.GetValues<SongType>())
                    {
                        <MudSelectItem T="SongType" Value="type">@type.ToString()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="3">
                <MudNumericField T="int" Min="0" Max="60" Label="Minutes" @bind-Value="_minutes"></MudNumericField>
            </MudItem>
            <MudItem xs="3">
                <MudNumericField T="int" Min="0" Max="60" Label="Seconds" @bind-Value="_seconds"></MudNumericField>
            </MudItem>
            <MudItem xs="6"></MudItem>
            @foreach (var chart in _newCharts)
            {
                <MudItem xs="3">
                    <MudSelect T="ChartType" @bind-Value="chart.Type" Label="Chart Type">
                        @foreach (var type in Enum.GetValues<ChartType>())
                        {
                            <MudSelectItem T="ChartType" Value="type">@type.ToString()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="3">
                    <MudNumericField T="int" Min="(int)DifficultyLevel.Min" Max="(int)DifficultyLevel.Max" @bind-Value="chart.Level" Label="Level/Players"></MudNumericField>
                </MudItem>
                <MudItem xs="3">
                    <MudTextField T="string" @bind-Value="chart.YoutubeHash" Label="Youtube Hash"></MudTextField>
                </MudItem>
                <MudItem xs="3">
                    <MudTextField T="string" @bind-Value="chart.ChannelName" Label="Channel Name"></MudTextField>
                </MudItem>
            }
            <MudItem xs="12">
                <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="()=>_newCharts.Add(new NewChart())"></MudIconButton>
            </MudItem>
            <MudItem xs="12">
                <MudButton StartIcon="@Icons.Material.Filled.Save" Disabled="_isSaving||!IsValid" OnClick="CreateSong">Create</MudButton>
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>
@inject ICurrentUserAccessor CurrentUser;
@inject IChartRepository _charts;
@inject IOfficialLeaderboardRepository OfficialLeaderboards;
@inject IMediator Mediator;
@inject IUiSettingsAccessor UiSettings;
@inject ISnackbar Snackbar;
@inject NavigationManager NavManager;
@inject ITierListRepository TierLists;
@inject IWorldRankingService WorldRanking;
@code
{
    private MudAutocomplete<string> _autocomplete;
    private Chart? _selectedChart;
    private string _songSearchString = string.Empty;
    private Chart[] Charts = Array.Empty<Chart>();
    private IEnumerable<string> SongNames = Array.Empty<string>();
    private string _videoUrl = string.Empty;
    private string _videoChannel = string.Empty;
    private Task<IEnumerable<string>> Search(string song) =>
        Task.FromResult(SongNames.Where(n => n.ToLower().Contains(song?.ToLower() ?? ""))
            .OrderBy(n => n.Equals(song, StringComparison.OrdinalIgnoreCase) ? 0 : 1).ToArray().AsEnumerable());

    private async Task RebuildOfficialLeaderboard()
    {
        await Mediator.Send(new ProcessChartPopularityCommand());
        //await OfficialLeaderboards.FixRankingOrders(CancellationToken.None);
        await Mediator.Send(new ProcessOfficialLeaderboardsCommand());
        await WorldRanking.CalculateWorldRankings(CancellationToken.None);

    }
    private async Task SelectChart(Chart chart)
    {
        var video = await Mediator.Send(new GetChartVideosQuery(new[] { chart.Id }));
        _selectedChart = chart;
        _videoUrl = video.FirstOrDefault()?.VideoUrl.ToString() ?? string.Empty;
        _videoChannel = video.FirstOrDefault()?.ChannelName.ToString() ?? string.Empty;
    }

    private async Task SaveChart()
    {
        if (_selectedChart==null || !Uri.TryCreate(_videoUrl, UriKind.Absolute, out var url) || !Name.TryParse(_videoChannel, out var channel))
        {
            Snackbar.Add("Video info is not formatted correctly", Severity.Error);
            return;
        }
        _isSaving = true;
        await _charts.SetChartVideo(_selectedChart.Id, url, channel);
        _isSaving = false;
        Snackbar.Add("Chart saved", Severity.Success);
    }
    private async Task SelectSong(string songName)
    {
        songName = songName ?? string.Empty;
        if (_autocomplete.IsOpen)
        {
            await _autocomplete.ToggleMenu();
        }
        _songSearchString = songName;
        _selectedChart = null;
        if (!Name.TryParse(songName, out var name))
        {
            Charts = Array.Empty<Chart>();
            return;
        }

        Charts = (await Mediator.Send(new GetChartsBySongQuery(await UiSettings.GetSelectedMix(), name))).ToArray();

    }
    private bool _isReCalculating = false;
    private int _maxReCalculate = 1;
    private int _currentReCalculate = 0;
    private readonly ICollection<NewChart> _newCharts = new List<NewChart>();
    private string _songName = string.Empty;
    private string _imageUrl = string.Empty;
    private int _minutes = 2;
    private int _seconds = 0;
    private SongType _songType = SongType.Arcade;
    private bool IsValid => Name.TryParse(_songName, out var name) && !string.IsNullOrWhiteSpace(_imageUrl) && _newCharts.Any() && _newCharts.All(c => !string.IsNullOrWhiteSpace(c.YoutubeHash) && Name.TryParse(c.ChannelName, out var channelName));
    private bool _isSaving = false;

    private async Task CreateSong()
    {
        _isSaving = true;
        var songId = await _charts.CreateSong(_songName, new Uri($"https://piuimages.arroweclip.se/songs/{_imageUrl}"), _songType,TimeSpan.FromMinutes(_minutes).Add(TimeSpan.FromSeconds(_seconds)));
        foreach (var chart in _newCharts)
        {
            await _charts.CreateChart(MixEnum.Phoenix, songId, chart.Type, chart.Level, chart.ChannelName,new Uri($"https://www.youtube.com/embed/{chart.YoutubeHash}"));

        }
        _charts.ClearCache();
        _songName = string.Empty;
        _imageUrl = string.Empty;
        _songType = SongType.Arcade;
        _newCharts.Clear();
        _isSaving = false;

    }
    private async Task ReCalculateScores()
    {
        _isReCalculating = true;
        //var ratingsWithVotes = (await Mediator.Send(new GetChartRatingsQuery(MixEnum.Phoenix))).Where(c => c.RatingCount > 0).ToArray();
        var charts = (await Mediator.Send(new GetChartsQuery(MixEnum.Phoenix))).ToArray();
        _maxReCalculate = charts.Length;
        _currentReCalculate = 1;
        /*foreach (var rating in ratingsWithVotes)
        {
            await Mediator.Send(new ReCalculateChartRatingCommand(MixEnum.XX, rating.ChartId));
            _currentReCalculate++;
            StateHasChanged();
        }*/

        foreach (var chart in charts)
        {
            await Mediator.Send(new ReCalculateChartRatingCommand(MixEnum.Phoenix, chart.Id));
            _currentReCalculate++;
            StateHasChanged();
        }
        _isReCalculating = false;
    }
    protected override async Task OnInitializedAsync()
    {
        if (!CurrentUser.User.IsAdmin)
        {
            NavManager.NavigateTo("/");
        }
        SongNames = (await Mediator.Send(new GetChartsQuery(await UiSettings.GetSelectedMix()))).Select(c => c.Song.Name.ToString()).Distinct().ToArray();
    }

    private sealed class NewChart
    {
        public ChartType Type { get; set; } = ChartType.Single;
        public int Level { get; set; } = 14;
        public string ChannelName { get; set; } = "펌프잇업공식PUMP IT UP Official";
        public string YoutubeHash { get; set; } = string.Empty;

    }
}
