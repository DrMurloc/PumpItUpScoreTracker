@page "/Tournament/Stamina/{TournamentId:guid}"
@using ScoreTracker.Domain.SecondaryPorts
@using ScoreTracker.Domain.Records
@using ScoreTracker.Domain.Models
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Web.Components
<PageTitle>Tournament</PageTitle>
@if (_isLoaded)
{
    
    <MudText Typo="Typo.h3">@_configuration.Name</MudText>
    <br/>
    @if (_configuration.IsActive)
    {
        <MudButton Href=@($"/Tournament/Stamina/{TournamentId}/Record") Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit">Record Session</MudButton>
    }
    <br/>
    <MudSwitch Label="Show Extra Info" @bind-Checked="_showExtraData" Color="Color.Primary"></MudSwitch>
    <br/>
    <MudTable T="LeaderboardRecord" Items="_leaderboard" FixedHeader="true" Striped="true">
        <HeaderContent>
            <MudTh><MudTableSortLabel T="LeaderboardRecord" SortBy="e=>e.Place">Place</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="LeaderboardRecord" SortBy="e=>e.UserName">Player</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="LeaderboardRecord" SortBy="e=>e.TotalScore">Score</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="LeaderboardRecord" SortBy="e=>e.ChartsPlayed">Chart Count</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="LeaderboardRecord" SortBy="e=>e.AverageDifficulty">Difficulty Range</MudTableSortLabel></MudTh>
            @if (_showExtraData)
            {
                <MudTh><MudTableSortLabel T="LeaderboardRecord" SortBy="e=>e.AverageDifficulty">Average Difficulty</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="LeaderboardRecord" SortBy="e=>(int)e.AverageScore">Average Score</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="LeaderboardRecord" SortBy="e=>e.AveragePlate">Average Plate</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="LeaderboardRecord" SortBy="e=>e.PassRate">Pass Rate</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="LeaderboardRecord" SortBy="e=>e.TotalRestTime">Rest Time</MudTableSortLabel></MudTh>
            }
            <MudTh>Verification</MudTh>
            @if (CurrentUser.IsLoggedInAsAdmin && _showExtraData)
            {
                <MudTh>Edit</MudTh>
            }
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Place</MudTd>
            <MudTd>@context.UserName</MudTd>
            <MudTd>@context.TotalScore</MudTd>
            <MudTd><MudButton StartIcon="@Icons.Material.Filled.ViewList" Color="Color.Primary" Variant="Variant.Outlined" Disabled="_isLoadingUser" OnClick="()=>ShowUserCharts(context.UserId)">@context.ChartsPlayed Charts</MudButton></MudTd>
            <MudTd>@context.LowestLevel - @context.HighestLevel</MudTd>
            @if (_showExtraData)
            {
                <MudTd>@TwoDecimalPlaces(context.AverageDifficulty)</MudTd>
                <MudTd>@context.AverageScore (@context.AverageScore.LetterGrade.GetName())</MudTd>
                <MudTd>@context.AveragePlate.GetShorthand()</MudTd>
                <MudTd>@TwoDecimalPlaces((double)context.PassRate*100.0)</MudTd>
                <MudTd>@RestTime(context.TotalRestTime)</MudTd>
            }
            <MudTd>
                @if (context.NeedsApproval)
                {
                    <MudText>Pending</MudText>
                    
                }
                else
                {
                    @switch (context.VerificationType)
                    {
                        case SubmissionVerificationType.Unverified:
                            <MudText>None</MudText>
                            break;
                        case SubmissionVerificationType.Photo:
                            <MudButton StartIcon="@Icons.Material.Filled.PhotoLibrary" Color="Color.Primary" OnClick="()=>ShowPhotos(context.UserId)">Photos</MudButton>
                            break;
                        case SubmissionVerificationType.Video:
                            <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.MusicVideo" Href="@(context.VideoUrl?.ToString()??"")" Target="_blank">Video</MudButton>
                            break;
                        case SubmissionVerificationType.InPerson:
                            @if (context.VideoUrl != null)
                            {
                                <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.MusicVideo" Href="@(context.VideoUrl?.ToString()??"")" Target="_blank">In Person</MudButton>
                            }
                            else
                            {
                                <MudText>In Person</MudText>
                            }
                            break;
                        default:
                            break;
                    }
                }
            </MudTd>
            @if (CurrentUser.IsLoggedInAsAdmin && _showExtraData)
            {
                <MudTd>
                    <MudButton Href="@UserSessionlink(context.UserId)" Color="Color.Primary" Variant="Variant.Filled">Edit</MudButton>
                </MudTd>
            }
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
        <ChildRowContent>
            <MudTr>
                <td colspan="@(_showExtraData?11:6)">
                    @if (_showingSession != null && _showingSession.UsersId == context.UserId)
                    {
                        <MudGrid>
                            @foreach (var entry in _showingSession.Entries)
                            {

                                <MudItem xs="6" sm="3" md="2">
                                    <MudCard>
                                        <MudCardMedia Height="100" Image="@entry.Chart.Song.ImagePath.ToString()"/>
                                        <MudCardContent>
                                            <MudText>@entry.Chart.DifficultyString</MudText>
                                            <MudText>@entry.Score</MudText>
                                            <MudText>@entry.Score.LetterGrade.GetName() @entry.Plate.GetShorthand()</MudText>
                                            @if (entry.IsBroken)
                                            {
                                                <MudText>Broken</MudText>
                                            }
                                            <MudText>
                                                @entry.SessionScore Points
                                            </MudText>
                                            <MudText>
                                                @(TwoDecimalPlaces(entry.SessionScore / (double)entry.Chart.Song.Duration.TotalSeconds)) PPS
                                            </MudText>
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>
                            }
                        </MudGrid>
                    }
                </td>
            </MudTr>
        </ChildRowContent>
    </MudTable>
    <br/>
    <MudText Typo="Typo.h3">Chart Statistics</MudText>
    <br/>
    <MudTable T="ChartStatistics" Items="_chartStats" FixedHeader="true" Striped="true">
        <HeaderContent>
            <MudTh><MudTableSortLabel T="ChartStatistics" SortBy="e=>e.Chart.Song.Name">Song</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="ChartStatistics" SortBy="e=>e.Chart.Level">Difficulty</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="ChartStatistics" SortBy="e=>e.PlayCount">Play Count</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="ChartStatistics" SortBy="e=>(int)e.AverageScore">Average Score</MudTableSortLabel></MudTh>
            <MudTh>Best Score</MudTh>
        </HeaderContent>
        <RowTemplate>

            <MudTd>
                <MudTooltip Text="@context.Chart.Song.Name">
                    <MudImage Src="@context.Chart.Song.ImagePath.ToString()" Height="35" Alt="@context.Chart.Song.Name" Elevation="25" ObjectFit="ObjectFit.ScaleDown"/>
                </MudTooltip>

            </MudTd>
            <MudTd>
                <DifficultyBubble Chart="context.Chart"></DifficultyBubble>

            </MudTd>
            <MudTd><MudButton StartIcon="@Icons.Material.Filled.ViewList" Color="Color.Primary" Variant="Variant.Outlined" OnClick="()=>ToggleBoard(context.Chart.Id)">@context.PlayCount Plays</MudButton></MudTd>
            <MudTd>@context.AverageScore</MudTd>
            <MudTd>@context.Scores.First()</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
        <ChildRowContent>
            <MudTr>
                <td colspan="5">
                    @if (_showingChartBoard==context.Chart.Id)
                    {
                        @foreach (var score in context.Scores)
                        {
                            <MudText>@score</MudText><br/>
                        }
                    }
                </td>
            </MudTr>
        </ChildRowContent>
    </MudTable>
}
<MudDialog @bind-IsVisible="_showPhotoDialog">
    <DialogContent>
        @if (_photoSession != null)
        {
            <MudGrid>
                @foreach (var item in _photoSession.PhotoUrls)
                {
                    <MudItem xs="6" sm="4" md="3">
                        <MudImage Src="@item.ToString()" ObjectFit="ObjectFit.Contain" Height="200"></MudImage>
                    </MudItem>
                }
            </MudGrid>
        }
    </DialogContent>
    <DialogActions>
        <MudSpacer></MudSpacer>
        <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Close" OnClick="() => _showPhotoDialog = false">Close</MudButton>
    </DialogActions>
</MudDialog>
@inject ITournamentRepository TournamentRepository;
@inject ICurrentUserAccessor CurrentUser;
@inject NavigationManager NavManager;
@code
{
    private IEnumerable<LeaderboardRecord> _leaderboard = Array.Empty<LeaderboardRecord>();
    private string RestTime(TimeSpan time) => time.ToString(@"h\:mm\:ss");
    private string TwoDecimalPlaces(double value) => $"{value:F2}";
    private TournamentConfiguration _configuration = new TournamentConfiguration(new ScoringConfiguration());
    private bool _isLoaded = false;
    private bool _isLoadingUser = false;
    private bool _showPhotoDialog = false;
    private bool _showExtraData = false;
    private TournamentSession? _photoSession;
    private TournamentSession? _showingSession = null;
    private string UserSessionlink(Guid userId) => $"/Tournament/Stamina/{TournamentId}/Record?UserId={userId}";
    private Guid? _showingChartBoard = null;

    private void ToggleBoard(Guid chartId)
    {
        if (_showingChartBoard == chartId)
        {
            _showingChartBoard = null;
        }
        else
        {
            _showingChartBoard = chartId;
        }
    }
    private ChartStatistics[] _chartStats = Array.Empty<ChartStatistics>();

    private sealed class ChartStatistics
    {
        public Chart Chart { get; set; }
        public int PlayCount { get; set; }
        public string[] Scores { get; set; }
        public PhoenixScore AverageScore { get; set; }
    }
    private async Task ShowPhotos(Guid userId)
    {
        _isLoadingUser = true;
        _photoSession = await TournamentRepository.GetSession(TournamentId, userId, CancellationToken.None);
        _showPhotoDialog = true;
        _isLoadingUser = false;
    }
    private async Task ShowUserCharts(Guid showingUser)
    {
        if (_showingSession != null && _showingSession.UsersId == showingUser)
        {
            _showingSession = null;
            return;
        }
        _isLoadingUser = true;
        _showingSession = await TournamentRepository.GetSession(TournamentId, showingUser, CancellationToken.None);
        _isLoadingUser = false;
    }
    [Parameter] public Guid TournamentId { get; set; }
    protected override async Task OnInitializedAsync()
    {
        _configuration = await TournamentRepository.GetTournament(TournamentId,CancellationToken.None);
        _leaderboard = (await TournamentRepository.GetLeaderboardRecords(TournamentId, CancellationToken.None)).OrderBy(l => l.Place).ToArray();
        _chartStats=_leaderboard.SelectMany(l => l.Session.Entries.Select(e => (e ,l.UserName))).GroupBy(e => e.e.Chart.Id).Select(chartGroup => new ChartStatistics
        {
            Chart = chartGroup.First().e.Chart, AverageScore = (int)chartGroup.Average(c => (int)c.e.Score), Scores = chartGroup.OrderByDescending(v => (int)v.e.Score).Select(v => $"{v.UserName} ({v.e.Score})").ToArray(), PlayCount = chartGroup.Count()
            }).OrderByDescending(c => c.PlayCount).ToArray();
        _isLoaded = true;
    }
}
