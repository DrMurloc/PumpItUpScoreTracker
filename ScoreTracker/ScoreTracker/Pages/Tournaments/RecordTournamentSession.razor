@page "/Tournament/Stamina/{TournamentId:guid}/Record"
@using ScoreTracker.Domain.SecondaryPorts
@using MediatR
@using ScoreTracker.Application.Queries
@using ScoreTracker.Data.Persistence.Entities
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.Models
@using ScoreTracker.Domain.Records
@using ScoreTracker.Domain.ValueTypes
@using System.Security.Authentication
@using ScoreTracker.Web.Components

<PageTitle>Submit Tournament Session</PageTitle>
@if (CurrentUser.IsLoggedIn && CurrentUser.User.IsAdmin && _session!=null)
{
    <MudTextField T="string" Value="_session.UsersId.ToString()" ValueChanged="SetUser"  Label="User Id"></MudTextField>
}
@if (_session != null)
{
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h4">Build Session - @_session.TotalScore Total Points</MudText>
        </MudItem>
        @foreach (var entry in _session.Entries)
        {
            <MudItem xs="6" sm="3" md="2">
                <MudCard Class="chart-card">

                    <MudCardHeader Style=@($"background-image:url(\"{entry.Chart.Song.ImagePath}\");")>
                        <DifficultyBubble Chart="entry.Chart"></DifficultyBubble>
                    </MudCardHeader>
                    <MudCardContent>
                        <ScoreBreakdown Text="@entry.SessionScore.ToString("N0")" Score="entry.Score" Plate="entry.Plate"></ScoreBreakdown>
                    </MudCardContent>
                    <MudCardActions>
                        <MudTooltip Text="Remove">
                            <MudIconButton Disabled="_isSaving" Icon="@Icons.Material.Filled.Delete" OnClick="@(() => _session.Remove(entry))"></MudIconButton>
                        </MudTooltip>
                        <MudSpacer></MudSpacer>
                        <MudTooltip Text="Edit">
                            <MudIconButton Disabled="_isSaving" Icon="@Icons.Material.Filled.Edit" OnClick="(() => EditEntry(entry))"></MudIconButton>
                        </MudTooltip>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
        <MudItem xs="6" sm="3" md="2">
            <MudButton Disabled="_isSaving" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Variant="Variant.Outlined" OnClick="ShowAddDialog">Add Chart</MudButton>
        </MudItem>
        <MudItem xs="12">
        </MudItem>
        <MudItem xs="12" sm="5" md="3">
            <MudTextField T="string" @bind-Value="_username" InputType="InputType.Email" Label=@L["Username"] Disabled="_isImporting"></MudTextField>
        </MudItem>
        <MudItem xs="12" sm="5" md="3">
            <MudTextField T="string" @bind-Value="_password" InputType="InputType.Password" Label=@L["Password"] Disabled="_isImporting"></MudTextField>
        </MudItem>
        <MudItem xs="12" sm="2">
            @if (_isImporting)
            {
                <MudProgressCircular Indeterminate="true" Color="Color.Primary"></MudProgressCircular>
            }
            else
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ImportSession">@L["Import"]</MudButton>
            }
        </MudItem>
    </MudGrid>
    <MudGrid>
        <MudItem xs="6">
            <MudSelect T="SubmissionVerificationType" Label="Verification Type" Value="_session.VerificationType" ValueChanged="t=>_session.SetVerificationType(t)">
                <MudSelectItem T="SubmissionVerificationType" Value="SubmissionVerificationType.Unverified">Unverified</MudSelectItem>
                <MudSelectItem T="SubmissionVerificationType" Value="SubmissionVerificationType.Photo">Photos</MudSelectItem>
                <MudSelectItem T="SubmissionVerificationType" Value="SubmissionVerificationType.Video">Video</MudSelectItem>
                @if (CurrentUser.IsLoggedIn && CurrentUser.User.IsAdmin)
                {
                    <MudSelectItem T="SubmissionVerificationType" Value="SubmissionVerificationType.InPerson">In Person</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="6">
            @if (_session.VerificationType is SubmissionVerificationType.Photo or SubmissionVerificationType.Video)
            {
                <MudItem xs="6">
                @if (!CurrentUser.User.IsAdmin)
                {
                        <MudText>Status: @(_session.NeedsApproval ? "Pending Approval" : "Approved!")</MudText>
                
                }
                else
                {
                    @if (_session.NeedsApproval)
                    {
                        <MudButton StartIcon="@Icons.Material.Filled.Approval" Color="Color.Primary" Variant="Variant.Filled" OnClick="() => _session.Approve()">Approve</MudButton>
                    }
                    else
                    {
                        <MudText>Approved!</MudText>
                    }
                }
                </MudItem>
            }
        </MudItem>
        @if (_session.VerificationType is SubmissionVerificationType.Video or SubmissionVerificationType.InPerson)
        {
            <MudItem xs="12">
                <MudTextField T="string" @bind-Value="_videoUrl" Required="_session.VerificationType==SubmissionVerificationType.Video" AdornmentIcon="@Icons.Material.Filled.VideoFile" Label="Video URL"></MudTextField>
            </MudItem>
        }
        @if (_session.VerificationType == SubmissionVerificationType.Photo)
        {
            @foreach (var photo in _session.PhotoUrls)
            {
                <MudItem xs="6" sm="3" md="2">
                    <MudCard>
                        <MudCardMedia Height="100" Image="@photo.ToString()" />
                        <MudCardActions>
                            <MudTooltip Text="Remove">
                                <MudIconButton Disabled="_isSaving" Icon="@Icons.Material.Filled.Delete" OnClick="@(()=>_session.RemovePhoto(photo))"></MudIconButton>
                            </MudTooltip>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
            if (_isUploadingPhoto)
            {
                <MudItem xs="6" sm="3" md="2">
                    <MudProgressCircular Indeterminate="true" Color="Color.Primary"></MudProgressCircular>
                </MudItem>
            }
            <MudItem xs="6" sm="3" md="2">
                <MudFileUpload T="IReadOnlyList<IBrowserFile>" Disabled="_isUploadingPhoto" Accept=".png, .gif, .jpg, .jpeg," FilesChanged="UploadFiles">
                    <ButtonTemplate>
                        <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.CloudUpload"
                                   for="@context">
                            Upload Images
                        </MudButton>
                    </ButtonTemplate>
                </MudFileUpload>
            </MudItem>
        }
        <MudItem xs="12">
            <MudButton Disabled="_isSaving" StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary" Variant="Variant.Outlined" OnClick="Save">Save</MudButton>
        </MudItem>
        <MudItem xs="12">
            <MudText>Clicking save will make your score public on the leaderboard, even if your profile is set to private. Once approved all Photos and Videos will be public as well.</MudText>
        </MudItem>
    </MudGrid>
    <MudDialog @bind-IsVisible="_showAddDialog">
        <DialogContent>
            <MudGrid>
                <MudItem xs="12">
                    <MudAutocomplete T="string"
                                     @ref="_autocomplete"
                                     Value="@_songSearchString"
                                     AdornmentIcon="@Icons.Material.Filled.Search"
                                     ResetValueOnEmptyText="true"
                                     CoerceText="true"
                                     Label="Song"
                                     SearchFunc="Search"
                                     ValueChanged="@SelectSong" MaxItems="100">

                    </MudAutocomplete>
                </MudItem>
                <MudItem sm="4" xs="12">
                    <MudSelect T="Chart" Label="Chart" @bind-Value="_selectedChart">
                        @foreach (var chart in Charts)
                        {
                            <MudSelectItem Value="chart">@chart.DifficultyString</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem sm="4" xs="12">
                    <MudNumericField T="int" Label="Score" @bind-Value="_score" Min="0" Max="1000000" Variant="Variant.Text" Clearable="false" HideSpinButtons="true"></MudNumericField>
                </MudItem>
                <MudItem sm="4" xs="12">

                    <MudSelect T="PhoenixPlate" Label="Plate" @bind-Value="_plate" Margin="@Margin.Dense">
                        @foreach (var plate in Enum.GetValues<PhoenixPlate>())
                        {
                            <MudSelectItem T="PhoenixPlate" Value="@plate">@plate.GetName()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                
                <MudItem sm="4" xs="12">
                    <MudCheckBox T="bool" @bind-Checked="@_isBroken" Label="Broken"></MudCheckBox>
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudSpacer></MudSpacer>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="AddChart" Disabled="_selectedChart==null">Add</MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Close" OnClick="() => _showAddDialog = false">Close</MudButton>
        </DialogActions>
    </MudDialog>

    <MudDialog @bind-IsVisible="_showEditDialog">
        <DialogContent>
            @if (_editingEntry != null)
            {
                <MudGrid>
                    <MudItem xs="12">
                        <MudText>@_editingEntry.Chart.Song.Name @_editingEntry.Chart.DifficultyString</MudText>
                    </MudItem>
                    <MudItem sm="4" xs="12">
                        <MudNumericField T="int" Label="Score" Value="(int)_editScore" ValueChanged="v=>_editScore=v
    =v" Min="0" Max="1000000" Variant="Variant.Text" Clearable="false" HideSpinButtons="true"></MudNumericField>
                    </MudItem>
                    <MudItem sm="4" xs="12">

                        <MudSelect T="PhoenixPlate" Label="Plate" @bind-Value="_editPlate" Margin="@Margin.Dense">
                            @foreach (var plate in Enum.GetValues<PhoenixPlate>())
                            {
                                <MudSelectItem T="PhoenixPlate" Value="@plate">@plate.GetName()</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem sm="4" xs="12">
                        <MudCheckBox T="bool" @bind-Checked="@_editBroken" Label="Broken"></MudCheckBox>
                    </MudItem>
                </MudGrid>
            }
        </DialogContent>
        <DialogActions>
            <MudSpacer></MudSpacer>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" OnClick="UpdateEntry">Save</MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Close" OnClick="() => _showEditDialog=false">Close</MudButton>
        </DialogActions>
    </MudDialog>
    <MudDialog @bind-IsVisible="_showImportDialog">
        <DialogContent>
            <MudGrid>
                @if (_notMapped.Any())
                {
                    <MudItem xs="12">
                        <MudText Color="Color.Warning">
                            The following charts could not be automatically mapped from your import and will need to be manually added:
                        </MudText>
                    </MudItem>
                    @foreach (var misMatch in _notMapped)
                    {
                        <MudItem xs="12">
                            @misMatch
                        </MudItem>
                    }
                }
                <MudItem xs="12">
                    <MudText Color="Color.Info">
                        Please check your FIRST and LAST chart in the session:
                    </MudText>
                </MudItem>
                
                @for (var i = 0; i < _importedScores.Length; i++)
                {
                    var loc = i;
                    var score = _importedScores[loc];
                    <MudItem xs="2">
                        <MudCheckBox @bind-Value="_checked[loc]" Disabled="!_checked[loc] && _checked.Count(c=>c)>=2"></MudCheckBox>
                    </MudItem>
                    <MudItem xs="5">
                        @score.Chart.Song.Name @score.Chart.Type.GetShortHand()@score.Chart.Level
                    </MudItem>
                    <MudItem xs="5">
                        @score.Score @score.Plate.GetShorthand()
                    </MudItem>
                }
            </MudGrid>
        </DialogContent>
        <DialogActions>
        <MudSpacer></MudSpacer>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" Disabled="_checked.Count(c=>c)<2" OnClick="AddImports">@L["Add Scores"]</MudButton>
        <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Close" OnClick="() => _showImportDialog=false">@L["Close"]</MudButton>
        </DialogActions>
    </MudDialog>
}
@inject IMediator Mediator
@inject ICurrentUserAccessor CurrentUser;
@inject ITournamentRepository TournamentRepository;
@inject IFileUploadClient FileUpload;
@inject NavigationManager NavManager;
@inject ISnackbar Snackbar;
@inject ILogger<RecordTournamentSession> Logger;
@inject IAdminNotificationClient Notifications;
@inject IOfficialSiteClient OfficialSite;
@code
{
    private string _validation = "Unverified";
    private string _videoUrl = string.Empty;
    public Uri? VideoUrl => Uri.TryCreate(_videoUrl, UriKind.Absolute, out var result) ? result : null;
    private MudAutocomplete<string> _autocomplete;
    [Parameter] public Guid TournamentId { get; set; }
    [Parameter][SupplyParameterFromQuery(Name = "UserId")] public Guid? UserId { get; set; }
    private PhoenixPlate _plate = PhoenixPlate.MarvelousGame;
    private bool _isBroken = false;
    private bool _isUploadingPhoto = false;
    private int _score = 0;
    private TournamentSession? _session;
    private TournamentConfiguration _configuration = new TournamentConfiguration(new ScoringConfiguration());
    private IEnumerable<Chart> _allCharts = Array.Empty<Chart>();
    private Chart? _selectedChart;
    private string _songSearchString = string.Empty;
    private bool _showImportDialog = false;
    private Chart[] Charts = Array.Empty<Chart>();
    private IEnumerable<Chart> ValidCharts => _allCharts.Where(c => _session?.CanAdd(c) ?? false);
    private IEnumerable<string> SongNames => ValidCharts.Select(c => c.Song.Name.ToString()).Distinct(StringComparer.OrdinalIgnoreCase);
    private bool _showAddDialog = false;
    private bool _isSaving = false;
    private Task<IEnumerable<string>> Search(string song) =>
        Task.FromResult(SongNames.Where(n => n.ToLower().Contains(song?.ToLower()??""))
            .OrderBy(n=>n.Equals(song,StringComparison.OrdinalIgnoreCase)?0:1).ToArray().AsEnumerable());

        private const long MaxFileSize = 20000000;
    private TournamentSession.Entry? _editingEntry;
    private bool _showEditDialog = false;
    private OfficialRecordedScore[] _importedScores = Array.Empty<OfficialRecordedScore>();
    private IEnumerable<string> _notMapped = Array.Empty<string>();
    private bool[] _checked = Array.Empty<bool>();
    private bool _editBroken = false;
    private PhoenixScore _editScore = 0;
    private PhoenixPlate _editPlate = PhoenixPlate.MarvelousGame;
    private bool _isImporting = false;
    private string _username = string.Empty;
    private string _password = string.Empty;

    private void AddImports()
    {
        var start = _checked.Select((c, i) => (c,i)).First(c => c.c).i;
        var end = _checked.Select((c, i) => (c,i)).Last(c => c.c).i;
        for (var i = start; i <= end; i++)
        {
            var record = _importedScores[i];
            _session?.Add(record.Chart, record.Score, record.Plate, record.IsBroken);
        }
        _showImportDialog = false;
        Snackbar.Add("Session Imported Successfully!");
    }
    private async Task ImportSession()
    {
        _isImporting = true;
        try
        {
            var results = await OfficialSite.GetRecentScores(_username, _password, CancellationToken.None);
            _importedScores = results.results.Where(s=>_configuration.Scoring.GetScore(s.Chart,s.Score,s.Plate,s.IsBroken)>0).ToArray();
            _notMapped = results.nonMapped.ToArray();
            _checked = _importedScores.Select(r => false).ToArray();
            _showImportDialog = true;
        }
        catch (InvalidCredentialException)
        {
            Snackbar.Add("It appears your username are password are incorrect, check them and try again", Severity.Error);
        }
        catch (Exception)
        {
            Snackbar.Add("There was an unknown error when trying to import your scores. If this persists notify DrMurloc.", Severity.Error);
        }
        _isImporting = false;
    }
    private void UpdateEntry()
    {
        if (_editingEntry == null || _session==null)
        {
            return;
        }
        _session.Swap(_editingEntry,_editScore,_editPlate,_editBroken);
        _editingEntry = null;
        _showEditDialog = false;
    }
    private void EditEntry(TournamentSession.Entry entry)
    {
        _editingEntry = entry;
        _editBroken = entry.IsBroken;
        _editScore = entry.Score;
        _editPlate = entry.Plate;
        _showEditDialog = true;
    }
    private async Task UploadFiles(IReadOnlyList<IBrowserFile> files)
    {
        if (_session == null)
        {
            return;
        }
        var hasOversizedFile = false;
        var hasError = false;
        _isUploadingPhoto = true;
        foreach (var file in files)
        {

            if (file.Size > MaxFileSize)
            {
                hasOversizedFile = true;
                continue;
            }
            try
            {
                
                var path = $"tournaments/{_configuration.Id}/users/{_session.UsersId}/{Guid.NewGuid()}.{file.Name.Split('.')[^1]}";
                var url = await FileUpload.UploadFile(path, file.OpenReadStream(MaxFileSize));
                _session.AddPhoto(url);
            }
            catch (Exception e)
            {
                hasError = true;
                Logger.LogError(e,$"There was an error while uploading a photo: {e.Message} - {file.Name} {file.Size}");
            }
        }
        if (hasError)
        {
            Snackbar.Add($"There was an error while uploading at least one of your scores, please try again. If the problem persists contact DrMurloc", Severity.Error);
        }
        if (hasOversizedFile)
        {
            Snackbar.Add($"One of your files was more than 20MB, please reduce your file size and try again.", Severity.Error);
        }
        _isUploadingPhoto = false;
    }
    private async Task SetUser(string userIdString)
    {
        if (!Guid.TryParse(userIdString, out var userId))
        {
            return;
        }
        await LoadUser(userId);
    }
    private async Task SelectSong(string songName)
    {
        songName = songName ?? string.Empty;
        if (_autocomplete.IsOpen)
        {
            await _autocomplete.ToggleMenu();
        }
        Charts = ValidCharts.Where(c => c.Song.Name.ToString() == songName).OrderBy(c => c.Type).ThenBy(c => (int)c.Level).ToArray();
        _songSearchString = songName;

    }
    public string DifficultyBubblePath(Chart chart) =>
        $"https://piuimages.arroweclip.se/difficulty/{chart.DifficultyString.ToLower()}.png";
    private void AddChart()
    {
        _session?.Add(_selectedChart!, _score, _plate, _isBroken);
        _selectedChart = null;
        _songSearchString = string.Empty;
        _score = 0;
        Snackbar.Add("Chart Added",Severity.Success);

    }

    private void ShowAddDialog()
    {
        _showAddDialog = true;
        _selectedChart = null;
        _songSearchString = string.Empty;
    }

    private async Task Save()
    {
        if (_session == null)
        {
            return;
        }
        if (_session.VerificationType == SubmissionVerificationType.Video && VideoUrl == null)
        {
            Snackbar.Add("You must input a link to a video of your attempt.",Severity.Warning);
            return;
        }
        if (_session.VerificationType == SubmissionVerificationType.Photo && !_session.PhotoUrls.Any())
        {
            Snackbar.Add("You must submit at least one photo.", Severity.Warning);
            return;
        }
        _isSaving = true;
        _session.VideoUrl= VideoUrl;
        await TournamentRepository.SaveSession(_session, CancellationToken.None);
        if (_session.NeedsApproval)
        {
            await Notifications.NotifyAdmin("There's a session that needs approved!", CancellationToken.None);
        }
        _isSaving = false;
        Snackbar.Add("Session Saved!", Severity.Success);
    }

    private async Task LoadUser(Guid userId)
    {
        _session = await TournamentRepository.GetSession(TournamentId, userId, CancellationToken.None);
        _videoUrl = _session.VideoUrl?.ToString() ?? "";
    }
    protected override async Task OnInitializedAsync()
    {
        if (!CurrentUser.IsLoggedIn)
        {
            NavManager.NavigateTo("/Tournaments");
        }
        _configuration = await Mediator.Send(new GetTournamentQuery(TournamentId));
        if (!_configuration.IsActive)
        {
            NavManager.NavigateTo("/Tournaments");
        }
        _allCharts = await Mediator.Send(new GetChartsQuery(MixEnum.Phoenix));
        var userId = CurrentUser.User.Id;
        if (CurrentUser.User.IsAdmin && UserId != null)
        {
            userId = UserId.Value;
        }
        await LoadUser(userId);
    }
}
