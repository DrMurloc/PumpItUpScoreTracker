@page "/Tournament/{TournamentId:guid}/Qualifiers"
@using ScoreTracker.Domain.SecondaryPorts
@using ScoreTracker.Domain.Models
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Domain.Enums
@using MediatR
@using ScoreTracker.Application.Queries
@using ScoreTracker.Web.Components

<PageTitle>Submit @_tournamentName Qualifiers Session</PageTitle>

<MudGrid>
    <MudItem xs="12" sm="8">
        <MudText Typo="Typo.h3">@L["Qualifiers Leaderboard",_tournamentName]</MudText>
    </MudItem>
    <MudItem xs="12" sm="4">
        <MudButton Href=@($"/Tournament/{TournamentId}/Qualifiers/Submit") Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.UploadFile">@L["Submission Page"]</MudButton>
    </MudItem>
    

</MudGrid>
<MudTable T="Entry" Items="_leaderboard" FixedHeader="true" Striped="true" Breakpoint="Breakpoint.None" Dense="true">
    <HeaderContent>
        <MudTh>@L["Place"]</MudTh>
        <MudTh>@L["Username"]</MudTh>
        @for (var i = 0; i < _configuration.PlayCount; i++)
        {
            var place = i+1;
            <MudTh>#@place @L["Song"]</MudTh>
        }
        <MudTh>@L["Rating"]</MudTh>
        <MudTh>@L["Photos"]</MudTh>
        @if (CurrentUser.IsLoggedInAsAdmin)
        {
            <MudTh>Approve</MudTh>
        }
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Place</MudTd>
        <MudTd>@context.UserName</MudTd>
        @for (var i = 0; i <_configuration.PlayCount;i++)
        {
            var entryIndex = i;
            var entry = context.Scores.Skip(entryIndex).Take(1).ToArray();
            <MudTd Style="text-align:center">
                @if (entry.Any())
                {
                    <MudHidden Breakpoint="Breakpoint.SmAndDown">
                        <MudTooltip Text="@(entry.Single().Item1.Song.Name+' '+entry.Single().Item1.DifficultyString)">
                            <MudImage Src="@entry.Single().Item1.Song.ImagePath.ToString()" Height="35" Elevation="25" ObjectFit="ObjectFit.ScaleDown" />
                        </MudTooltip>
                        <ScoreBreakdown Score="@entry.Single().Item2" Height="35"></ScoreBreakdown>
                    </MudHidden>
                    <MudHidden Breakpoint="Breakpoint.MdAndUp">
                        <MudTooltip Text="@(entry.Single().Item1.Song.Name+' '+entry.Single().Item1.DifficultyString)">
                            <MudImage Src="@entry.Single().Item1.Song.ImagePath.ToString()" Height="15" Elevation="25" ObjectFit="ObjectFit.ScaleDown" />
                        </MudTooltip>
                        <ScoreBreakdown Score="@entry.Single().Item2" Height="15"></ScoreBreakdown>
                    </MudHidden>
                    @(entry.Single().Item3.ToString("0.00"))

                }
            </MudTd>
        }
        <MudTd>@context.Score.ToString("0.000")</MudTd>
        <MudTd>
            @if (context.IsApproved || CurrentUser.IsLoggedInAsAdmin)
            {
                <MudIconButton Icon="@Icons.Material.Filled.PhotoAlbum" Color="Color.Primary" OnClick="() => SelectEntry(context)"></MudIconButton>
            }
            else
            {
                <MudText>@L["Pending"]</MudText>
            }
        </MudTd>
        @if (CurrentUser.IsLoggedInAsAdmin)
        {
            <MudTd>
                @if (!context.IsApproved)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Check" Color="Color.Primary" OnClick="()=>Approve(context.Record)"></MudIconButton>
                }
            </MudTd>
        }
    </RowTemplate>
    <ChildRowContent>
        <MudTr>
            <td colspan="6">
                @if (_selectedEntry != null && _selectedEntry.UserName==context.UserName)
                {
                    <MudGrid>
                        @foreach (var item in _selectedEntry.Photos)
                        {
                            <MudItem xs="6" sm="4" md="3">
                                <MudImage Src="@item.ToString()" ObjectFit="ObjectFit.Contain" Height="200" Width="200"></MudImage>
                            </MudItem>
                        }
                    </MudGrid>
                    @if (CurrentUser.IsLoggedInAsAdmin)
                    {
                        <MudGrid>
                            @foreach (var entry in _selectedEntry.Record.Submissions.Values)
                            {
                                <MudItem xs="6" sm="4" md="3">
                                    @_charts[entry.ChartId].Song.Name @_charts[entry.ChartId].DifficultyString: @entry.Score (@entry.Score.LetterGrade.GetName())
                                </MudItem>
                            }
                        </MudGrid>
                    }
                }
            </td>
        </MudTr>
    </ChildRowContent>
</MudTable>
<br/>
<br/>

<MudGrid>
    <MudItem xs="12">
        <MudText Typo="Typo.h4">@L["Event Links"]</MudText>
    </MudItem>
    <MudItem xs="6" sm="4" md="3">
        <MudButton StartIcon="@Icons.Material.Filled.Rule" Href="https://docs.google.com/document/d/1J_JgWwhgddoiaUlghGCGtd7wWXmAQ4c90AflUQucNaI/" Color="Color.Primary" Variant="Variant.Text" Target="_blank">@L["Rules"]</MudButton>
    </MudItem>
    <MudItem xs="6" sm="4" md="3">
        <MudButton StartIcon="@Icons.Material.Filled.Event" Href="https://www.start.gg/tournament/beast-in-the-east-7/details" Color="Color.Primary" Variant="Variant.Text" Target="_blank">@L["Event"]</MudButton>
    </MudItem>
    <MudItem xs="6" sm="4" md="3">
        <MudButton StartIcon="@Icons.Material.Filled.Public" Href="https://bitegaming.org/" Color="Color.Primary" Variant="Variant.Text" Target="_blank">@L["Website"]</MudButton>
    </MudItem>
    <MudItem xs="6" sm="4" md="3">
        <MudButton StartIcon="@Icons.Custom.Brands.Discord" Href="https://discord.gg/jNQRsrkWFA" Color="Color.Primary" Variant="Variant.Text" Target="_blank">Discord</MudButton>
    </MudItem>
</MudGrid>
@inject ICurrentUserAccessor CurrentUser
@inject IQualifiersRepository Qualifiers
@inject ISnackbar Snackbar
@inject NavigationManager NavManager;
@inject IMediator Mediator;
@code
{

    private IEnumerable<Entry> _leaderboard;
    private Entry? _selectedEntry = null;
    private IDictionary<Guid, Chart> _charts = new Dictionary<Guid, Chart>();
    private Name _tournamentName = "...";
    private QualifiersConfiguration _configuration = new(Array.Empty<Chart>(),new Dictionary<Guid, int>(),"Phoenix",1,2);
    [Parameter]
    [SupplyParameterFromQuery(Name="TournamentId")]
    public Guid TournamentId { get; set; }
    private void SelectEntry(Entry entry)
    {
        _selectedEntry = _selectedEntry?.UserName == entry.UserName ? null : entry;
    }

    private async Task Approve(UserQualifiers qual)
    {
        qual.Approve();
        await Qualifiers.SaveQualifiers(TournamentId, qual);
        Snackbar.Add("Approved!", Severity.Success);
    }
    protected override async Task OnInitializedAsync()
    {
        if (TournamentId == default)
        {
            NavManager.NavigateTo("/");
            return;
        }
        _configuration = await Qualifiers.GetQualifiersConfiguration(TournamentId);
        var tournament = (await Mediator.Send(new GetAllTournamentsQuery()))
            .FirstOrDefault(t => t.Id == TournamentId);
        _tournamentName = tournament.Name;

        var config = await Qualifiers.GetQualifiersConfiguration(TournamentId);
        foreach (var chart in config.Charts)
        {
            _charts[chart.Id] = chart;
        }
        _leaderboard = (await Qualifiers.GetAllUserQualifiers(TournamentId,config)).OrderByDescending(q => q.CalculateScore()).Select((q, index) => new Entry(index + 1, q.UserName,
            q.BestCharts(),q.IsApproved,
            q.CalculateScore(), q.Submissions.Select(s => s.Value.PhotoUrl).ToArray(),q));

    }

    private sealed record Entry(int Place, string UserName, IEnumerable<(Chart,PhoenixScore, double)> Scores, bool IsApproved, double Score, IEnumerable<Uri> Photos, UserQualifiers Record)
    {

    }
}
