@page "/Tournaments"
@using ScoreTracker.Domain.SecondaryPorts
@using MediatR
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.Models
@using ScoreTracker.Domain.Records
<PageTitle>Tournaments</PageTitle>

@if (_active.Any())
{

    <MudText Typo="Typo.h4">Active Tournaments</MudText>
    <MudDataGrid T="TournamentRecord" Items="_active">
        <Columns>
            <PropertyColumn T="TournamentRecord" TProperty="string" Property="x => x.Name" Title="Tournament" Sortable="false"></PropertyColumn>
            <TemplateColumn T="TournamentRecord" Title="Start Date" Sortable="true" SortBy="x => x.StartDate ?? DateTimeOffset.MinValue">
                <CellTemplate>
                    <MudText>@(context.Item.StartDate?.ToString("D")??"")</MudText>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="TournamentRecord" Title="End Date" Sortable="true" SortBy="x => x.EndDate ?? DateTimeOffset.MaxValue">
                <CellTemplate>
                    <MudText>@(context.Item.EndDate?.ToString("D")??"")</MudText>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="TournamentRecord" Title="Type" Sortable="false">
                <CellTemplate>
                    @context.Item.Type
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="TournamentRecord" Title="Location" Sortable="false">
                <CellTemplate>
                    @context.Item.Location
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="TournamentRecord" Title="Link" Sortable="false">
                <CellTemplate>
                    @if (context.Item.LinkOverride != null)
                    {
                        <MudIconButton Disabled="_isLoading" Item="@Icons.Material.Filled.Public" Href="@context.Item.LinkOverride.ToString()" Target="_blank"></MudIconButton>
                    }
                    else
                    {
                        <MudIconButton Disabled="_isLoading" Icon="@Icons.Material.Filled.Leaderboard" OnClick="() => GoToSubmit(context.Item.Id,context.Item.Type)"></MudIconButton>
                    }
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
}
@if (_upcoming.Any())
{
    <br/>
    <br/>
    <MudText Typo="Typo.h4">Upcoming Tournaments</MudText>
    <MudDataGrid T="TournamentRecord" Items="_upcoming">
        <Columns>
            <PropertyColumn T="TournamentRecord" TProperty="string" Property="x => x.Name" Title="Tournament" Sortable="false"></PropertyColumn>
            <TemplateColumn T="TournamentRecord" Title="Start Date" Sortable="true" SortBy="x => x.StartDate ?? DateTimeOffset.MinValue">
                <CellTemplate>
                    <MudText>@(context.Item.StartDate?.ToString("D")??"")</MudText>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="TournamentRecord" Title="End Date" Sortable="true" SortBy="x => x.EndDate ?? DateTimeOffset.MaxValue">
                <CellTemplate>
                    <MudText>@(context.Item.EndDate?.ToString("D")??"")</MudText>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="TournamentRecord" Title="Type" Sortable="false">
                <CellTemplate>
                    @context.Item.Type
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="TournamentRecord" Title="Location" Sortable="false">
                <CellTemplate>
                    @context.Item.Location
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="TournamentRecord" Title="Link" Sortable="false">
                <CellTemplate>
                    @if (context.Item.LinkOverride != null)
                    {
                        <MudIconButton Disabled="_isLoading" Item="@Icons.Material.Filled.Public" Href="@context.Item.LinkOverride.ToString()" Target="_blank"></MudIconButton>
                    }
                    else
                    {
                        <MudIconButton Disabled="_isLoading" Icon="@Icons.Material.Filled.Leaderboard" OnClick="() => GoToSubmit(context.Item.Id,context.Item.Type)"></MudIconButton>
                    }
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
}
@if (_previous.Any())
{
    
    <br/>
    <br/>
    <MudText Typo="Typo.h4">Previous Tournaments</MudText>
    <MudDataGrid T="TournamentRecord" Items="_previous">
        <Columns>
            <PropertyColumn T="TournamentRecord" TProperty="string" Property="x => x.Name" Title="Tournament" Sortable="false"></PropertyColumn>
            <TemplateColumn T="TournamentRecord" Title="Start Date" Sortable="true" SortBy="x => x.StartDate ?? DateTimeOffset.MinValue">
                <CellTemplate>
                    <MudText>@(context.Item.StartDate?.ToString("D")??"")</MudText>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="TournamentRecord" Title="End Date" Sortable="true" SortBy="x => x.EndDate ?? DateTimeOffset.MaxValue">
                <CellTemplate>
                    <MudText>@(context.Item.EndDate?.ToString("D")??"")</MudText>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="TournamentRecord" Title="Type" Sortable="false">
                <CellTemplate>
                    @context.Item.Type
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="TournamentRecord" Title="Location" Sortable="false">
                <CellTemplate>
                    @context.Item.Location
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="TournamentRecord" Title="Link" Sortable="false">
                <CellTemplate>
                    @if (context.Item.LinkOverride != null)
                    {
                        <MudIconButton Disabled="_isLoading" Item="@Icons.Material.Filled.Public" Href="@context.Item.LinkOverride.ToString()" Target="_blank"></MudIconButton>
                    }
                    else
                    {
                        <MudIconButton Disabled="_isLoading" Icon="@Icons.Material.Filled.Leaderboard" OnClick="() => GoToSubmit(context.Item.Id,context.Item.Type)"></MudIconButton>
                    }
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
}
<MudDialog @bind-Visible="_showRules">
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudText Typo="Typo.h4">@_currentConfig.Name</MudText>
            </MudItem>
            <MudItem xs="12">Start Date: @(_currentConfig.StartDate?.ToString(@"D") ?? "Always")</MudItem>
            <MudItem xs="12">End Date: @(_currentConfig.EndDate?.ToString(@"D") ?? "Never")</MudItem>
            <MudItem xs="12">Players have @(_currentConfig.MaxTime.ToString(@"h\:mm")) to play charts. You are allowed to finish the song you are on when your time runs out. Your total score is total combined score of all charts you play.</MudItem>
            <MudItem xs="6" sm="3">
                <MudMenu Label="Base Level Scores" Variant="Variant.Filled">
                    @foreach (var kv in _currentConfig.Scoring.LevelRatings.OrderBy(l => (int)l.Key).Where(kv => kv.Value > 0))
                    {
                        <MudMenuItem>@kv.Key - @kv.Value</MudMenuItem>
                    }
                </MudMenu>
            </MudItem>
            <MudItem xs="6" sm="3">
                <MudMenu Label="Song Types" Variant="Variant.Filled">
                    @foreach (var kv in _currentConfig.Scoring.SongTypeModifiers.Where(kv => kv.Value > 0))
                    {
                        <MudMenuItem>@kv.Key @(Math.Abs(kv.Value - 1) < .001?"":$"- {@kv.Value}X")</MudMenuItem>
                    }
                </MudMenu>
            </MudItem>
            <MudItem xs="6" sm="3">
                <MudMenu Label="Chart Types" Variant="Variant.Filled">
                    @foreach (var kv in _currentConfig.Scoring.ChartTypeModifiers.Where(kv => kv.Value > 0))
                    {
                        <MudMenuItem>@kv.Key @(Math.Abs(kv.Value - 1) < .001?"":$"- {@kv.Value}X")</MudMenuItem>
                    }
                </MudMenu>
            </MudItem>
            <MudItem xs="6" sm="3">
                <MudMenu Label="Letter Grades" Variant="Variant.Filled">
                    @foreach (var kv in _currentConfig.Scoring.LetterGradeModifiers.OrderBy(kv => kv.Key).Where(kv => kv.Value > 0))
                    {
                        <MudMenuItem>@kv.Key.GetName() @(Math.Abs(kv.Value - 1) < .001?"":$"- {@kv.Value}X")</MudMenuItem>
                    }
                </MudMenu>
            </MudItem>
            <MudItem xs="6" sm="3">
                <MudMenu Label="Plates" Variant="Variant.Filled">
                    @foreach (var kv in _currentConfig.Scoring.PlateModifiers.OrderBy(kv=>kv.Key).Where(kv => kv.Value > 0))
                    {
                        <MudMenuItem>@kv.Key.GetShorthand() @(Math.Abs(kv.Value - 1) < .001 ? "" : $"- {@kv.Value}X")</MudMenuItem>
                    }
                </MudMenu>
            </MudItem>

            @if (Math.Abs(_currentConfig.Scoring.StageBreakModifier - 1) > .0001)
            {
                <MudItem xs="12">Broken scores get a multiplier of @_currentConfig.Scoring.StageBreakModifier</MudItem>
            }
            @if (_currentConfig.Scoring.AdjustToTime)
            {
                <MudItem xs="12">Songs will have score adjusted based on song length (treating 2 minutes as baseline)</MudItem>
            }
            <MudItem xs="12">
                Repeated charts @(_currentConfig.AllowRepeats ? "are" : "are not") allowed.
            </MudItem>

        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudSpacer></MudSpacer>
        <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Close" OnClick="() => _showRules = false">Close</MudButton>
    </DialogActions>
</MudDialog>

@inject IMediator Mediator
@inject ICurrentUserAccessor CurrentUser;
@inject NavigationManager NavManager;
@code
{
    private bool _showRules = false;
    private bool _isLoading = false;
    private TournamentConfiguration _currentConfig = new TournamentConfiguration(new ScoringConfiguration());
    private DateTimeOffset Now = DateTimeOffset.Now;
    private void GoToSubmit(Guid tournamentId, TournamentType type)
    {
        switch (type)
        {
            case TournamentType.Stamina:
            
                NavManager.NavigateTo($"/Tournament/Stamina/{tournamentId}");
                break;
                case TournamentType.Match:
                    if (_tournaments[tournamentId].StartDate != null && _tournaments[tournamentId].StartDate <= Now)
                    {
                        
                        NavManager.NavigateTo($"/Tournament/{tournamentId}/Brackets");
                    }
                    else
                    {
                        
                        NavManager.NavigateTo($"/Tournament/{tournamentId}/Qualifiers");
                    }
                    break;
        }
    }

    private TournamentRecord[] _upcoming = Array.Empty<TournamentRecord>();
    private TournamentRecord[] _previous = Array.Empty<TournamentRecord>();
    private TournamentRecord[] _active = Array.Empty<TournamentRecord>();
    private IDictionary<Guid, TournamentRecord> _tournaments = new Dictionary<Guid, TournamentRecord>();
    protected override async Task OnInitializedAsync()
    {
        var tournaments = (await Mediator.Send(new GetAllTournamentsQuery())).ToArray();
        _tournaments = tournaments.ToDictionary(t => t.Id);
        _upcoming = tournaments.Where(t => t.StartDate != null && t.StartDate > DateTimeOffset.Now).ToArray();
        _previous = tournaments.Where(t => t.EndDate != null && t.EndDate < DateTimeOffset.Now).ToArray();
        _active = tournaments.Where(t => (t.StartDate == null || t.StartDate <= DateTimeOffset.Now) && (t.EndDate == null || t.EndDate >= DateTimeOffset.Now)).ToArray();

    }
}
