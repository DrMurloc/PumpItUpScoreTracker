@page "/Tournament/{TournamentId:guid}/Qualifiers/Submit"
@using ScoreTracker.Domain.SecondaryPorts
@using MediatR
@using ScoreTracker.Application.Commands
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Domain.Models
@using ScoreTracker.Domain.Records
@using ScoreTracker.Domain.ValueTypes
@using ScoreTracker.Web.Components
@using ScoreTracker.Web.Services

<PageTitle>Submit @_tournamentName Qualifiers Session</PageTitle>

<MudGrid>
    <MudItem xs="12" sm="8">
        <MudText Typo="Typo.h3">@L["Qualifiers Submission",_tournamentName]</MudText>
    </MudItem>
    <MudItem xs="12" sm="4">
        <MudButton Href=@($"/Tournament/{TournamentId}/Qualifiers") Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Leaderboard">@L["To Leaderboard"]</MudButton>
    </MudItem>
    <MudItem xs="12">
        <MudAutocomplete T="string" MaxLength="32" CoerceText="false" CoerceValue="true" Immediate="true" DebounceInterval="200" Label=@L["Username"] Value="_username" ValueChanged="SetUsername" SearchFunc="@((t,c)=>Task.FromResult(_usernames.Where(u=>u.Contains(t,StringComparison.OrdinalIgnoreCase)).Append(t).Distinct()))" />
    </MudItem>
    @if (_currentQualifiers==null)
    {
        <MudItem xs="12">
            <MudText Color="Color.Info">@L["Qualifier Submit Phrase 1"]</MudText>
        </MudItem>
    }
    @if (_isNew)
    {
        <MudItem xs="12">
            <MudText Color="Color.Info">@L["Qualifier Submit Phrase 2"]</MudText>
        </MudItem>
    }
    @if (_currentQualifiers != null)
    {
        @if (_currentQualifiers.Submissions.Count < _currentQualifiers.Configuration.PlayCount)
        {

            <MudItem xs="12">
                <MudText Typo="Typo.h4">

                    @L["Play Num", _currentQualifiers.Configuration.PlayCount]
                </MudText>
            </MudItem>
        }
        @foreach (var chart in _configuration.Charts.OrderBy(c => c.Level))
        {
            <MudItem xs="6" sm="3" md="2">
                <MudCard Class="@CardClass(chart.Id)" Style="@CardStyle(chart.Id)">
                    <MudCardMedia Height="100" Image="@chart.Song.ImagePath.ToString()" />
                    @if (_currentQualifiers.Submissions.ContainsKey(chart.Id))
                    {
                        <MudCardContent>
                            @_currentQualifiers.Submissions[chart.Id].Score (@_currentQualifiers.Submissions[chart.Id].Score.LetterGrade.GetName(), @_currentQualifiers.Rating(chart.Id).ToString("0.##"))
                        </MudCardContent>
                    }
                    <MudCardActions>
                        <DifficultyBubble Chart="chart"></DifficultyBubble>
                        <MudSpacer></MudSpacer>
                        <MudTooltip Text="Open Video">
                            <MudIconButton Icon="@Icons.Custom.Brands.YouTube" Variant="Variant.Outlined" Color="Color.Primary" OnClick="() => VideoDisplayer.ShowVideo(chart.Id)"></MudIconButton>
                        </MudTooltip>

                        <MudSpacer></MudSpacer>
                        <MudTooltip Text="Submit">
                            <MudIconButton Icon="@Icons.Material.Filled.UploadFile" Variant="Variant.Outlined" Color="Color.Primary" OnClick="() => OpenSubmit(chart)"></MudIconButton>
                        </MudTooltip>

                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
        @if (_suggestedCharts.Any(s=>!_currentQualifiers.Submissions.ContainsKey(s)))
        {
            <MudItem xs="12">
                <MudIcon Style=@($"color:{Colors.LightBlue.Darken1}") Icon="@Icons.Material.Filled.MoreVert"></MudIcon> - @L["Suggested Chart"]
            </MudItem>
        }
    }
</MudGrid>

@if (_currentQualifiers != null)
{
    <MudGrid>

        @foreach (var entry in _currentQualifiers.Submissions.OrderByDescending(s=>_currentQualifiers.Rating(s.Key)))
        {

            <MudItem xs="12">
                <MudText>@_charts[entry.Key].Song.Name @_charts[entry.Key].DifficultyString - @entry.Value.Score (@entry.Value.Score.LetterGrade.GetName()), @_currentQualifiers.Rating(entry.Key).ToString("0.00") @L["Rating"]</MudText>
            </MudItem>
        }
        <MudItem xs="12">
            <MudText Typo="Typo.h4">@L["Rating Calculator"]</MudText>
        </MudItem>
        <MudItem xs="6" sm="4" md="3">
            <MudNumericField T="int" Label=@L["Score"] Value="_testScore" ValueChanged="s=>_testScore=s" Min="0" Max="1000000" HideSpinButtons="true" Clearable="false"></MudNumericField>
        </MudItem>
        <MudItem xs="6" sm="4" md="3">
            <MudSelect T="PhoenixLetterGrade" Label=@L["Letter Grade"] Value="_testScore.LetterGrade" ValueChanged="SetLetterGrade">
                @foreach (var grade in Enum.GetValues<PhoenixLetterGrade>())
                {
                    <MudSelectItem T="PhoenixLetterGrade" Value="grade">@grade.GetName()</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="6" sm="4" md="3">
            <MudNumericField T="int" Label=@L["Difficulty Level"] Value="_level" ValueChanged="l=>_level=l" Min="@DifficultyLevel.Min" Max="@DifficultyLevel.Max" HideSpinButtons="true" Clearable="false"></MudNumericField>
        </MudItem>
        <MudItem xs="6" sm="4" md="3">
            <MudText>@L["Rating"]: @_currentQualifiers.Rating(_level,_testScore).ToString("0.00")</MudText>
        </MudItem>
    </MudGrid>
}
<MudDialog @bind-Visible="_showSubmit">
    <DialogContent>
        @if (_submittingChart != null)
        {
            <MudGrid>
                <MudItem xs="12">
                    <MudText Typo="Typo.h5">@_submittingChart.Song.Name @_submittingChart.DifficultyString</MudText>
                </MudItem>
                @if (_currentQualifiers!=null && _currentQualifiers.Submissions.TryGetValue(_submittingChart.Id, out var submission))
                {
                    <MudItem xs="12">
                        @L["Score"]: @submission.Score (@_currentQualifiers.Rating(_submittingChart.Id).ToString("0.00") @L["Rating"])
                    </MudItem>
                }
                <MudItem xs="12">
                    <MudRadioGroup T="MixEnum" @bind-SelectedOption="_addingMix">
                        <MudRadio Value="@MixEnum.Phoenix" Color="Color.Primary">Phoenix</MudRadio>
                        <MudRadio Value="@MixEnum.XX" Color="Color.Primary">XX</MudRadio>
                    </MudRadioGroup>
                </MudItem>
                @if (_addingMix == MixEnum.Phoenix)
                {
                    <MudItem xs="12">
                        <MudNumericField T="int" Min="0" Max="1000000" Label=@L["Score"] Value="_score" ValueChanged="i=>_score=i"></MudNumericField>
                    </MudItem>
                }
                else
                {
                    <MudItem xs="6">
                        <MudNumericField T="int" Min="0" Max="2000" Label="Perfects" Value="_perfects" ValueChanged="i=>_perfects=i"></MudNumericField>
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Min="0" Max="2000" Label="Greats" Value="_greats" ValueChanged="i=>_greats=i"></MudNumericField>
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Min="0" Max="2000" Label="Goods" Value="_goods" ValueChanged="i=>_goods=i"></MudNumericField>
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Min="0" Max="2000" Label="Bads" Value="_bads" ValueChanged="i=>_bads=i"></MudNumericField>
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Min="0" Max="2000" Label="Misses" Value="_misses" ValueChanged="i=>_misses=i"></MudNumericField>
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Min="0" Max="2000" Label="Max Combo" Value="_maxCombo" ValueChanged="i=>_maxCombo=i"></MudNumericField>
                    </MudItem>
                    @if (_configuration.NoteCountAdjustments[_submittingChart.Id] != 0)
                    {
                        <MudItem xs="12">
                            <MudText Color="Color.Info">Perfects and MaxCombo will get @_configuration.NoteCountAdjustments[_submittingChart.Id] added as Phoenix Adjustment.</MudText>
                        </MudItem>
                    }
                    <MudItem xs="12">
                        @if (Screen.IsValid)
                        {
                            <MudText>@L["Score"]: @(new ScoreScreen(_perfects + _configuration.NoteCountAdjustments[_submittingChart.Id], _greats, _goods, _bads, _misses, _maxCombo + _configuration.NoteCountAdjustments[_submittingChart.Id]).CalculatePhoenixScore)</MudText>
                        }
                    </MudItem>
                }
                @if (_photoUrl != null && !_isUploading)
                {
                    
                    <MudItem xs="6" sm="3" md="2">
                        <MudCard>
                            <MudCardMedia Height="100" Image="@_photoUrl.ToString()" />
                        </MudCard>
                    </MudItem>
                                     
                }
                @if (_isUploading)
                {
                    <MudItem xs="6" sm="3" md="2">
                        <MudProgressCircular Indeterminate="true" Color="Color.Primary"></MudProgressCircular>
                    </MudItem>
                }
                <MudItem xs="6" sm="3" md="2">
                    <MudFileUpload T="IBrowserFile" Disabled="_isUploading" Accept=".png, .gif, .jpg, .jpeg," MaximumFileCount="1" FilesChanged="UploadFiles">
                        <ActivatorContent>
                            <MudButton HtmlTag="label"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload">
                                @L["Upload Image"]
                            </MudButton>
                        </ActivatorContent>
                    </MudFileUpload>
                </MudItem>   
            </MudGrid>
        }
    </DialogContent>
    <DialogActions>
        <MudSpacer></MudSpacer>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" OnClick="AddScore" Disabled="_isSaving || !Validated">@L["Submit"]</MudButton>

        <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Close" OnClick="() => _showSubmit = false">@L["Close"]</MudButton>
    </DialogActions>
</MudDialog>

@inject IMediator Mediator
@inject IQualifiersRepository Qualifiers
@inject ICurrentUserAccessor CurrentUser
@inject ISnackbar Snackbar
@inject IFileUploadClient FileUpload
@inject ILogger<MatchTournamentQualifiersSubmit> Logger
@inject IAdminNotificationClient Notifications;
@inject NavigationManager NavManager;
@inject ChartVideoDisplayer VideoDisplayer;
@code
{

    private QualifiersConfiguration _configuration = new QualifiersConfiguration(Array.Empty<Chart>(), new Dictionary<Guid, int>(),"Phoenix",1,2);
    private UserQualifiers? _currentQualifiers;
    private Chart? _submittingChart;
    private IEnumerable<(Chart Chart,PhoenixScore Score,double Rating)> MyBest => _currentQualifiers.BestCharts();
    private IDictionary<Guid, Chart> _charts = new Dictionary<Guid, Chart>();
    private string CardClass(Guid chartId) => MyBest.Any(b=>b.Item1.Id==chartId) ? "border-solid border-2" : 
        _suggestedCharts.Contains(chartId)||
        (_currentQualifiers?.Submissions.ContainsKey(chartId)??false) ? "border-dashed border-2" : string.Empty;
    private string CardStyle(Guid chartId) => MyBest.Any(b => b.Item1.Id == chartId) ? $@"border-color:{Colors.Green.Darken1}" :
        _suggestedCharts.Contains(chartId)?$"border-color:{Colors.LightBlue.Darken1}":
        _currentQualifiers?.Submissions.ContainsKey(chartId) ?? false ? $"border-color:{Colors.Gray.Darken1}" : string.Empty;
    private bool _showSubmit = false;
    private string _username = string.Empty;
    private bool _isSaving = false;
    private DifficultyLevel _level = 20;
    private bool _isNew = false;
    private PhoenixScore _testScore = 950000;

    private void SetLetterGrade(PhoenixLetterGrade grade)
    {
        _testScore = grade.GetMinimumScore();
    }
    private MixEnum _addingMix = MixEnum.Phoenix;
    private StepCount _perfects = 0;
    private StepCount _greats = 0;
    private StepCount _goods = 0;
    private StepCount _bads = 0;
    private StepCount _misses = 0;
    private StepCount _maxCombo = 0;
    private ScoreScreen Screen => new ScoreScreen(_perfects, _greats, _goods, _bads, _misses, _maxCombo);
    private PhoenixScore _score = 0;
    private Name _tournamentName = "...";
    private Uri? _photoUrl;
    private ISet<Guid> _suggestedCharts = new HashSet<Guid>();
    [Parameter]
    [SupplyParameterFromQuery(Name="TournamentId")]
    public Guid TournamentId { get; set; }
    private IEnumerable<string> _usernames = Array.Empty<string>();

    public string DifficultyBubblePath(string difficultyShorthand) =>
        $"https://piuimages.arroweclip.se/difficulty/{difficultyShorthand.ToLower()}.png";

    private bool _isUploading = false;
    private const long MaxFileSize = 20000000;

    public Guid? GetNextLevel(Guid chartId)
    {
        var charts= _configuration.Charts.OrderBy(c => (int)c.Level).ThenBy(c => c.Type).ToArray();
        var index = charts.Select((c, i) => (c,i)).Where(kv => kv.c.Id == chartId).Select(kv => kv.i).FirstOrDefault(-1);
        if (index == -1 || index==charts.Length-1)
        {
            return null;
        }
        
        return charts[index + 1].Id;
    }
    private async Task SetUsername(string nameString)
    {
        if (Name.TryParse(nameString, out var name))
        {
            _username = nameString;
            var qualifiers = await Qualifiers.GetQualifiers(TournamentId,name,_configuration);
            if (qualifiers == null)
            {
                _isNew = true;
                _currentQualifiers = new UserQualifiers(_configuration,false,"Not Set",new Dictionary<Guid, UserQualifiers.Submission>())
                {
                    UserName = nameString
                };
            }
            else
            {
                _currentQualifiers = qualifiers;
                _username = _currentQualifiers.UserName;
                _isNew = false;
            }
            await EvaluateRecommended();
            await RefreshLeaderboard();
        }
        else
        {
            _username = string.Empty;
            _currentQualifiers = null;
            _isNew = false;
        }
    }

    private bool Validated => _photoUrl != null && ((_addingMix == MixEnum.Phoenix) || (_addingMix == MixEnum.XX && Screen is { IsValid: true }));
    private void OpenSubmit(Chart chart)
    {
        _submittingChart = chart;
        _showSubmit = true;
        Clear();
        if (_currentQualifiers!=null && _currentQualifiers.Submissions.TryGetValue(chart.Id, out var submission))
        {
            _photoUrl = submission.PhotoUrl;
        }
    }

    private void Clear()
    {
        _perfects = 0;
        _greats = 0;
        _goods = 0;
        _bads = 0;
        _misses = 0;
        _maxCombo = 0;
        _score = 0;
        _photoUrl = null;
    }

    protected override async Task OnParametersSetAsync()
    {
        await OnInitializedAsync();
    }
    private async Task EvaluateRecommended()
    {
        _suggestedCharts.Clear();
        if (_currentQualifiers == null)
        {
            return;
        }
        foreach (var chart in _currentQualifiers.Submissions.Where(kv => kv.Value.Score >= PhoenixLetterGrade.SSS.GetMinimumScore()))
        {
            var nextChart = GetNextLevel(chart.Key);
            if (nextChart == null || _suggestedCharts.Contains(nextChart.Value))
            {
                continue;
            }
            _suggestedCharts.Add(nextChart.Value);
        }
        if (CurrentUser.IsLoggedIn)
        {
            var myScores = (await Mediator.Send(new GetPhoenixRecordsQuery(CurrentUser.User.Id))).ToDictionary(s=>s.ChartId);
            var levelAverages = myScores.Values.Where(s => s.Score != null).GroupBy(s => (_charts[s.ChartId].Level,_charts[s.ChartId].Type))
                .Where(g=>g.Count()>=10)
                .ToDictionary(g => g.Key,
                    g => (int) g.Average(s => s.Score!.Value));

            var foundScores = _configuration.Charts.ToDictionary(c => c.Id, c => myScores.TryGetValue(c.Id, out var score) ? (int)score.Score!.Value :
                levelAverages.TryGetValue((c.Level,c.Type), out var avg) ? avg : 0);

            foreach (var chart in _configuration.Charts.Where(s=>foundScores[s.Id]>PhoenixLetterGrade.AA.GetMinimumScore()).OrderByDescending(s =>
                _currentQualifiers.Rating(s.Level,foundScores[s.Id])).Take(_configuration.PlayCount))
            {
                if (!_suggestedCharts.Contains(chart.Id))
                {
                    _suggestedCharts.Add(chart.Id);
                }
            }
        }
        foreach (var submission in _currentQualifiers.Submissions.Where(s => _suggestedCharts.Contains(s.Key)))
        {
            _suggestedCharts.Remove(submission.Key);
        }

    }
    private async Task AddScore()
    {
        if (_submittingChart == null || _currentQualifiers==null || _photoUrl==null)
        {
            return;
        }
        var result = _addingMix == MixEnum.Phoenix ? _currentQualifiers.AddPhoenixScore(_submittingChart.Id, _score, _photoUrl)
            : _currentQualifiers.AddXXScore(_submittingChart.Id, _perfects, _greats, _goods, _bads, _misses, _maxCombo, _photoUrl);
        if (!result)
        {
            Snackbar.Add("Your previous score for this chart was higher!", Severity.Error);
            return;
        }
        await Save();
    }

    private async Task Save()
    {
        if (_currentQualifiers == null)
        {
            return;
        }
        _isSaving = true;
        await Mediator.Send(new SaveQualifiersCommand(TournamentId,_currentQualifiers));
        await RefreshLeaderboard();
        await EvaluateRecommended();
        _isSaving = false;
        _isNew = false;
        Snackbar.Add($"Qualifier saved! Pending Approval!", Severity.Success);
    }

    private int? _currentPlace = null;
    private UserQualifiers? _nextPlace = null;
    private async Task RefreshLeaderboard()
    {

        var allQuals = (await Qualifiers.GetAllUserQualifiers(TournamentId,_configuration)).OrderByDescending(q => q.CalculateScore()).ToArray();
        _usernames = allQuals.Select(u => u.UserName).Distinct().Select(s => s.ToString()).ToArray();
        if (_currentQualifiers == null)
        {
            return;
        }
        var ordered = allQuals.Select((q, index) => (q, index)).ToArray();
        _currentPlace = ordered.Where(q => q.q.UserName == _currentQualifiers.UserName).Select(q => q.index + 1).FirstOrDefault();
        _nextPlace = _currentPlace is null or 1 ? null : ordered.Where(q => q.index == _currentPlace - 1).Select(q => q.q).FirstOrDefault();

    }
    private async Task UploadFiles(IBrowserFile file)
    {
        if (_submittingChart == null)
        {
            return;
        }
        if (file.Size > MaxFileSize)
        {
            Snackbar.Add($"Your file was more than 20MB, please reduce your file size and try again.", Severity.Error);
            return;
        }

        _isUploading = true;
        try
        {
            var path = $"qualifiers/{TournamentId}/{_username}/{Guid.NewGuid()}.{file.Name.Split('.')[^1]}";
            _photoUrl= await FileUpload.UploadFile(path, file.OpenReadStream(MaxFileSize));

        }
        catch (Exception e)
        {
            Snackbar.Add($"There was an error while uploading your image, please try again. If the problem persists contact DrMurloc", Severity.Error);
            Logger.LogError(e, $"There was an error while uploading a photo: {e.Message} - {file.Name} {file.Size}");
        }
        _isUploading = false;

    }
    protected override async Task OnInitializedAsync()
    {
        if (TournamentId == default)
        {
            NavManager.NavigateTo("/Tournaments");
            return;
        }
        _charts = (await Mediator.Send(new GetChartsQuery(MixEnum.Phoenix))).ToDictionary(c => c.Id);
        var tournament = (await Mediator.Send(new GetAllTournamentsQuery()))
            .FirstOrDefault(t => t.Id == TournamentId);
        _tournamentName = tournament.Name;
        _configuration = await Qualifiers.GetQualifiersConfiguration(TournamentId);

        await RefreshLeaderboard();
        if (CurrentUser.IsLoggedIn)
        {
            await SetUsername(CurrentUser.User.Name);
        }
        await EvaluateRecommended();

    }
}
