@using ScoreTracker.Domain.SecondaryPorts
@using MediatR
@using ScoreTracker.Application.Commands
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Web.Services.Contracts
@using ScoreTracker.Application.Events
@inherits LayoutComponentBase
@inject ICurrentUserAccessor CurrentUser
@implements INotificationHandler<MatchUpdatedEvent>
<PageTitle>PIU Scores</PageTitle>

<MudThemeProvider Theme="Theme" />
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Color="Color.Primary" Fixed="false">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="() => _isOpen = !_isOpen"/>
        <MudText Typo="Typo.h6">PIU Scores</MudText>
        <MudSpacer></MudSpacer>
        @if (CurrentUser.IsLoggedIn)
        {
            <MudIconButton Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Inherit" Edge="Edge.Start" Href="/Account"></MudIconButton>
        }
        else
        {
            <MudIconButton Icon="@Icons.Material.Filled.NoAccounts" Color="Color.Inherit" Edge="Edge.Start" Href="/Login"></MudIconButton>
        }
    </MudAppBar>
    <MudDrawer @bind-Open="_isOpen" Variant="@DrawerVariant.Temporary">
        <MudNavMenu>
            @if (CurrentUser.IsLoggedIn)
            {
                <MudNavLink Href="/Account" Icon="@Icons.Material.Filled.AccountCircle">@L["Account"]</MudNavLink>
                <MudDivider DividerType="DividerType.Middle"></MudDivider>
                <MudNavLink Href="/Record" Icon="@Icons.Material.Filled.Description">@L["Record Score"]</MudNavLink>
                <MudDivider DividerType="DividerType.Middle"></MudDivider>
            }
            else
            {
                
                <MudNavLink Href="/Login" Icon="@Icons.Material.Filled.NoAccounts">@L["Login"]</MudNavLink>
                <MudDivider DividerType="DividerType.Middle"></MudDivider>
            }
            <MudNavLink Href="/Charts" Icon="@Icons.Material.Filled.List">@L["Charts List"]</MudNavLink>
            <MudDivider DividerType="DividerType.Middle"></MudDivider>
            <MudNavLink Href="/TierLists" Icon="@Icons.Material.Filled.Topic">@L["Tier Lists"]</MudNavLink>
            <MudDivider DividerType="DividerType.Middle"></MudDivider>
            <MudNavGroup Title=@L["Progress"] Icon="@Icons.Material.Filled.TrendingUp" Expanded="false">
                <MudNavLink Href="/Titles" Icon="@Icons.Material.Filled.Grade">@L["Titles"]</MudNavLink>
                <MudDivider DividerType="DividerType.Middle"></MudDivider>
                @if (CurrentUser.IsLoggedIn)
                {
                    <MudNavLink Href=@(_currentMix==MixEnum.Phoenix?"/Phoenix/Progress":"/Progress") Icon="@Icons.Material.Filled.BarChart">@L["Progress Charts"]</MudNavLink>
                    <MudDivider DividerType="DividerType.Middle"></MudDivider>
                }
            </MudNavGroup>
            <MudDivider DividerType="DividerType.Middle"></MudDivider>
            <MudNavGroup Title=@L["Tools"] Icon="@Icons.Material.Filled.Build" Expanded="false">
                <MudNavLink Href="/PhoenixCalculator" Icon="@Icons.Material.Filled.Calculate">@L["Phoenix Score Calculator"]</MudNavLink>
                <MudDivider DividerType="DividerType.Middle"></MudDivider>
                <MudNavLink Href="/ChartRandomizer" Icon="@Icons.Material.Filled.QuestionMark">@L["Chart Randomizer"]</MudNavLink>
                <MudDivider DividerType="DividerType.Middle"></MudDivider>
                <MudNavLink Href="/OfficialLeaderboards" Icon="@Icons.Material.Filled.Score">@L["Official Leaderboard Search"]</MudNavLink>
            </MudNavGroup>
            <MudDivider DividerType="DividerType.Middle"></MudDivider>
            <MudNavGroup Title=@L["Tournaments"] Icon="@Icons.Material.Filled.Leaderboard" Expanded="false">
                <MudNavLink Href="/Tournaments" Icon="@Icons.Material.Filled.Leaderboard">@L["Tournaments"]</MudNavLink>
                <MudDivider DividerType="DividerType.Middle"></MudDivider>
                <MudNavLink Href="/TournamentBuilder" Icon="@Icons.Material.Filled.Calculate">@L["Tournament Builder"]</MudNavLink>
                <MudDivider></MudDivider>
                <MudNavLink Href="/Eclipse/Qualifiers" Icon="@Icons.Material.Filled.Event">Eclipse 2023</MudNavLink>
            </MudNavGroup>
            <MudDivider DividerType="DividerType.Middle"></MudDivider>
            <MudNavLink Href="/Players" Icon="@Icons.Material.Filled.Person">@L["Find Players"]</MudNavLink>
            <MudDivider DividerType="DividerType.Middle"></MudDivider>
            <MudNavLink Href="/About" Icon="@Icons.Material.Filled.Info">@L["About"]</MudNavLink>
            <MudDivider DividerType="DividerType.Middle"></MudDivider>
            <MudNavGroup Title=@(L["Mix"]+" ("+_currentMix+")") Icon="@Icons.Material.Filled.LibraryMusic">
                @foreach (var value in Enum.GetValues<MixEnum>())
                {
                    <MudNavLink OnClick="()=>SetMix(value)">@value</MudNavLink>
                }
            </MudNavGroup>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
        <MudContainer>
            @Body
            
            <MudDialog @bind-IsVisible="_showDiscordDialog">
                <DialogContent>
                    <MudText Typo="Typo.h4">@L["New Discord"]</MudText>
                    @L["New Discord Disclaimer"]<br/><MudButton Href="https://discord.gg/MEYvr3bFte" Target="_blank" StartIcon="@Icons.Custom.Brands.Discord" Variant="Variant.Filled" Color="Color.Primary">PiuScores Discord</MudButton>
                </DialogContent>
                <DialogActions>
                    <MudSpacer></MudSpacer>
                    <MudButton Variant="Variant.Text"
                               OnClick="()=>_showDiscordDialog=false"
                               Color="Color.Primary">@L["Close"]</MudButton>
                </DialogActions>
            </MudDialog>
        </MudContainer>
    </MudMainContent>
</MudLayout>
@inject IMediator Mediator;
@inject IUiSettingsAccessor UiSettings;
@inject NavigationManager NavManager;
@code
{
    private bool _isOpen = false;
    private bool _showDiscordDialog = false;
    private const string DiscordPopupKey = "MainLayout__DiscordPopupShown";
    private MixEnum _currentMix = MixEnum.Phoenix;

    private async Task SetMix(MixEnum mix)
    {
        await UiSettings.SetSelectedMix(mix);
        NavManager.NavigateTo(NavManager.Uri, true);
    }
    protected override async Task OnInitializedAsync()
    {
        if (CurrentUser.IsLoggedIn)
        {
            var settings = await Mediator.Send(new GetUserUiSettingsQuery());
            if (!settings.ContainsKey(DiscordPopupKey))
            {
                _showDiscordDialog = true;
                await Mediator.Send(new SaveUserUiSettingCommand(DiscordPopupKey, "true"));
            }
        }
        _currentMix = await UiSettings.GetSelectedMix();
    }

    private static readonly MudTheme Theme = new()
        {
            Palette = new()
            {
                //77BCDC
                //466E8d
                Primary = "#80B3D4",
                Secondary = "#8FBCD8",
                Error = "#C72020",
                Success = "#6EDE7F",
                Warning = "#FFC433",
                TextPrimary = "#EDF1F5",
                TextSecondary = "#EDF1F5",
                ActionDefault = "#EDF1F5",
                ActionDisabled = "#d3d3d3",
                Background = "#18191A",
                BackgroundGrey = "#3A3B3C",
                Surface = "#242526",
                TextDisabled = "#d3d3d3",
                DrawerBackground = "#283E5C",
                DrawerIcon = "#EDF1F5",
                DrawerText = "#EDF1F5"
            }
        };

    public static event EventHandler<MatchUpdatedEvent>? MatchUpdated;
    public Task Handle(MatchUpdatedEvent notification, CancellationToken cancellationToken)
    {
        MatchUpdated?.Invoke(this, notification);
        return Task.CompletedTask;
    }
}
