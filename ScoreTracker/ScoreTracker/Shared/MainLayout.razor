@using ScoreTracker.Domain.SecondaryPorts
@using MediatR
@using ScoreTracker.Application.Commands
@using ScoreTracker.Application.Queries
@using ScoreTracker.Domain.Enums
@using ScoreTracker.Web.Components
@using ScoreTracker.Web.Services.Contracts
@using ScoreTracker.Application.Events
@using ScoreTracker.Domain.Events
@using MassTransit
@using ScoreTracker.Domain.Records
@inherits LayoutComponentBase
@inject ICurrentUserAccessor CurrentUser
@implements INotificationHandler<MatchUpdatedEvent>
@implements INotificationHandler<ImportStatusUpdated>
@implements INotificationHandler<PlayerStatsUpdatedEvent>
<PageTitle>PIU Scores</PageTitle>

<MudThemeProvider Theme="Theme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<ChartVideoDisplay></ChartVideoDisplay>
<MudLayout>
    <MudAppBar Color="Color.Primary" Fixed="false">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="() => _isOpen = !_isOpen"/>
        <MudText Typo="Typo.h6">@(_userId == null ? "PIU Scores" : $"{UserName}")</MudText>
        <MudSpacer></MudSpacer>
        @if (CurrentUser.IsLoggedIn)
        {
            <MudButton Variant="Variant.Filled" Style=@($"background:url('{_profileImage}'); height:50px; background-size:contain;") Href="/Account">
            </MudButton>
        }
        else
        {
            <MudIconButton Icon="@Icons.Material.Filled.NoAccounts" Color="Color.Inherit" Edge="Edge.Start" Href="/Login"></MudIconButton>
        }
    </MudAppBar>
    <MudDrawer @bind-Open="_isOpen" Variant="@DrawerVariant.Temporary">
        <MudNavMenu>
            @if (CurrentUser.IsLoggedIn)
            {
                <MudNavLink Href="/" Icon="@Icons.Material.Filled.Home">@L["Home"]</MudNavLink>
                <MudDivider DividerType="DividerType.Middle"></MudDivider>
                <MudNavLink Href="/Account" Icon="@Icons.Material.Filled.AccountCircle">@L["Account"]</MudNavLink>
                <MudDivider DividerType="DividerType.Middle"></MudDivider>
            }
            else
            {
                
                <MudNavLink Href="/Login" Icon="@Icons.Material.Filled.NoAccounts">@L["Login"]</MudNavLink>
                <MudDivider DividerType="DividerType.Middle"></MudDivider>
            }
            <MudNavLink Href="/Charts" Icon="@Icons.Material.Filled.List">@L["Charts List"]</MudNavLink>
            <MudDivider DividerType="DividerType.Middle"></MudDivider>
            
            <MudNavLink Href="/Chart" Icon="@Icons.Material.Filled.Description">@L["Chart Details"]</MudNavLink>
            <MudDivider DividerType="DividerType.Middle"></MudDivider>
            <MudNavLink Href="/TierLists" Icon="@Icons.Material.Filled.Topic">@L["Tier Lists"]</MudNavLink>
            <MudDivider DividerType="DividerType.Middle"></MudDivider>
            <MudNavGroup Title=@L["Progress"] Icon="@Icons.Material.Filled.TrendingUp" Expanded="false">
                <MudNavLink Href="/Titles" Icon="@Icons.Material.Filled.Grade">@L["Titles"]</MudNavLink>
                <MudDivider DividerType="DividerType.Middle"></MudDivider>
                @if (CurrentUser.IsLoggedIn)
                {
                    <MudNavLink Href=@(_currentMix==MixEnum.Phoenix?"/Phoenix/Progress":"/Progress") Icon="@Icons.Material.Filled.BarChart">@L["Progress Charts"]</MudNavLink>
                    <MudDivider DividerType="DividerType.Middle"></MudDivider>
                    @if (_currentMix == MixEnum.Phoenix)
                    {
                        <MudNavLink Href="/Pumbility" Icon="@Icons.Material.Filled.Star">PUMBILITY</MudNavLink>
                    }
                }
            </MudNavGroup>
            <MudDivider DividerType="DividerType.Middle"></MudDivider>
            <MudNavGroup Title=@L["Tools"] Icon="@Icons.Material.Filled.Build" Expanded="false">
                <MudNavLink Href="/PhoenixCalculator" Icon="@Icons.Material.Filled.Calculate">@L["Phoenix Score Calculator"]</MudNavLink>
                <MudDivider DividerType="DividerType.Middle"></MudDivider>
                <MudNavLink Href="/RatingCalculator" Icon="@Icons.Material.Filled.Calculate">@L["Rating Calculator"]</MudNavLink>
                <MudDivider></MudDivider>
                <MudNavLink Href="/ChartRandomizer" Icon="@Icons.Material.Filled.QuestionMark">@L["Chart Randomizer"]</MudNavLink>
                <MudDivider DividerType="DividerType.Middle"></MudDivider>
                <MudNavLink Href="/LifeCalculator" Icon="@Icons.Material.Filled.Battery4Bar">@L["Lifebar Calculator"]</MudNavLink>
                <MudDivider DividerType="DividerType.Middle"></MudDivider>
                <MudNavLink Href="/StepArtists" Icon="@Icons.Material.Filled.Brush">@L["Step Artists"]</MudNavLink>
            </MudNavGroup>
            <MudDivider DividerType="DividerType.Middle"></MudDivider>
            <MudNavGroup Title=@L["Official Leaderboards"] Icon="@Icons.Material.Filled.Score">
                <MudNavLink Href="/OfficialLeaderboards" Icon="@Icons.Material.Filled.Score">@L["Official Leaderboard Search"]</MudNavLink>
                <MudDivider DividerType="DividerType.Middle"></MudDivider>
                <MudNavLink Href="/OfficialLeaderboards/PlayerCompare" Icon="@Icons.Material.Filled.CompareArrows">@L["Leaderboard Player Compare"]</MudNavLink>
                <MudDivider DividerType="DividerType.Middle"></MudDivider>
                <MudNavLink Href="/PlayerRankings" Icon="@Icons.Material.Filled.Public">@L["World Rankings"]</MudNavLink>
            </MudNavGroup>
            <MudDivider DividerType="DividerType.Middle"></MudDivider>
            <MudNavGroup Title=@L["Tournaments"] Icon="@Icons.Material.Filled.Leaderboard" Expanded="false">
                <MudNavLink Href="/WeeklyCharts" Icon="@Icons.Material.Filled.ViewWeek">@L["Weekly Charts"]</MudNavLink>
                <MudDivider DividerType="DividerType.Middle"></MudDivider>
                <MudNavLink Href="/Tournaments" Icon="@Icons.Material.Filled.Leaderboard">@L["Tournaments"]</MudNavLink>
                <MudDivider DividerType="DividerType.Middle"></MudDivider>
                <MudNavLink Href="/TournamentBuilder" Icon="@Icons.Material.Filled.Calculate">@L["Tournament Builder"]</MudNavLink>
                @foreach (var tourney in _highlightedEvents)
                {
                    
                    <MudDivider></MudDivider>
                    @if (tourney.LinkOverride != null)
                    {
                        <MudNavLink Href="@tourney.LinkOverride.ToString()" Target="_blank" Icon="@Icons.Material.Filled.Event">@tourney.Name</MudNavLink>
                    }
                    else
                    {

                        <MudNavLink Href=@($"/Tournament/{tourney.Id}/Qualifiers") Icon="@Icons.Material.Filled.Event">@tourney.Name</MudNavLink>
                    }
                }
            </MudNavGroup>
            <MudDivider DividerType="DividerType.Middle"></MudDivider>
            <MudNavLink Href="/Communities" Icon="@Icons.Material.Filled.Group">@L["Communities"]</MudNavLink>
            <MudDivider DividerType="DividerType.Middle"></MudDivider>
            <MudNavLink Href="/About" Icon="@Icons.Material.Filled.Info">@L["About"]</MudNavLink>
            <MudDivider DividerType="DividerType.Middle"></MudDivider>
            <MudNavGroup Title=@(L["Mix"]+" ("+_currentMix+")") Icon="@Icons.Material.Filled.LibraryMusic">
                @foreach (var value in Enum.GetValues<MixEnum>())
                {
                    <MudNavLink OnClick="()=>SetMix(value)">@value</MudNavLink>
                }
            </MudNavGroup>
        </MudNavMenu>
        
        <MudSpacer></MudSpacer>
        <MudNavMenu>
            <MudNavLink Href="https://discord.gg/MEYvr3bFte" Target="_blank" Icon="@Icons.Custom.Brands.Discord">Discord</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
        <MudContainer>
            @Body
            
            <MudDialog @bind-Visible="_showBite">
                <DialogContent>
                    <MudImage Src="https://piuimages.arroweclip.se/BiteBanner.jpg" Height="100" ObjectFit="ObjectFit.ScaleDown" Style="display:block;margin-left:auto;margin-right:auto;"></MudImage>
                    <MudText Typo="Typo.subtitle1" Style="text-align:center;">
                        @L["9+ PIU Cabinets Running Phoenix."]
                        <br/>@L["101 person tournament."]
                        <br/>@L["99 matches tailored to each player's level."]
                        <br/>@L["8-10 estimated charts played per player."]
                        <br/>@L["CoOp and No Bar Old School Tournaments."]
                        <br/>@L["The most Pump it Up that has ever been at one event."]
                        <br/>@L["Why don't you just get up and dance, man?"]
                    </MudText>
                </DialogContent>
                <DialogActions>
                    <MudSpacer></MudSpacer>
                    <MudButton Href="https://bitegaming.org/?source=piuscores" Target="_blank" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Link" Variant="Variant.Outlined">@L["Open"]</MudButton>
                    <MudButton Variant="Variant.Text"
                               OnClick="()=>_showBite=false"
                               Color="Color.Primary">@L["Close"]</MudButton>
                </DialogActions>
            </MudDialog>

        </MudContainer>
    </MudMainContent>
</MudLayout>
@inject IMediator Mediator;
@inject IUiSettingsAccessor UiSettings;
@inject NavigationManager NavManager;
@code
{
    private bool _isOpen = false;
    private Guid? _userId = null;
    private bool _showBite = false;
    private const string BitePopupKey = "MainLayout__BitePopupShown";
    private MixEnum _currentMix = MixEnum.Phoenix;
    private string _profileImage = string.Empty;
    private string _gamerTag = string.Empty;
    private IEnumerable<TournamentRecord> _highlightedEvents = Array.Empty<TournamentRecord>();
    private async Task SetMix(MixEnum mix)
    {
        await UiSettings.SetSelectedMix(mix);
        NavManager.NavigateTo(NavManager.Uri, true);
    }
    protected override async Task OnInitializedAsync()
    {
        _userId = CurrentUser.IsLoggedIn ? CurrentUser.User.Id : null;
        _highlightedEvents = (await Mediator.Send(new GetAllTournamentsQuery()))
            .Where(e => e.IsHighlighted);
        var hasShown = await UiSettings.GetSetting(BitePopupKey);
        if (string.IsNullOrWhiteSpace(hasShown))
        {
            _showBite = true;
            await UiSettings.SetSetting(BitePopupKey,"true");
        }
        if (CurrentUser.IsLoggedIn)
        {
            var settings = await Mediator.Send(new GetUserUiSettingsQuery());
            _profileImage = settings.TryGetValue("ProfileImage", out var image) ? image :
                "https://piuimages.arroweclip.se/avatars/4f617606e7751b2dc2559d80f09c40bf.png";
            _gamerTag = settings.TryGetValue("GameTag", out var tag) ? tag : "";
            UserName = CurrentUser.User.Name;
            if (!string.IsNullOrWhiteSpace(_gamerTag))
        {
                UserName += $" ({_gamerTag})";
            }
            Rating = (await Mediator.Send(new GetPlayerStatsQuery(CurrentUser.User.Id))).SkillRating;
        }
        _currentMix = await UiSettings.GetSelectedMix();
    }

    private static readonly MudTheme Theme = new()
        {
            
            PaletteLight = new()
            {
    //77BCDC
    //466E8d
                Primary = "#80B3D4",
                Secondary = "#8FBCD8",
                Error = "#C72020",
                Success = "#6EDE7F",
                Warning = "#FFC433",
                TextPrimary = "#EDF1F5",
                TextSecondary = "#EDF1F5",
                ActionDefault = "#EDF1F5",
                ActionDisabled = "#d3d3d3",
                Background = "#18191A",
                BackgroundGray = "#3A3B3C",
                Surface = "#242526",
                TextDisabled = "#d3d3d3",
                DrawerBackground = "#283E5C",
                DrawerIcon = "#EDF1F5",
                DrawerText = "#EDF1F5"
            },
            PaletteDark = new()
            {
                //77BCDC
                //466E8d
                Primary = "#80B3D4",
                Secondary = "#8FBCD8",
                Error = "#C72020",
                Success = "#6EDE7F",
                Warning = "#FFC433",
                TextPrimary = "#EDF1F5",
                TextSecondary = "#EDF1F5",
                ActionDefault = "#EDF1F5",
                ActionDisabled = "#d3d3d3",
                Background = "#18191A",
                BackgroundGray = "#3A3B3C",
                Surface = "#242526",
                TextDisabled = "#d3d3d3",
                DrawerBackground = "#283E5C",
                DrawerIcon = "#EDF1F5",
                DrawerText = "#EDF1F5"
            }
        };

    public static event EventHandler<ImportStatusUpdated>? ImportStatusUpdated;
    public static event EventHandler<MatchUpdatedEvent>? MatchUpdated;
    public Task Handle(MatchUpdatedEvent notification, CancellationToken cancellationToken)
    {
        MatchUpdated?.Invoke(this, notification);
        return Task.CompletedTask;
    }
    private string UserName { get; set; }
    public int Rating { get; set; }

    public Task Handle(ImportStatusUpdated notification, CancellationToken cancellationToken)
    {
        ImportStatusUpdated?.Invoke(this, notification);
        return Task.CompletedTask;
    }

    public Task Handle(PlayerStatsUpdatedEvent notification, CancellationToken cancellationToken)
    {
        if (_userId != notification.UserId)
        {
            return Task.CompletedTask;
        }
        Rating = notification.NewStats.SkillRating;
        InvokeAsync(StateHasChanged);
        return Task.CompletedTask;
    }
}
